{"tags":[{"name":"JS对象","permalink":"http://yoursite.com/tags/JS对象/","url":"\\async\\tags\\JS对象.json","count":3}],"categories":[],"url":"\\async\\posts\\2017\\06\\16\\JS-javascript对象.json","date":1497601162000,"path":{"year":2017,"month":6,"day":16,"name":"JS-javascript对象"},"title":"JS-javascript对象","permalink":"http://yoursite.com/2017/06/16/JS-javascript对象/","content":"<h3 id=\"一、javascript-对象\"><a href=\"#一、javascript-对象\" class=\"headerlink\" title=\"一、javascript 对象\"></a>一、javascript 对象</h3><ul>\n<li>JavaScript 中的所有事物都是对象，如:字符串、数值、数组、函数等，每个对象带有<code>属性</code>和<code>方法</code>。<br>此外，JavaScript 允许自定义对象。</li>\n<li>其实并不是一切皆对象，因为javascript拥有5种基本数据类型(Undefined、Null、Boolean、Number和String)和一个引用数据类型(Object)。</li>\n<li>不过在js的核心思想里：操作数据时是将所有数据都视为对象进行操作的。</li>\n<li>对象只是带有属性和方法的特殊数据类型</li>\n<li>布尔值、数字型、字符串、日期、数学和正则表达式、数组甚至函数都可以是一个对象</li>\n</ul>\n<h3 id=\"二、javascript对象分类\"><a href=\"#二、javascript对象分类\" class=\"headerlink\" title=\"二、javascript对象分类\"></a>二、javascript对象分类</h3><p>javascript对象根据类型不同可分为：</p>\n<ol>\n<li><p>内部(内置)对象<br>内部对象又分为：<br>1)引用类型对象(本地对象)</p>\n<ul>\n<li>本地对象（native object），定义为“独立于宿主环境的 ECMAScript 实现提供的对象”。</li>\n<li>包括Object 、Array、Date、RegExp、Function、基本包装类型对象(Boolean类型、Number类型、String类型)、单体内置对象（Global和Math）</li>\n</ul>\n<p>2)单体内置对象</p>\n<ul>\n<li>单体内置对象（built-in object）定义为“由 ECMAScript 实现提供的、独立于宿主环境的所有对象，在 ECMAScript 程序开始执行时出现”。</li>\n<li>这意味着开发者不必明确实例化内置对象，它已被实例化了。</li>\n<li>ECMA-262 只定义了两个单体内置对象，即<code>Global</code>和<code>Math</code></li>\n<li>根据定义，每个单体内置对象都是本地对象。</li>\n</ul>\n</li>\n<li>宿主对象<ul>\n<li>所有非本地对象都是宿主对象（host object）</li>\n<li>即由 ECMAScript 实现的执行JS脚本的宿主环境提供的对象。</li>\n<li>对于嵌入到网页中的JS来说，其宿主对象就是浏览器提供的对象，所以又称为浏览器对象。<br>不同的浏览器提供的宿主对象可能不同，即使提供的对象相同，其实现方式也不一样。<br>这会带来浏览器兼容问题，增加开发难度。<br>浏览器对象有很多，如Window和Document等等。</li>\n<li>所有 BOM 和 DOM 对象都是宿主对象。</li>\n</ul>\n</li>\n<li>自定义对象<ul>\n<li>即开发人员自己定义的对象。</li>\n<li>JS允许使用自定义对象，使JS应用及功能得到扩充。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三、javascript对象的创建\"><a href=\"#三、javascript对象的创建\" class=\"headerlink\" title=\"三、javascript对象的创建\"></a>三、javascript对象的创建</h3><p>使用对象前先要进行对象的创建。<br>JavaScript中创建对象的几种方式：<br>1.使用<code>原始格式</code><br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person = &#123; </div><div class=\"line\">     name:&quot;Kevin&quot;, </div><div class=\"line\">  age:31, </div><div class=\"line\">  5:&quot;Test&quot; </div><div class=\"line\">&#125;; </div><div class=\"line\">alert(person.name); </div><div class=\"line\">alert(person[&quot;5&quot;]);</div></pre></td></tr></table></figure></p>\n<p>2.使用<code>Object构造函数</code><br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person = new Object(); </div><div class=\"line\">person.name=&quot;kevin&quot;; </div><div class=\"line\">person.age=31; </div><div class=\"line\">alert(person.name); </div><div class=\"line\">alert(person[&quot;name&quot;]);</div></pre></td></tr></table></figure></p>\n<p>3.使用<code>内置对象</code></p>\n<ul>\n<li>指通过JavaScript语言原生对象的构造方法，实例化出一个新的对象。</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = new String(&quot;xxx&quot;); </div><div class=\"line\">//创建并初始化String var str1 = &quot;xxx&quot;; </div><div class=\"line\">//直接赋值来创建的String </div><div class=\"line\">var func = new Function(&quot;x&quot;,&quot;alert(x)&quot;);//实例初始化一个function </div><div class=\"line\">var o = new Object();//创建并初始化一个Object</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>4.使用<code>自定义构造函数</code></p>\n<ul>\n<li>使用对象构造器来创建对象</li>\n<li>即使用this关键字定义创建的上下文属性，创建自定义对象构造器</li>\n<li>注意命名规范：作为构造函数的函数首字母要大写，以区别其它函数</li>\n<li><p>实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//创建自定义构造函数： </div><div class=\"line\">function Person(name,age,job) </div><div class=\"line\">&#123; </div><div class=\"line\">   this.name=name; </div><div class=\"line\">this.age=age; </div><div class=\"line\">this.job=job; </div><div class=\"line\">this.sayName=function() &#123; </div><div class=\"line\">   alert(this.name); </div><div class=\"line\">&#125;; </div><div class=\"line\">&#125; </div><div class=\"line\">//有了对象构造器，就可以创建新的对象实例：</div><div class=\"line\">var person = new Person(&quot;kevin&quot;,31,&quot;SE&quot;); </div><div class=\"line\">person.sayName();</div></pre></td></tr></table></figure>\n</li>\n<li><p>这种方式有个缺陷，如上例的sayName方法，它的每个实例都是指向不同的函数实例，而不是同一个。</p>\n</li>\n</ul>\n<p>5.使用<code>原型模式</code></p>\n<ul>\n<li>解决了方法4中提到的缺陷，使不同的对象的函数（如sayFriends）指向了同一个函数。<br>而且由于<code>prototype</code>实际上是指向父级的一种引用，它仅仅是个数据的副本，因此在初始化及存储上<code>更节约资源</code><br>但它本身也有缺陷，就是实例共享了引用类型friends。从下面的代码执行结果可以看到，两个实例的friends的值是一样的，这可能不是我们所期望的。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person() &#123; &#125; </div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123; </div><div class=\"line\">    constructor : Person, </div><div class=\"line\">\tname:&quot;kevin&quot;, </div><div class=\"line\">\tage:31, </div><div class=\"line\">\tjob:&quot;SE&quot;, </div><div class=\"line\">\tfriends:[&quot;Jams&quot;,&quot;Martin&quot;], </div><div class=\"line\">\tsayFriends:function() &#123; </div><div class=\"line\">\t   alert(this.friends); </div><div class=\"line\">\t&#125; </div><div class=\"line\">&#125;; </div><div class=\"line\">var person1 = new Person(); </div><div class=\"line\">person1.friends.push(&quot;Joe&quot;); </div><div class=\"line\">person1.sayFriends();//Jams,Martin,Joe </div><div class=\"line\"></div><div class=\"line\">var person2 = new Person(); </div><div class=\"line\">person2.sayFriends();//James,Martin,Joe</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>6.组合使用原型模式和构造函数的方式</p>\n<ul>\n<li>这种方法解决了方法5中提到的缺陷，而且也是使用最广泛、认同度最高的创建对象的方法。</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">//构造函数</div><div class=\"line\">function Person(name,age,job)</div><div class=\"line\">&#123; </div><div class=\"line\">   this.name=name; </div><div class=\"line\">   this.age=age; </div><div class=\"line\">   this.job=job; </div><div class=\"line\">   this.friends=[&quot;Jams&quot;,&quot;Martin&quot;]; </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">//原型模式</div><div class=\"line\">Person.prototype.sayFriends=function() &#123; </div><div class=\"line\">    alert(this.friends); </div><div class=\"line\">&#125;; </div><div class=\"line\"></div><div class=\"line\">var person1 = new Person(&quot;kevin&quot;,31,&quot;SE&quot;);</div><div class=\"line\">var person2 = new Person(&quot;Tom&quot;,30,&quot;SE&quot;); </div><div class=\"line\">person1.friends.push(&quot;Joe&quot;); </div><div class=\"line\">person1.sayFriends();//Jams,Martin,Joe </div><div class=\"line\">person2.sayFriends();//Jams,Martin</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>7.<code>使用JSON反序列</code></p>\n<ul>\n<li>JavaScript Object Notation(JavaScript对象命名)</li>\n<li>一种超轻量级的数据交换格式，易于阅读和编写，同时也易于及其解析和生成。</li>\n<li>JSON是完全独立于语言的文本格式，因此成为数据交换的理想格式。</li>\n<li>因XML的规范的复杂，JSON逐渐取代XML来传递数据</li>\n<li>JSON实际上是JavaScript的一个子集，JavaScript内置了JSON的解析</li>\n<li>JSON的数据类型：<br>　<code>number</code>：和JavaScript的number完全一致；<br>　<code>boolean</code>：就是JavaScript的true或false；<br>　<code>string</code>：就是JavaScript的string；<br>　<code>null</code>：就是JavaScript的null；<br>　<code>array</code>：就是JavaScript的Array表示方式——[]；<br>　<code>object</code>：就是JavaScript的{ … }表示方式；<br>　以及上面的任意组合。</li>\n<li>在JavaScript中使用JSON<br>JSON是JavaScript原生格式，这意味着在JavaScript中处理JSON数据不需要任何特殊的API或者工具包，JavaScript默认将JSON当做一个对象处理。</li>\n<li>JSON规定了字符集必须是<code>UTF-8</code>，因此不能表示多语言。<br>为了统一解析，JSON的字符串规定必须用双引号””，Object的键也必须用双引号””。</li>\n<li><p>序列化<br>即把任何JavaScript对象变成JSON，相当于把这个对象序列化成一个JSON格式的字符串，从而方便javascript对象通过网络传递给其他计算机；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">//把xiaoming对象序列化成JSON格式的字符串：</div><div class=\"line\">var xiaoming = &#123;</div><div class=\"line\">    name: &apos;小明&apos;,</div><div class=\"line\">    age: 14,</div><div class=\"line\">    gender: true,</div><div class=\"line\">    height: 1.65,</div><div class=\"line\">    grade: null,</div><div class=\"line\">    &apos;middle-school&apos;: &apos;\\&quot;W3C\\&quot; Middle School&apos;,</div><div class=\"line\">    skills: [&apos;JavaScript&apos;, &apos;Java&apos;, &apos;Python&apos;, &apos;Lisp&apos;]</div><div class=\"line\">&#125;;</div><div class=\"line\">JSON.stringify(xiaoming); // &apos;&#123;&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:14,&quot;gender&quot;:true,&quot;height&quot;:1.65,&quot;grade&quot;:null,&quot;middle-school&quot;:&quot;\\&quot;W3C\\&quot; Middle School&quot;,&quot;skills&quot;:[&quot;JavaScript&quot;,&quot;Java&quot;,&quot;Python&quot;,&quot;Lisp&quot;]&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">//若要输出得好看一些，可以加上参数来按缩进输出</div><div class=\"line\">JSON.stringify(xiaoming, null, &apos;  &apos;);</div><div class=\"line\"></div><div class=\"line\">//第二个参数用于控制如何筛选对象的键值，如只想输出指定的属性，可以传入Array：</div><div class=\"line\">JSON.stringify(xiaoming, [&apos;name&apos;, &apos;skills&apos;], &apos;  &apos;);</div><div class=\"line\"></div><div class=\"line\">//第二个参数还可传入一个函数，这样对象的每个键值对都会被函数先处理：</div><div class=\"line\">JSON.stringify(xiaoming, convert, &apos;  &apos;); //convert函数定义省略</div><div class=\"line\"></div><div class=\"line\">//可给xiaoming定义一个toJSON()的方法，规定要返回JSON序列化的数据</div><div class=\"line\">var xiaoming = &#123;</div><div class=\"line\">    name: &apos;小明&apos;,</div><div class=\"line\">    age: 14,</div><div class=\"line\">    …..</div><div class=\"line\">    toJSON: function () &#123;</div><div class=\"line\">        return &#123; &apos;Name&apos;: this.name , &apos;Age&apos;: this.age &#125;; //只输出name和age，并且改变了key：</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">JSON.stringify(xiaoming); // &apos;&#123;&quot;Name&quot;:&quot;小明&quot;,&quot;Age&quot;:14&#125;&apos;</div></pre></td></tr></table></figure>\n</li>\n<li><p>反序列化<br>即当收到一个JSON格式的字符串，只需把它反序列化成一个JavaScript对象，就相当于在JavaScript中创建对象了。<br>拿到一个JSON格式的字符串，用<code>JSON.parse()</code>把它变成一个JavaScript对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">JSON.parse(&apos;[1,2,3,true]&apos;); // [1, 2, 3, true]</div><div class=\"line\">JSON.parse(&apos;&#123;&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:14&#125;&apos;); // Object &#123;name: &apos;小明&apos;, age: 14&#125;</div><div class=\"line\">JSON.parse(&apos;true&apos;); // true</div><div class=\"line\">JSON.parse(&apos;123.45&apos;); // 123.45</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>JSON.parse()还可接收一个<code>函数</code>，用来转换、修改解析出的属性值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">JSON.parse(&apos;&#123;&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:14&#125;&apos;, function (key, value) &#123;</div><div class=\"line\">　　if (key === &apos;name&apos;) &#123;  return value + &apos;同学&apos;;  &#125;</div><div class=\"line\">　　return value;</div><div class=\"line\">&#125;); </div><div class=\"line\">// Object &#123;name: &apos;小明同学&apos;, age: 14&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"四、typeof操作符区分对象类型\"><a href=\"#四、typeof操作符区分对象类型\" class=\"headerlink\" title=\"四、typeof操作符区分对象类型\"></a>四、<code>typeof操作符</code>区分对象类型</h3><p><code>typeof操作符</code>能获取区分对象的类型，并且总是返回一个字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">typeof 123;   // &apos;number&apos;</div><div class=\"line\">typeof NaN;   // &apos;number&apos;</div><div class=\"line\">typeof &apos;str&apos;; // &apos;string&apos;</div><div class=\"line\">typeof true;  // &apos;boolean&apos;</div><div class=\"line\">typeof undefined; // &apos;undefined&apos;</div><div class=\"line\">typeof Math.abs;  // &apos;function&apos;</div><div class=\"line\">typeof null; // &apos;object&apos;</div><div class=\"line\">typeof [];   // &apos;object&apos;</div><div class=\"line\">typeof &#123;&#125;;   // &apos;object&apos;</div></pre></td></tr></table></figure></p>\n<p>由上可得，<code>number、string、boolean、function和undefined</code>有别于其他类型。<br>特别要注意的是：null的类型是object，Array的类型也是object，所以用typeof将无法区分出null、Array和通常意义上的object——{}。</p>\n<h3 id=\"五、访问对象\"><a href=\"#五、访问对象\" class=\"headerlink\" title=\"五、访问对象\"></a>五、访问对象</h3><ul>\n<li>使用<code>.</code>访问其属性和方法。</li>\n<li><p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//访问对象属性</div><div class=\"line\">对象名.属性名</div><div class=\"line\"></div><div class=\"line\">//访问对象方法</div><div class=\"line\">对象名.方法名()</div></pre></td></tr></table></figure>\n</li>\n<li><p>当访问对象的属性或者方法时，将按照搜索原型链prototype chain的规则进行：<br>1)首先查找自身的静态属性、方法，<br>2)继而查找创建上下文的可访问属性、方法，<br>3)最后查找创建的原型链。</p>\n</li>\n</ul>\n"}