{"tags":[{"name":"JS对象","permalink":"http://yoursite.com/tags/JS对象/","url":"\\async\\tags\\JS对象.json","count":4}],"categories":[],"url":"\\async\\posts\\2017\\06\\16\\JS对象-单体内置对象.json","date":1497604425000,"path":{"year":2017,"month":6,"day":16,"name":"JS对象-单体内置对象"},"title":"JS对象-单体内置对象","permalink":"http://yoursite.com/2017/06/16/JS对象-单体内置对象/","content":"<h3 id=\"一、认识javascript单体内置对象\"><a href=\"#一、认识javascript单体内置对象\" class=\"headerlink\" title=\"一、认识javascript单体内置对象\"></a>一、认识javascript<code>单体内置对象</code></h3><ul>\n<li>内置对象（built-in object）定义为“由 ECMAScript 实现提供的、独立于宿主环境的所有对象，在 ECMAScript 程序开始执行时出现”。</li>\n<li>这意味着开发者不必明确实例化内置对象，它已被实例化了。</li>\n<li>ECMA-262 只定义了两个内置对象，即<code>Global</code>和<code>Math</code>。<br>它们也是本地对象（根据定义，每个内置对象都是本地对象）</li>\n</ul>\n<h3 id=\"Global对象\"><a href=\"#Global对象\" class=\"headerlink\" title=\"Global对象\"></a>Global对象</h3><ul>\n<li>即全局对象，是ECMAScript中最特别的对象，因为实际上它根本不存在。</li>\n<li>在ECMAScript中，不存在独立的函数，所有函数都必须是某个对象的方法。<br>所以不属于其他对象的属性和方法，最终都是Global对象的属性和方法。</li>\n<li>Global对象不能直接使用，也不能用new运算符创建。<br>它在JavaScript引擎被初始化时创建，并初始化其方法和属性。 </li>\n<li>例如：<code>isNaN() 、isFinite() 、 parseInt()、parseFloat()</code>都是Global对象的方法。</li>\n<li><code>URI编码方法</code>：encodeURI()、encodeURIComponent()、decodeURI()、decodeURIComponent()</li>\n<li><code>eval()方法</code>：这方法就像一个完整的ECMAScript解析器，它只接受一个参数，即要执行的Javascript字符串。</li>\n<li>注意区分：<ol>\n<li>在全局作用域中<code>定义</code>的属性和函数，都是Global对象的属性和方法。<br>在全局作用域中<code>声明</code>的所有变量和函数，都成为了window对象的属性和方法。</li>\n<li>浏览器把<code>Global对象</code>作为<code>window对象</code>的<code>一部分</code>实现了。<br>因此，所有的全局属性和函数都是window对象的属性和方法。  </li>\n<li>即<code>window对象</code>包括<code>Global对象</code>。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Math对象\"><a href=\"#Math对象\" class=\"headerlink\" title=\"Math对象\"></a>Math对象</h3><ul>\n<li>Math对象提供一些属性和方法对数据进行数学计算。</li>\n<li>Math 对象是一个固有的对象，无需创建，直接把 Math 作为对象使用就可以调用其所有属性和方法。这是它与Date,String对象的区别。</li>\n<li>Math 对象属性：<br><img src=\"http://img.mukewang.com/532fe7cf0001e7b505170269.jpg\" alt=\" Math 对象属性\"><ul>\n<li>Math 对象方法：<br><img src=\"http://img.mukewang.com/532fe841000174db05160622.jpg\" alt=\" Math 对象方法\"></li>\n<li>一些方法：<br>1)<code>Math.ceil (x);</code>// 对一个数进行向上取整(返回的是大于或等于x，并且与x最接近的整数)<br>2)<code>Math. floor (x);</code>// 对一个数进行向下取整(返回的是小于或等于x，并且与 x 最接近的整数)<br>3) <code>Math. round (x);</code>// 把一个数字四舍五入为最接近的整数(返回与x最接近的整数)<br>4) <code>Math. random ();</code>//返回一个大于或等于0但小于1的符号为正的数字值</li>\n</ul>\n</li>\n</ul>\n"}