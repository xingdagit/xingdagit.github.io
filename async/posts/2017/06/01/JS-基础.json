{"tags":[{"name":"JS","permalink":"http://yoursite.com/tags/JS/","url":"\\async\\tags\\JS.json","count":10}],"categories":[],"url":"\\async\\posts\\2017\\06\\01\\JS-基础.json","date":1496287918000,"path":{"year":2017,"month":6,"day":1,"name":"JS-基础"},"title":"JS-基础","permalink":"http://yoursite.com/2017/06/01/JS-基础/","content":"<h2 id=\"一、JavaScript\"><a href=\"#一、JavaScript\" class=\"headerlink\" title=\"一、JavaScript\"></a>一、JavaScript</h2><ol>\n<li>运行在浏览器端的解释型语言(脚本语言) </li>\n<li>在Web世界里，只有JavaScript能跨平台、跨浏览器驱动网页，与用户交互;</li>\n<li>增强页面动态效果(如:下拉菜单、图片轮播、信息滚动等)；实现页面与用户之间的实时、动态交互(如:用户注册、登陆验证等)。</li>\n<li>ECMAScript是一种语言标准，而JavaScript是网景公司对ECMAScript标准的一种实现<br>(JavaScript的标准——ECMAScript )<br>(JavaScript的版本—-它实现了ECMAScript标准的哪个版本)</li>\n</ol>\n<h2 id=\"二、代码编写\"><a href=\"#二、代码编写\" class=\"headerlink\" title=\"二、代码编写\"></a>二、代码编写</h2><ol>\n<li>javascript作为一种脚本语言可以放在html页面中任何位置，但是它的加载顺序与页面的加载顺序一致，浏览器解释html时是按先后顺序的，先加载head部分后加载body部分，所以前面的script就先被执行。<br>比如进行页面显示初始化的js必须放在head里面，因为初始化都要求提前进行（如给页面body设置css等）；而如果是通过事件调用执行的function那么对位置没什么要求的。</li>\n<li>我们一般放在网页的head或者body部分。通常在页面中<code>&lt;head&gt;</code>部分放置<code>&lt;script&gt;</code>元素，浏览器解析head部分就会执行这个代码，然后才解析页面的其余部分;也可以放在<body>部分，JavaScript代码在网页读取到该语句的时候就会执行。</body></li>\n<li>通常方式：<code>&lt;head&gt;&lt;script type=&quot;text/javascript&quot;&gt;.....&lt;/script&gt;&lt;/head&gt;</code>中(可直接写也可以引用外部文件)。</li>\n<li>引用外部文件时，将JS代码放到一个单独的.js文件，然后在HTML中通过<code>&lt;script src=&quot;xxx.js&quot;&gt;&lt;/script&gt;</code>引入这个文件（这样更利于维护代码，并且多个页面可以各自引用同一份.js文件，也可以在同一个页面中引入多个.js文件）。在JS文件中，不需要<code>&lt;script&gt;</code>标签,直接编写JavaScript代码就可以了</li>\n<li>不可以用Word或写字板来编写JavaScript或HTML，因为带格式的文本保存后不是纯文本文件，无法被浏览器正常读取。</li>\n<li>本地方式运行JavaScript代码一般没有问题，但由于浏览器的安全限制，以<code>file://</code>开头的地址无法执行如联网等JavaScript代码，所以需要架设一个Web服务器，然后以<code>http://</code>开头的地址来正常执行所有JavaScript代码。</li>\n</ol>\n<h2 id=\"三、-基本语法\"><a href=\"#三、-基本语法\" class=\"headerlink\" title=\"三、    基本语法\"></a>三、    基本语法</h2><ol>\n<li>语句以;结束(并不强制要求因为它会自动加，但这样在某些情况下会改变程序的语义)，所以最好自己加</li>\n<li>行注释：// ；<br>块注释：/<em>…</em>/</li>\n<li>JavaScript严格区分大小写</li>\n<li><p>常用语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">document.write(&quot;welcome&quot;);  //打印输出；</div><div class=\"line\">alert(&quot;警告窗口&quot;);           //跳出警示框</div><div class=\"line\">confirm(&quot;提示信息&quot;);        //确认或者取消，返回布尔值(true或者false)</div><div class=\"line\">prompt(&quot;提示信息&quot;);        //输入框，输入数值点击确定</div><div class=\"line\">window.open([URL], [窗口名称], [参数字符串])  //打开一个已存在/新建的浏览器窗口</div><div class=\"line\">window.close(); 或 &lt;窗口对象&gt;.close();  //关闭本窗口</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>操作符之间的优先级（高到低）: 算术操作符 → 比较操作符 → 逻辑操作符 → “=”赋值符号</p>\n</li>\n<li><a href=\"http://blog.csdn.net/yujunaiquanni/article/details/52712362\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/yujunaiquanni/article/details/52712362</a></li>\n<li><a href=\"http://blog.csdn.net/yujunaiquanni/article/details/52711562\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/yujunaiquanni/article/details/52711562</a></li>\n</ol>\n<h2 id=\"四、-数据类型\"><a href=\"#四、-数据类型\" class=\"headerlink\" title=\"四、    数据类型\"></a>四、    数据类型</h2><ol>\n<li><p>Number</p>\n<ul>\n<li>不区分整数和浮点数，统一用Number表示</li>\n<li>合法的Number类型：<br>123; // 整数123 (由于计算机使用二进制，所以有时候用十六进制表示整数比较方便)<br>0.456; // 浮点数0.456<br>1.2345e3; // 科学计数法表示1.2345x1000，等同于1234.5<br>-99; // 负数<br>NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示<br>Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</li>\n<li>Number可以直接做四则运算，规则和数学一致<br>2 / 0; // Infinity<br>0 / 0; // NaN</li>\n</ul>\n</li>\n<li><p>字符串</p>\n<ul>\n<li>以单引号’ 或 双引号” 括起来的任意文本(内容本身包含时则使用转义字符\\来标识)</li>\n<li>比如’abc’，”xyz”，’I\\’m \\”OK\\”!’;</li>\n<li>多行字符串：反引号 <code>...</code> 表示<br>如：<br><code>这是一个（换行）多行（换行）字符串</code></li>\n<li>连接字符串<br>用<code>+</code>号连接：<code>var message = &#39;你好, &#39; + name + &#39;, 你今年&#39; + age + &#39;岁了!&#39;;</code><br>模板字符串(要用单引号)：<code>var  message =</code>你好, ${name}, 你今年${age}岁了!<code>;</code></li>\n<li>字符串长度：<code>str.length</code>;</li>\n<li>获取字符串某个指定位置的字符：str[下标]; //从0开始，超出范围返回undefined不报错<br>（字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但也没有任何效果）</li>\n<li>一些字符串操作方法：<br>调用这些方法本身不会改变原有字符串的内容，而是返回一个新字符串<br>toUpperCase()把一个字符串全部变为大写<br>toLowerCase()把一个字符串全部变为小写<br>indexOf()会搜索指定字符串出现的位置<br>substring()返回指定索引区间的子串<br>s.substring(0, 5); // 从索引0开始到5（不包括5）<br>s.substring(7); // 从索引7开始到结束</li>\n</ul>\n</li>\n<li><p>布尔值</p>\n<ul>\n<li>值：true、false、布尔运算计算值(2 &gt; 1; // 这是一个true值)</li>\n<li><code>&amp;&amp;</code>与运算，<code>||</code>或运算，<code>!</code>非运算</li>\n</ul>\n</li>\n<li><p>比较运算符</p>\n<ul>\n<li>JavaScript允许对任意数据类型做比较；</li>\n<li><code>=为赋值</code>  |  <code>==为一般比较</code>(可转换数据类型)  |  <code>===为严格比较(值和类型都要相等)</code></li>\n<li>最好使用”===”比较<br>false == 0; // true (自动转换数据类型再比较)<br>false === 0; // false (不会自动转换数据类型，如果数据类型不一致返回false，如果一致再比较)</li>\n<li>特殊的Number—-NaN：<br>与所有其他值都不相等，包括它自己（NaN === NaN; // false）<br>判断NaN的方法—-<code>isNaN()</code>函数：</li>\n<li>比较两个浮点数是否相等<br>浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数：<br> <code>1 / 3 === (1 - 2 / 3); // false</code><br>所以只能通过计算它们之差的绝对值，看是否小于某个阈值来判断：<br> <code>Math.abs(1 / 3 - (1 - 2 / 3)) &lt; 0.0000001; // true</code></li>\n</ul>\n</li>\n<li><p>null和undefined</p>\n<ul>\n<li>null表示一个“空”的值。它和0(数值)以及空字符串’’(长度为0的字符串)不同，null表示“空”。</li>\n<li>其他语言中也有类似JavaScript的null的表示：Java也用null，Swift用nil，Python用None表示。</li>\n<li>在JavaScript中还有一个和null类似的undefined，它表示“未定义”。</li>\n<li>JavaScript的设计者希望用null表示一个空的值，而undefined表示值未定义。事实证明，这并没有什么卵用，区分两者的意义不大。大多数情况下，我们都应该用null。undefined仅仅在判断函数参数是否传递的情况下有用。</li>\n</ul>\n</li>\n<li><p>数组</p>\n<ul>\n<li>JavaScript的数组存储的数据可以是任意数据类型</li>\n<li><p>创建数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myarr=new Array(); // 使用Array()函数（创建空数组，没有值，如输出则显示undefined）</div><div class=\"line\">var myarr=new Array(8); // 使用Array()函数（创建了数组并为数组指定长度，长度可改）</div><div class=\"line\">var myarr=new Array(1, 2, 3); // 使用Array()函数（创建了数组[1, 2, 3]）</div><div class=\"line\">var myarr= [1, 2, 3.14, &apos;Hello&apos;, null, true]; //直接写（常用）</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过索引来访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [1, 2, 3.14, &apos;Hello&apos;, null, true];</div><div class=\"line\">arr[0]; // 返回索引为0的元素，即1</div><div class=\"line\">arr[5]; // 返回索引为5的元素，即true</div><div class=\"line\">arr[6]; // 索引超出了范围，返回undefined</div></pre></td></tr></table></figure>\n</li>\n<li><p>length属性：获取Array的长度 （length属性是可变的，随数组元素的增加而改变）</p>\n</li>\n<li>可通过索引修改对应元素值：arr[1] = 99; 但如果索引超过了范围，会引起Array大小的变化</li>\n<li>indexOf()：获取一个指定的元素的位置</li>\n<li><p>slice()：截取Array的部分元素，然后返回一个新的Array<br>参数：<br>-无参数：从头到尾截取所有元素（可利用这一点复制一个Array）<br>-单参数：从该开始索引到结束<br>-起止参数：从开始索引开始，到结束索引结束(包括开始索引，不包括结束索引)<br>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos;, &apos;G&apos;];</div><div class=\"line\">arr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]</div><div class=\"line\">arr.slice(3); // 从索引3开始到结束: [&apos;D&apos;, &apos;E&apos;, &apos;F&apos;, &apos;G&apos;]</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>push()</code>：向Array的末尾添加若干元素（参数为添加的元素）<br><code>pop()</code>：把Array的最后一个元素删除掉</p>\n</li>\n<li><code>unshift()</code>：往Array的头部添加若干元素（参数为添加的元素）<br><code>shift()</code>：把Array的第一个元素删掉</li>\n<li><code>sort()</code>：对当前Array进行排序<br><code>reverse()</code>：反转</li>\n<li><p><code>splice()</code>：可从指定索引开始删除若干元素，然后从该位置添加若干元素<br>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [&apos;Microsoft&apos;, &apos;Apple&apos;, &apos;Yahoo&apos;, &apos;AOL&apos;, &apos;Excite&apos;, &apos;Oracle&apos;];</div><div class=\"line\">// 从索引2开始删除3个元素,然后再添加两个元素:</div><div class=\"line\">arr.splice(2, 3, &apos;Google&apos;, &apos;Facebook&apos;); // 返回删除的元素 [&apos;Yahoo&apos;, &apos;AOL&apos;, &apos;Excite&apos;]</div><div class=\"line\">arr; // [&apos;Microsoft&apos;, &apos;Apple&apos;, &apos;Google&apos;, &apos;Facebook&apos;, &apos;Oracle&apos;]</div><div class=\"line\">// 只删除,不添加:</div><div class=\"line\">arr.splice(2, 2); // [&apos;Google&apos;, &apos;Facebook&apos;]</div><div class=\"line\">arr; // [&apos;Microsoft&apos;, &apos;Apple&apos;, &apos;Oracle&apos;]</div><div class=\"line\">// 只添加,不删除:</div><div class=\"line\">arr.splice(2, 0, &apos;Google&apos;, &apos;Facebook&apos;); // 返回[],因为没有删除任何元素</div><div class=\"line\">arr; // [&apos;Microsoft&apos;, &apos;Apple&apos;, &apos;Google&apos;, &apos;Facebook&apos;, &apos;Oracle&apos;]</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>concat()</code>：连接Array，并返回一个新的Array<br>可接收任意个元素和Array，且会自动拆开Array，然后全部添加到新的Array里<br><code>var added = arr.concat([1, 2, 3]);</code><br>arr.concat(1, 2, [3, 4]); 相当于 arr.concat(1, 2, 3, 4);`</p>\n</li>\n<li><p><code>join()</code>：把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串<br>如果Array的元素不是字符串，将自动转换为字符串后再连接<br>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, 1, 2, 3];</div><div class=\"line\">arr.join(&apos;-&apos;); // &apos;A-B-C-1-2-3&apos;</div></pre></td></tr></table></figure>\n</li>\n<li><p>多维数组：数组的某个元素又是一个Array<br>例：<br><code>var arr = [[1, 2, 3], [400, 500, 600], &#39;-&#39;];</code><br> 通过索引获取值“500”：<code>var x = arr[1][1];</code></p>\n</li>\n</ul>\n</li>\n<li><p>对象</p>\n<ul>\n<li>JavaScript的对象是一种由键-值组成的无序集合数据类型</li>\n<li>例：<br>var person = {<br>   name: ‘Bob’,<br>   age: 20,<br>   tags: [‘js’, ‘web’, ‘mobile’],<br>   hasCar: true,<br>   zipcode: null<br>};</li>\n<li>对象的键(对象的属性名)都是字符串类型，值可以是任意数据类型</li>\n<li>获取对象的属性：对象变量.属性名（person.name）</li>\n<li>注意：要求属性名必须是一个有效的变量名。<br>如果属性名包含特殊字符，就必须用’’括起来。如 ‘middle-school’: ‘No.1 Middle School’；且访问这个属性也无法使用 . 操作符，必须用xxx[‘xxx’]来访问。如：xiaohong[‘middle-school’]; // ‘No.1 Middle School’</li>\n<li>JavaScript规定，访问不存在的属性不报错，而是返回<code>undefined</code></li>\n<li><p>JavaScript的对象是动态类型(可以自由地给一个对象添加或删除属性)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var xiaoming = &#123;</div><div class=\"line\"> name: &apos;小明&apos;</div><div class=\"line\">&#125;;</div><div class=\"line\">xiaoming.age; // undefined</div><div class=\"line\">xiaoming.age = 18; // 新增一个age属性</div><div class=\"line\">xiaoming.age; // 18</div><div class=\"line\">delete xiaoming.age; // 删除age属性</div><div class=\"line\">xiaoming.age; // undefined</div><div class=\"line\">delete xiaoming[&apos;name&apos;]; // 删除name属性</div><div class=\"line\">xiaoming.name; // undefined</div><div class=\"line\">delete xiaoming.school; // 删除一个不存在的school属性也不会报错</div></pre></td></tr></table></figure>\n</li>\n<li><p>检测某一对象是否拥有某一属性，可以用in操作符：<code>&#39;name&#39; in xiaoming;//返回true或 false</code></p>\n</li>\n<li>但返回true并不代表这个属性是xiaoming的，它可能是xiaoming继承得到的：<br><code>&#39;toString&#39; in xiaoming; // true</code><br> (toString定义object对象中，而所有对象最终都会在原型链上指向object，所以xiaoming也拥有toString属性)</li>\n<li><p>要判断一个属性是否是对象自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var xiaoming = &#123;</div><div class=\"line\">  name: &apos;小明&apos;</div><div class=\"line\">&#125;;</div><div class=\"line\">xiaoming.hasOwnProperty(&apos;name&apos;); // true</div><div class=\"line\">xiaoming.hasOwnProperty(&apos;toString&apos;); // false</div></pre></td></tr></table></figure>\n</li>\n<li><p>一种输出对象所有属性的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(var i in 对象名)&#123;</div><div class=\"line\">  console.log(对象名[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>变量</p>\n<ul>\n<li>变量是用于存储某种/某些数值的存储器</li>\n<li>声明变量语法: <code>var 变量名;</code>，可一次声明多个变量，变量之间用”,”逗号隔开即可。声明变量即为变量准备位置(即内存）</li>\n<li>变量名必须使用字母、下划线(<em>)或者美元符($)开始开头，内容是大小写英文、数字、$和</em>的组合，区分大小写。</li>\n<li>变量要先声明了才能赋值(用<code>=</code>号)，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，且可以是不同类型的变量，但是要注意var申明只能用一次</li>\n<li>动态语言：变量本身类型不固定（Javascript）<br>静态语言：定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错（Java）</li>\n<li>例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a; // 申明了变量a，此时a的值为undefined</div><div class=\"line\">var $b = 1; // 申明了变量$b，同时给$b赋值，此时$b的值为1</div><div class=\"line\">var s_007 = &apos;007&apos;; // s_007是一个字符串</div><div class=\"line\">var mystring = &quot;Java&quot; + &quot;Script&quot;; //“+”号可用于连接字符串，值为”JavaScript”</div><div class=\"line\">var mynum=  1+&quot;5&quot; ; //数字与字符串连接时，数字会转换成字符串再连接，值为”15”</div><div class=\"line\">var Answer = true; // Answer是一个布尔值true</div><div class=\"line\">var t = null; // t的值是null</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>strict模式</p>\n<ul>\n<li>javascript设计之初，没通过var申明的变量为全局变量，导致在同一个页面的不同的JavaScript文件中，若同时使用变量i但都没用var申明，将造成变量i互相影响，产生难以调试的错误结果</li>\n<li>为了修补JavaScript这一严重设计缺陷，ECMA在后续规范中推出了strict模式。在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误</li>\n<li>启用strict模式：<br>在JavaScript代码的第一行写上：<code>&#39;use strict;&#39;</code>//这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript</li>\n</ul>\n</li>\n<li><p>ES6新数据类型Map</p>\n<ul>\n<li>为解决JavaScript对象的键必须是字符串的问题(因为实际上Number或者其他数据类型作为键也是非常合理的)</li>\n<li>Map是一组键值对的结构，具有极快的查找速度</li>\n<li><p>创建语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var m = new Map(); // 初始化一个空Map </div><div class=\"line\">var m = new Map([[&apos;Michael&apos;, 95], [&apos;Bob&apos;, 75], [&apos;Tracy&apos;, 85]]);  //用二维数组初始化</div></pre></td></tr></table></figure>\n</li>\n<li><p>一些方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">m.set(&apos;Adam&apos;, 67); // 添加新的key-value  (重复给key赋值value，后面的值覆盖前面的值)</div><div class=\"line\">m.has(&apos;Adam&apos;); // 是否存在key &apos;Adam&apos;</div><div class=\"line\">m.get(&apos;Adam&apos;); // 67</div><div class=\"line\">m.delete(&apos;Adam&apos;); // 删除key &apos;Adam&apos;</div><div class=\"line\">m.get(&apos;Adam&apos;); // undefined</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>ES6新数据类型Set</p>\n<ul>\n<li>Set是一组key的集合，不存储value。</li>\n<li>由于key不能重复，所以在Set中没有重复的key （重复元素在Set中自动被过滤）</li>\n<li>创建语法：<br>var s1 = new Set(); // 空Set<br>var s2 = new Set([1, 2, 3]); //用数组初始化，含1, 2, 3</li>\n<li>一些方法：<br>s.add(4)；//添加key（重复添加不会有效果）<br>s.delete(3); //删除key</li>\n</ul>\n</li>\n<li><p>ES6新数据类型iterable</p>\n<ul>\n<li>遍历Array可采用下标循环，遍历Map和Set就无法使用下标。为统一集合类型，ES6标准引入了新的iterable类型</li>\n<li>Array、Map和Set都属于iterable类型</li>\n<li>具有iterable类型的集合可以通过新的for … of循环来遍历：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</div><div class=\"line\">var s = new Set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]);</div><div class=\"line\">var m = new Map([[1, &apos;x&apos;], [2, &apos;y&apos;], [3, &apos;z&apos;]]);</div><div class=\"line\">for (var x of a) &#123; // 遍历Array</div><div class=\"line\">  alert(x);</div><div class=\"line\">&#125;</div><div class=\"line\">for (var x of s) &#123; // 遍历Set</div><div class=\"line\">  alert(x);</div><div class=\"line\">&#125;</div><div class=\"line\">for (var x of m) &#123; // 遍历Map</div><div class=\"line\">  alert(x[0] + &apos;=&apos; + x[1]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>for … of循环相对于for…in循环，优势是只循环遍历集合本身的元素（避免因添加了额外的属性而带来意想不到的效果）</p>\n<ul>\n<li>更好的方式是直接使用iterable内置的forEach方法(ES5.1标准引入)<br>它接收一个函数，每次迭代就自动回调该函数<br>例(array)：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</div><div class=\"line\">a.forEach(function (element, index, array) &#123;</div><div class=\"line\">  // element: 指向当前元素的值</div><div class=\"line\">  // index: 指向当前索引</div><div class=\"line\">  // array: 指向Array对象本身</div><div class=\"line\">  alert(element);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>例(Set)：Set没有索引，因此回调函数的前两个参数都是元素本身</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var s = new Set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]);</div><div class=\"line\">s.forEach(function (element, sameElement, set) &#123;</div><div class=\"line\">    alert(element);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>例(Map)：Map的回调函数参数依次为value、key和map本身</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var m = new Map([[1, &apos;x&apos;], [2, &apos;y&apos;], [3, &apos;z&apos;]]);</div><div class=\"line\">m.forEach(function (value, key, map) &#123;</div><div class=\"line\">  alert(value);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果对某些参数不感兴趣，由于JavaScript的函数调用不要求参数必须一致，因此可以忽略它们<br>例子：只需要获得Array的element</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</div><div class=\"line\">a.forEach(function (element) &#123;</div><div class=\"line\">   alert(element);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"五、基础语法\"><a href=\"#五、基础语法\" class=\"headerlink\" title=\"五、基础语法\"></a>五、基础语法</h2><ol>\n<li>条件判断<ul>\n<li>语法：if () { … }  ( else if { … } )  else { … }</li>\n<li>多种选择：<code>switch(表达式) { case值1: 执行代码块1  break; …. default: }</code></li>\n<li>JavaScript把null、undefined、0、NaN和空字符串’’视为false，其他值一概视为true</li>\n</ul>\n</li>\n<li><p>循环</p>\n<ul>\n<li>for循环(通过初始条件、结束条件和递增条件来循环执行语句块)— 常用于利用索引来遍历数组</li>\n<li><p>for … in循环<br>1)可依次循环输出一个对象的所有属性</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (var key in o) &#123;</div><div class=\"line\">   if ( o.hasOwnProperty(key) )   //hasOwnProperty()来过滤掉对象继承的属性</div><div class=\"line\">   &#123;  alert(key);  &#125;    //输出 &apos;name&apos;, &apos;age&apos;, &apos;city&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2)可循环输出Array 元素  (得到的是String而不是Number)</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</div><div class=\"line\">for (var i in a) &#123;</div><div class=\"line\">    alert(i);    // &apos;0&apos;, &apos;1&apos;, &apos;2&apos;</div><div class=\"line\">    alert(a[i]);  // &apos;A&apos;, &apos;B&apos;, &apos;C&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>while循环—-每次循环开始的时候判断条件</p>\n</li>\n<li>do … while循环—-每次循环完成的时候判断条件，循环体至少执行1次</li>\n</ul>\n</li>\n<li>输出内容<ul>\n<li><code>document.write()</code>可用于直接向 HTML 输出流写内容，即直接在网页中输出内容。</li>\n<li>输出内容用<code>&quot; &quot;</code>括起，直接输出<code>&quot;&quot;</code>号内的内容。单引号和双引号没什么区别，只是双引号会搜索引号内的内容是不是有变量，有则输出其值，没有则输出原有内容。所以输出纯字符串的时候用单引号比双引号效率高，因为省去检索的过程。</li>\n<li>通过直接写变量名（不加引号），输出变量存储的内容。</li>\n<li>可通过在内容之间用<code>+</code>号连接，输出多项内容。</li>\n<li>可通过<code>&quot;&lt;html标签&gt;&quot;</code>形式，输出HTML标签，并使其起作用。 </li>\n<li><code>alert(字符串或变量);</code>  //警告消息对话框</li>\n<li><code>confirm(str);</code> //确认消息对话框，返回值: Boolean值(确定就true，取消就false)</li>\n<li><code>prompt(“str1”, “str2”);</code> /*提问消息对话框，包含一个确定按钮、取消按钮与一个文本输入框。Str1：要显示在消息对话框中的文本，不可修改；str2：文本框中的内容，可以修改。返回值：确定就返回文本框中的内容，取消就返回null)。</li>\n<li><code>window.open([URL], [窗口名称], [参数字符串])</code> //打开一个已存在/新建的浏览器窗口</li>\n<li><code>window.close();</code> //关闭本窗口   或   <code>&lt;窗口对象&gt;.close();</code>//关闭指定的窗口</li>\n<li>综合实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">function openWindow()</div><div class=\"line\">&#123;</div><div class=\"line\">    var open=confirm(&quot;确认新建窗口打开网站吗？&quot;);// 新窗口打开时弹出确认框，是否打开</div><div class=\"line\">    if(open==true)// 通过输入对话框，确定打开的网址，默认为 http：//www.imooc.com/</div><div class=\"line\">    &#123;</div><div class=\"line\">        var url=prompt(&quot;通过输入对话框，确定打开的网址&quot;,&quot;http://www.imooc.com&quot;);</div><div class=\"line\">        if(url!=null)</div><div class=\"line\">        &#123;</div><div class=\"line\">            window.open(打开的url,&quot;_blank&quot;,&apos;width=400px,height=500px,menubar=no,status=no,toolbar=no&apos;);    </div><div class=\"line\">            //打开的窗口要求，宽400像素，高500像素，无菜单栏、无状态栏、无工具栏。</div><div class=\"line\">        &#125;</div><div class=\"line\">        else</div><div class=\"line\">        &#123;</div><div class=\"line\">            alert(&quot;再见！&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;   </div><div class=\"line\">    else</div><div class=\"line\">    &#123;</div><div class=\"line\">        alert(&quot;再见！&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n"}