{"tags":[{"name":"JS","permalink":"http://yoursite.com/tags/JS/","url":"\\async\\tags\\JS.json","count":11}],"categories":[],"url":"\\async\\posts\\2017\\06\\01\\JS-DOM.json","date":1496329304000,"path":{"year":2017,"month":6,"day":1,"name":"JS-DOM"},"title":"JS-DOM","permalink":"http://yoursite.com/2017/06/01/JS-DOM/","content":"<h3 id=\"认识DOM\"><a href=\"#认识DOM\" class=\"headerlink\" title=\"认识DOM\"></a>认识DOM</h3><ul>\n<li>DOM指 Document Object Model (文档对象模型)。</li>\n<li>DOM 是 W3C（万维网联盟）的标准。</li>\n<li>DOM定义访问和处理HTML文档的标准方法。</li>\n</ul>\n<blockquote>\n<p>“W3C 文档对象模型 （DOM） 是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档的内容、结构和样式。” </p>\n</blockquote>\n<ul>\n<li>W3C DOM 标准被分为 3 个不同的部分：<br>1)<code>核心 DOM</code> - 针对任何结构化文档的标准模型<br>2)<code>XML DOM</code> - 针对 XML 文档的标准模型<br>3)<code>HTML DOM</code> - 针对 HTML 文档的标准模型(关于如何获取、修改、添加或删除 HTML 元素的标准)</li>\n<li>HTML DOM定义了所有 HTML 元素的对象和属性，以及访问它们的方法，将HTML文档呈现为带有元素、属性和文本的树结构（节点树）。 </li>\n<li><p>在JavaScript中，我们常把一个元素称之为DOM元素。把整个页面结构称之为DOM结构。</p>\n</li>\n<li><p><img src=\"http://www.w3school.com.cn/i/ct_htmltree.gif\" alt=\" HTML DOM Tree\"></p>\n</li>\n</ul>\n<h3 id=\"HTML-DOM-对象\"><a href=\"#HTML-DOM-对象\" class=\"headerlink\" title=\"HTML DOM 对象\"></a>HTML DOM 对象</h3><ol>\n<li><p>HTML DOM <code>Document</code> 对象</p>\n<ul>\n<li>每个载入浏览器的 HTML 文档都会成为 Document 对象。</li>\n<li>Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。</li>\n<li>Document 对象是 Window 对象的一部分，可通过 <code>window.document</code>属性对其进行访问。</li>\n<li>拥有Document 对象集合、Document 对象属性和Document 对象方法。</li>\n<li>获得浏览器窗口的尺寸（浏览器的视口，不包括工具栏和滚动条）的方法:<br><code>document.documentElement.clientWidth|| document.body.clientWidth;</code> //兼容浏览器，高度类似</li>\n<li>获取网页内容高度和宽度(包括滚动条等边线，会随窗口的显示大小改变)的方法：<br><code>document.documentElement.offsetWidth|| document.body.offsetWidth;</code>//兼容浏览器，高度类似(offsetHeight = clientHeight + 滚动条 + 边框)</li>\n<li>获取网页内容高度和宽度的方法：<br><code>document.documentElement.scrollWidth|| document.body.scrollWidth;</code> //兼容浏览器，高度类似</li>\n</ul>\n</li>\n<li><p>HTML DOM <code>Element</code>对象</p>\n<ul>\n<li>即HTML DOM 节点。</li>\n<li>在 HTML DOM（文档对象模型）中，所有事物都是节点，即Element 对象表示 HTML 元素。(DOM 是被视为节点树的 HTML)  ，节点树具体分类：<br>1)整个文档本身是文档节点<br>2)所有 HTML 元素是元素节点，包括文本节点和属性节点；<br>3)所有 HTML 属性是属性节点<br>4)HTML 元素内的文本是文本节点<br>5)注释是注释节点</li>\n<li>节点树中的节点彼此拥有层级关系：<br>1) 父节点拥有子节点。<br>2) 同级的子节点被称为同胞（兄弟或姐妹）。<br>3) 顶端节点被称为根（root）</li>\n<li><code>Element</code> 对象可以拥有类型为元素节点、文本节点、注释节点的子节点。</li>\n<li><code>NodeList</code> 对象表示节点列表，比如 HTML 元素的子节点的集合。</li>\n<li>DOM节点实际上是指Node。在HTML中Node包括Element、Comment、CDATA_SECTION以及根节点Document类型等。但大多数时候我们只关心Element(即实际控制页面结构的Node)，其他类型的Node忽略即可，所以一般认为DOM节点是指Element。根节点Document已经自动绑定为全局变量document</li>\n<li>通过 HTML DOM，树中的所有节点均可通过<code>JavaScript</code>进行访问。所有 HTML 元素（节点）均可<code>创建\\删除\\被修改</code>。</li>\n</ul>\n</li>\n<li><p>HTML DOM <code>Attribute</code> 对象</p>\n<ul>\n<li>在HTML  DOM 中，<code>Attr</code>对象表示 HTML 属性。</li>\n<li>HTML 属性始终属于 HTML 元素。</li>\n<li>在HTML DOM 中，<code>NamedNodeMap</code>对象表示元素属性节点的无序集合。<code>NamedNodeMap</code>中的节点可通过名称或索引（数字）来访问。</li>\n</ul>\n</li>\n<li><p>HTML DOM <code>Event</code> 对象 </p>\n<ul>\n<li><code>Event</code>对象代表事件的状态，是可以被 JavaScript 侦测到的行为。</li>\n<li>事件通常与函数结合使用，函数不会在事件发生前被执行！</li>\n<li>网页中的每个元素都可以产生某些可触发 JavaScript 函数或程序的事件。</li>\n<li>如要使用事件，在相应元素中<code>设置事件属性</code>即可。</li>\n<li>一些常用事件：<br>1)鼠标单击事件(onclick)<br>当在网页上单击鼠标时触发，同时onclick事件调用的程序块会被执行。通常与按钮<code>&lt;button&gt;</code>一起使用。<br>实例：<code>&lt;input name=&quot;button&quot; type=&quot;button&quot; value=&quot;提交&quot; onclick=&quot;add()&quot; /&gt;</code><br>2)鼠标经过事件（onmouseover）<br>当鼠标移到一个对象上时触发，并执行onmouseover事件调用的程序。<br>实例：<code>&lt;input name=&quot;button&quot; type=&quot;button&quot; value=&quot;提交&quot; onmouseover =&quot;add()&quot; /&gt;</code><br>3)鼠标移开事件（onmouseout）<br>当鼠标移开当前对象时触发，并执行onmouseout调用的程序。<br>实例：<code>&lt;input name=&quot;button&quot; type=&quot;button&quot; value=&quot;提交&quot; onmouseout =&quot;add()&quot; /&gt;</code><br>4)光标聚焦事件（onfocus）<br>当网页中的对象获得焦点(一般需点击)时触发，并执行onfocus调用的程序。<br>不能用于<code>&lt;form&gt;</code>标签，须用于<code>&lt;form&gt;</code>里的子标签<br>与<code>onblur事件</code>是相对事件<br>实例：<code>&lt;input name=&quot;button&quot; type=&quot;button&quot; value=&quot;提交&quot; onfocus =&quot;add()&quot; /&gt;</code><br>5)失焦事件（onblur）<br>当光标离开当前获得聚焦对象(失去焦点)时触发，并执行onblur调用的程序。<br>与<code>onfocus事件</code>是相对事件<br>实例：<code>&lt;input name=&quot;button&quot; type=&quot;button&quot; value=&quot;提交&quot; onfocus =&quot;add()&quot; /&gt;</code><br>6)内容选中事件（onselect）<br>当<code>文本框</code>或者<code>文本域</code>中的文字被选中(变蓝色那种)时触发，并执行onselect调用的程序。<br>注意在调用函数中不要使用<code>document.write()</code>,会因覆盖所有内容而使浏览器崩溃。<br>实例：<code>&lt;input name=&quot;button&quot; type=&quot;button&quot; value=&quot;提交&quot; onselect =&quot;add()&quot; /&gt;</code><br>7)文本框内容改变事件（onchange）<br>当文本框的内容改变且失去焦点时触发，并执行onchange调用的程序。<br>实例：<code>&lt;input name=&quot;button&quot; type=&quot;button&quot; value=&quot;提交&quot; onchange =&quot;add()&quot; /&gt;</code><br>8)加载事件（onload）<br>当页面加载完成后立即触发，并执行onload调用的程序。<br>可将事件写在<code>&lt;body&gt;</code>标签内，但最好实现表现与行为分离，放在JS的文件里。<br>实例：<code>&lt;body onload=&quot;message()&quot;&gt;</code> 或 <code>window.onload=函数名;</code><br>9)卸载事件（onunload）<br>当页面刷新、超链接跳转其他页面等时触发，并执行onunload调用的程序。<br>注意：不同浏览器对onunload事件支持不同(一般用于IE)。<br>注意与<code>onbeforeunload</code>事件的区别。<br>实例：<code>window.onunload = 函数名;</code><br>拥有Document 对象集合、Document 对象属性和Document 对象方法。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"HTML-DOM-方法\"><a href=\"#HTML-DOM-方法\" class=\"headerlink\" title=\"HTML DOM 方法\"></a>HTML DOM 方法</h3><ul>\n<li>即可在节点（HTML 元素）上执行的动作。</li>\n<li>注意：参数要加引号!!!</li>\n<li>一些常用的 HTML DOM 方法：<br>getElementById()     – 返回带有指定 ID 的元素。<br>getElementsByTagName()  – 返回包含带有指定标签名称的所有元素的节点列表（集合/节点数组）。<br>getElementsByClassName() – 返回包含带有指定类名的所有元素的节点列表。<br>appendChild()    在指定节点的最后一个子节点列表之后添加一个新的子节点。<br>removeChild()    删除子节点。<br>replaceChild()    替换子节点。<br>insertBefore()    在指定的子节点前面插入新的子节点。<br>createAttribute()    创建属性节点。<br>createElement()    创建元素节点。<br>createTextNode()    创建文本节点。<br>getAttribute(属性名)    通过元素节点的属性名称来获取属性值。<br>setAttribute(属性名, 属性值)    把指定属性设置或修改为指定的值。(如果不存在具有指定名称的属性，该方法将创建一个新属性)</li>\n</ul>\n<h3 id=\"HTML-DOM-属性\"><a href=\"#HTML-DOM-属性\" class=\"headerlink\" title=\"HTML DOM 属性\"></a>HTML DOM 属性</h3><p>属性是节点（HTML 元素）的值，能够获取或设置。</p>\n<ol>\n<li><code>innerHTML</code>属性:<ul>\n<li>用于获取或设置 任意HTML 元素的内容</li>\n<li>例：<code>var txt=document.getElementById(&quot;intro&quot;).innerHTML;</code></li>\n</ul>\n</li>\n<li><code>nodeName</code>属性<ul>\n<li>代表节点/元素的名称</li>\n<li>只读属性，为字符串</li>\n<li><code>nodeName</code>始终包含 HTML 元素的大写字母标签名。</li>\n<li>规定：<br>1)文档节点的 <code>nodeName</code>始终是 #document<br>2)元素节点的<code>nodeName</code>与标签名相同<br>3)属性节点的 <code>nodeName</code>与属性名相同<br>4)文本节点的<code>nodeName</code>始终是 #text</li>\n</ul>\n</li>\n<li><code>nodeValue</code>属性<ul>\n<li>代表节点/元素的值</li>\n<li>规定：<br>1) 元素节点的 <code>nodeValue</code>是<code>undefined</code>或<code>null</code><br>2) 文本节点的 <code>nodeValue</code>是文本本身<br>3) 属性节点的<code>nodeValue</code>是属性值</li>\n<li>例：<code>document.getElementById(&quot;intro&quot;).firstChild.nodeValue</code></li>\n</ul>\n</li>\n<li><code>nodeType</code>属性<ul>\n<li>代表节点/元素的类型</li>\n<li>只读属性，整数</li>\n<li>各元素类型的NodeType：<br><code>元素-1</code><br><code>属性-2</code><br><code>文本-3</code><br><code>注释-8</code><br><code>文档-9</code></li>\n</ul>\n</li>\n<li>用于遍历DOM节点树的一些属性，如<code>childNodes</code>属性：<ul>\n<li>访问选定元素节点下的所有子节点的列表</li>\n<li>返回的值可看作是一个数组，具有length属性，并可根据索引返回某一子节点/子元素，<code>childNodes[0]</code>表示第一个子节点/子元素</li>\n<li>无子节点时返回不包含节点的NodeList</li>\n<li>语法：<code>document.getElementsByTagName(&quot;div&quot;)[0].childNodes;</code>//返回页面第一个div的所以子节点</li>\n<li>可以使用 <code>childNodes</code> 和 <code>nodeValue</code>属性来获取指定元素的内容</li>\n<li>IE全系列与firefox、chrome、opera、safari等浏览器存在兼容问题的区别(chrome、firefox等浏览器标签之间的空白也算是一个文本节点)</li>\n<li>其他见下</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"获取-创建DOM\"><a href=\"#获取-创建DOM\" class=\"headerlink\" title=\"获取/创建DOM\"></a>获取/创建DOM</h3><ul>\n<li><p>在操作一个DOM节点前，需先通过各种方式拿到这个DOM节点。最常用的方法： </p>\n<ol>\n<li><code>document.getElementById(‘’)</code>  //按<code>ID</code>获得一个DOM节点(元素/对象)，若要输出元素内容需使用其<code>innerHTML</code>属性；</li>\n<li><code>document.getElementsByName(‘name’)</code> //按元素的<code>name</code>属性获得<code>一个/组</code>DOM节点 (因name不唯一，可能返回数组，有length属性，像数组一样访问)</li>\n<li><code>document.getElementsByTagName(‘’)</code> //按<code>Tag</code>名称获得<code>一组</code>DOM节点(返回一个数组<code>arr</code>，有length属性，可通过<code>arr[i].innerHTML</code>来循环输出)； </li>\n<li><code>document.getElementsByClassName(‘’)</code>。//返回一组DOM节点(CSS选择器)——–IE10前不支持，可通过js封装一个<code>getClass</code>方法，在方法里获取class并返回节点</li>\n<li>还有一种方法是：使用<code>querySelector()和querySelectorAll()</code>，不过需了解selector语法，使用条件来获取节点(低版本的IE&lt;8不支持) 。<br>【注意：当js代码写在相应id或tag对应元素定义之前，则返回null(因为HTML文档从上向下解析)】<br>【注意：方法的参数一定要加引号，否则无反应】</li>\n</ol>\n</li>\n<li><p>要精确地选择DOM，先定位父节点，再从父节点开始选择，逐渐缩小范围。</p>\n</li>\n<li><p>实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 返回ID为&apos;test&apos;的节点：</div><div class=\"line\">var test = document.getElementById(&apos;test&apos;);</div><div class=\"line\">// 先定位ID为&apos;test-table&apos;的节点，再返回其内部所有tr节点：</div><div class=\"line\">var trs = document.getElementById(&apos;test-table&apos;).getElementsByTagName(&apos;tr&apos;);</div><div class=\"line\">// 先定位ID为&apos;test-div&apos;的节点，再返回其内部所有class包含red的节点：</div><div class=\"line\">var reds = document.getElementById(&apos;test-div&apos;).getElementsByClassName(&apos;red&apos;);</div><div class=\"line\">// 获取节点test下的所有直属子节点:</div><div class=\"line\">var cs = test.children;</div><div class=\"line\">// 获取节点test下第一个、最后一个子节点：</div><div class=\"line\">var first = test.firstElementChild;</div><div class=\"line\">var last = test.lastElementChild;</div></pre></td></tr></table></figure>\n</li>\n<li><p>实例2：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- HTML结构 --&gt;</div><div class=\"line\">&lt;div id=&quot;test-div&quot;&gt;</div><div class=\"line\">&lt;div class=&quot;c-red&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;test-p&quot;&gt;JavaScript&lt;/p&gt;</div><div class=\"line\">    &lt;p&gt;Java&lt;/p&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;c-red c-green&quot;&gt;</div><div class=\"line\">    &lt;p&gt;Python&lt;/p&gt;</div><div class=\"line\">    &lt;p&gt;Ruby&lt;/p&gt;</div><div class=\"line\">    &lt;p&gt;Swift&lt;/p&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;c-green&quot;&gt;</div><div class=\"line\">    &lt;p&gt;Scheme&lt;/p&gt;</div><div class=\"line\">    &lt;p&gt;Haskell&lt;/p&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">/***********************获取/选择DOM********************/</div><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\">// 选择&lt;p&gt;JavaScript&lt;/p&gt;:</div><div class=\"line\">var js = document.getElementById(&apos;test-p&apos;);</div><div class=\"line\">// 选择&lt;p&gt;Python&lt;/p&gt;,&lt;p&gt;Ruby&lt;/p&gt;,&lt;p&gt;Swift&lt;/p&gt;:</div><div class=\"line\">var arr = document.getElementsByClassName(&apos;c-red c-green&apos;)[0].children;</div><div class=\"line\">// 选择&lt;p&gt;Haskell&lt;/p&gt;:</div><div class=\"line\">var haskell = document.getElementsByClassName(&apos;c-green&apos;)[1].lastElementChild;</div></pre></td></tr></table></figure>\n</li>\n<li><p>也可以自己创建一个DOM节点:<br>1.<code>createElement(‘元素类型字符串’)</code>—-创建一个元素节点(一般与<code>appendChild()</code> 或<code>insertBefore()</code>方法联合使用，将元素显示在页面中。)<br>2.<code>createTextNode(‘文本字符串’)</code>—-创建一个包含给定文本的文本节点<br>  两者都是document的方法</p>\n</li>\n</ul>\n<h3 id=\"操作DOM\"><a href=\"#操作DOM\" class=\"headerlink\" title=\"操作DOM\"></a>操作DOM</h3><ul>\n<li>HTML文档被浏览器解析后就是一棵DOM树，要改变HTML的结构，就需要通过JavaScript来操作DOM。</li>\n<li>获取到所需的DOM后，就可以对其进行相应操作。</li>\n<li>一个DOM节点一般有以下几个操作：更新、遍历、添加、删除。</li>\n<li>操作DOM时最好先用<code>nodeType</code>属性来判断是否符合操作条件</li>\n</ul>\n<ol>\n<li><p>更新DOM</p>\n<ul>\n<li>更新DOM内容，即修改节点的文本:<br>1)修改<code>innerHTML</code>属性：<br>  这种方法不但可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点内部的子树(在文本        内容中加入html标签)。但要注意是否需要写入HTML，如写入的字符串是通过网络拿到了，要注意对字符编        码来避免XSS攻击。<br>2)修改<code>innerText或textContent</code>属性：<br>  这样可以自动对字符串进行HTML编码，保证无法设置任何HTML标签。<br>  两者的区别在于读取属性时，innerText不返回隐藏元素的文本，而textContent返回所有文本。</li>\n<li><p>修改DOM的CSS样式：DOM节点的<code>style属性</code>对应所有的CSS，可用于直接获取或设置。<br>语法：<code>Object.style.property=”new style”;</code><br>常用基本属性（property）:<br><code>backgroundColor、height、width、color、font、fontfamily、fontSize</code>（属性名使用驼峰式命名，如<code>fontSize</code>）<br>实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p&gt;</div><div class=\"line\">var p = document.getElementById(&apos;p-id&apos;);</div><div class=\"line\">// 设置CSS（属性值加引号）</div><div class=\"line\">p.style.color = &apos;#ff0000&apos;; </div><div class=\"line\">p.style.fontSize = &apos;20px&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>显示和隐藏DOM：通过<code>display属性</code>来设置。<br>语法：<code>Object.style.display =” value”;</code> //取值为none或 block</p>\n</li>\n<li>控制DOM类名属性：通过<code>className属性</code> 来设置或返回元素的class 属性。<br>语法：<code>object.className = classname;</code><br>作用:<br>1)获取元素的<code>class</code>属性<br>2)为网页内的某个元素指定一个css样式来更改该元素的外观(值为css中定义的”.xx”样式名)</li>\n<li><code>object.removeAttribute(&quot;style&quot;);</code> //清除一个对象的”style”属性</li>\n<li><code>replaceChild(newnode,oldnode)</code>：把一个给定父元素里的一个子节点替换为另一个节点。<br> 一般用法：<code>oldnode.parentNode.replaceChild(newnode,oldnode);</code></li>\n</ul>\n</li>\n<li><p>遍历DOM节点树<br>用于遍历DOM节点树的一些属性：</p>\n<ul>\n<li><code>childNodes</code>： 返回一个数组，这个数组由给定元素节点的子节点构成</li>\n<li><code>firstChild</code>：返回<code>childNodes</code>数组的第一个子节点，如无返回 NULL<br>(等效于<code>elementNode.childNodes[0]</code>)</li>\n<li><code>lastChild</code>：返回<code>childNodes</code>数组的最后一个子节点，如无返回 NULL<br>(等效于<code>elementNode.childNodes[elementNode.childNodes.length-1]</code>)</li>\n<li><code>parentNode</code>：返回给定节点的父节点(只能有一个)</li>\n<li><code>nextSibling</code>： 返回给定节点处于同一树层级的下一个子节点</li>\n<li><code>previousSibling</code>： 返回给定节点处于同一树层级的上一个子节点</li>\n</ul>\n</li>\n<li><p>添加DOM</p>\n<ul>\n<li>向 HTML DOM 添加新元素前，首先必须创建该元素（元素节点）</li>\n<li>如果这个DOM节点是空的，如<code>&lt;div&gt;&lt;/div&gt;</code>，那直接使用<code>innerHTML = &#39;&lt;span&gt;child&lt;/span&gt;&#39;</code>就可修改DOM节点的内容，相当于“插入”了新的DOM节点</li>\n<li>如果这个DOM节点不是空的，有两个办法可以往这个DOM插入新的节点(若要添加的子节点已存在，则以移动的方式插入)：<br>1) 使用appendChild(要插入的新节点)：在指定节点的最后一个子节点列表之后添加一个新的子节点<br>2) 使用insertBefore(要插入的新节点, 在之前被插入新节点的指定节点)：在已有的指定子节点前插入一个新的子节点 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">//例1：将新建的element添加到&lt;div id=&quot;list&quot;&gt;的最后一项</div><div class=\"line\">var</div><div class=\"line\">   list = document.getElementById(&apos;list&apos;),</div><div class=\"line\">   ppp = document.createElement(&apos;p&apos;);</div><div class=\"line\">ppp.id = &apos;ppp&apos;;</div><div class=\"line\">ppp.innerText = &apos;I am ppp&apos;;</div><div class=\"line\">list.appendChild(ppp);//插入</div><div class=\"line\"></div><div class=\"line\">//例2：动态创建了一个&lt;style&gt;节点，然后把它添加到&lt;head&gt;节点的末尾，这样就动态地给文档添加了新的CSS定义</div><div class=\"line\">var d = document.createElement(&apos;style&apos;);</div><div class=\"line\">d.setAttribute(&apos;type&apos;, &apos;text/css&apos;);</div><div class=\"line\">d.innerHTML = &apos;p &#123; color: red &#125;&apos;;</div><div class=\"line\">document.getElementsByTagName(&apos;head&apos;)[0].appendChild(d);</div><div class=\"line\"></div><div class=\"line\">//例3：使用parentElement.insertBefore(newElement, referenceElement);来让子节点插入到referenceElement之前</div><div class=\"line\">var</div><div class=\"line\">   list = document.getElementById(&apos;list&apos;),</div><div class=\"line\">   ref = document.getElementById(&apos;python&apos;),  //用于参考的referenceElement节点</div><div class=\"line\">   ppp= document.createElement(&apos;p&apos;);   //要插入的newElement节点</div><div class=\"line\">ppp.id = &apos;ppp&apos;;</div><div class=\"line\">ppp.innerText = &apos;ppp&apos;;</div><div class=\"line\">list.insertBefore(ppp, ref);</div><div class=\"line\"></div><div class=\"line\">//例4：在要获取某个节点 (如“参考子节点”) 时，需要循环一个父节点的所有子节点。可以通过迭代`children`属性实现：</div><div class=\"line\">var</div><div class=\"line\">    i, c,</div><div class=\"line\">    list = document.getElementById(&apos;list&apos;);</div><div class=\"line\">for (i = 0; i &lt; list.children.length; i++) </div><div class=\"line\">&#123;</div><div class=\"line\">    c = list.children[i]; // 拿到第i个子节点</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>删除DOM</p>\n</li>\n</ol>\n<ul>\n<li><p>要删除一个节点，要先获得该节点本身以及它的父节点，然后调用父节点的<code>removeChild()</code>把自己删掉。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 拿到待删除节点:</div><div class=\"line\">var self = document.getElementById(&apos;to-be-removed&apos;);</div><div class=\"line\">// 拿到父节点:</div><div class=\"line\">var parent = self.parentElement;</div><div class=\"line\">// 删除:</div><div class=\"line\">var removed = parent.removeChild(self);</div><div class=\"line\">removed === self; // true</div></pre></td></tr></table></figure>\n</li>\n<li><p>如删除成功，此方法可返回被删除的节点，如失败，则返回 NULL。</p>\n</li>\n<li>删除后的节点虽然不在文档树中了，但其实还在内存中，可以随时再次被添加到别的位置。</li>\n<li>如果要完全删除对象，可给返回的被删除节点赋<code>null</code>值</li>\n<li>当遍历一个父节点的子节点并进行删除操作时，要注意，children属性是一个只读属性，并且它在子节点变化时会实时更新：<br><code>parent.removeChild(parent.children[1]);</code> // 若<code>children[0]</code>已经删除，原<code>children[1]</code>往上移变为<code>children[0]</code>，因此访问<code>children[1]</code>浏览器会报错</li>\n</ul>\n"}