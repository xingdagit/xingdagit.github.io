{"tags":[{"name":"设计模式","permalink":"http://yoursite.com/tags/设计模式/","url":"\\async\\tags\\设计模式.json","count":11}],"categories":[],"url":"\\async\\posts\\2017\\06\\25\\设计模式-中介者模式Mediator.json","date":1498374809000,"path":{"year":2017,"month":6,"day":25,"name":"设计模式-中介者模式Mediator"},"title":"设计模式-中介者模式Mediator","permalink":"http://yoursite.com/2017/06/25/设计模式-中介者模式Mediator/","content":"<h3 id=\"一、中介者模式-Mediator-Pattern\"><a href=\"#一、中介者模式-Mediator-Pattern\" class=\"headerlink\" title=\"一、中介者模式(Mediator Pattern)\"></a>一、中介者模式(Mediator Pattern)</h3><ul>\n<li>中介者模式属于行为型模式</li>\n<li>中介者模式在事件驱动类软件中应用较为广泛，特别是基于GUI（Graphical User Interface，图形用户界面）的应用软件，<br>此外，在类与类之间存在错综复杂的关联关系的系统中，中介者模式都能得到较好的应用。</li>\n</ul>\n<h3 id=\"二、模式动机\"><a href=\"#二、模式动机\" class=\"headerlink\" title=\"二、模式动机\"></a>二、模式动机</h3><ul>\n<li>像联合国将各成员国之间的强耦合关系(直接相互交流)协调成相对松散的耦合关系一样，<br>在软件开发中，有时也需要这样一个中介者角色来降低系统中类与类/对象与对象之间的耦合关系。<br>中介者模式就是实现松散耦合的常用方法之一。</li>\n<li>在有些软件中，某些类/对象之间的相互调用关系错综复杂(网状结构，多对多)。<br>比如QQ用户之间的关系，此时“QQ群”就是这样的一个中介者，<br>能协调这些类/对象之间的复杂关系，使对象之间的关系数量急剧减少，以降低系统的耦合度(变为多对一)。<br><img src=\"https://ooo.0o0.ooo/2017/06/25/594f69f15f685.jpg\" alt=\"QQ群就是一个中介者\"></li>\n<li>根据”单一职责原则”，应尽量将对象细化使其只负责或呈现单一的职责。<br>对于一个模块，可能由很多对象构成，而且这些对象之间可能存在相互的引用。<br><code>为了减少对象两两之间复杂的引用关系</code>，使之成为一个<code>松耦合</code>的系统，我们就需要使用<code>中介者模式</code>。<br>这就是中介者模式的模式动机。</li>\n</ul>\n<h3 id=\"三、模式定义\"><a href=\"#三、模式定义\" class=\"headerlink\" title=\"三、模式定义\"></a>三、模式定义</h3><blockquote>\n<p>中介者模式(Mediator Pattern) ：用一个中介对象（中介者）来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>\n</blockquote>\n<ul>\n<li>中介者模式将一个网状的系统结构变成一个以中介者对象为中心的星形结构，<br>在这个星型结构中，使用中介者对象与其他对象的一对多关系来取代原有对象之间的多对多关系。</li>\n</ul>\n<h3 id=\"四、模式结构\"><a href=\"#四、模式结构\" class=\"headerlink\" title=\"四、模式结构\"></a>四、模式结构</h3><ul>\n<li>在中介者模式中，包含中介者类和同事类两大部分，其核心是终结者类的设计。<br>为让系统具有更好的灵活性和可扩展性，通常都提供抽象中介者类。</li>\n<li><p>中介者模式结构图<br><img src=\"https://ooo.0o0.ooo/2017/06/25/594f6d1be9fb2.jpg\" alt=\"中介者模式结构图\"></p>\n</li>\n<li><p>在中介者模式结构图中包含如下几个角色：</p>\n</li>\n</ul>\n<ol>\n<li>Mediator（抽象中介者）：<br>它定义一个接口，该接口用于与各同事对象之间进行通信。</li>\n<li>ConcreteMediator（具体中介者）：<br>它是抽象中介者的子类，通过协调各个同事对象来实现协作行为，它维持了对各个同事对象的引用。</li>\n<li>Colleague（抽象同事类）：<br>它定义各个同事类公有的方法，并声明了一些抽象方法来供子类实现，<br>同时它维持了一个对抽象中介者类的引用，其子类可以通过该引用来与中介者通信。</li>\n<li>ConcreteColleague（具体同事类）：<br>它是抽象同事类的子类；<br>每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；<br>在具体同事类中实现了在抽象同事类中声明的抽象方法。</li>\n</ol>\n<h3 id=\"五、模式分析\"><a href=\"#五、模式分析\" class=\"headerlink\" title=\"五、模式分析\"></a>五、模式分析</h3><ul>\n<li>中介者模式的核心在于中介者类的引入，<br>在中介者模式中，中介者类承担了两方面的职责：<br>(1) <code>中转作用（结构性）</code>：<br>通过中介者提供的中转作用，各个同事对象就不再需要显式引用其他同事，<br>当需要和其他同事进行通信时，可通过中介者来实现间接调用。<br>该中转作用属于中介者在结构上的支持。<br>(2) <code>协调作用（行为性）</code>：<br>中介者可以更进一步的对同事之间的关系进行封装，<br>同事可以一致的和中介者进行交互，而不需要指明中介者需要具体怎么做，<br>中介者根据封装在自身内部的协调逻辑，对同事的请求进行进一步处理，将同事成员之间的关系行为进行分离和封装。<br>该协调作用属于中介者在行为上的支持。</li>\n<li><p>在中介者模式中，典型的抽象中介者类代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//抽象中介者类</div><div class=\"line\">abstract class Mediator </div><div class=\"line\">&#123;</div><div class=\"line\">    //定义一个同事类的集合，用于存储同事对象</div><div class=\"line\">    protected ArrayList&lt;Colleague&gt; colleagues; </div><div class=\"line\">\t</div><div class=\"line\">    //注册方法，用于增加同事对象  </div><div class=\"line\">    public void register(Colleague colleague) </div><div class=\"line\">\t&#123;  </div><div class=\"line\">\t   colleagues.add(colleague);</div><div class=\"line\">    &#125;  </div><div class=\"line\">\t</div><div class=\"line\">    //声明抽象的业务方法  </div><div class=\"line\">    public abstract void operation();  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在具体中介者类中将实现上面的抽象方法，典型的具体中介者类代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//具体中介者类</div><div class=\"line\">class ConcreteMediator extends Mediator </div><div class=\"line\">&#123;  </div><div class=\"line\">    //实现业务方法，封装同事之间的调用  </div><div class=\"line\">    public void operation() </div><div class=\"line\">\t&#123;  </div><div class=\"line\">        ......  </div><div class=\"line\">        ((Colleague)(colleagues.get(0))).method1(); //通过中介者调用同事类的方法  </div><div class=\"line\">        ......  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在抽象同事类中维持了一个抽象中介者的引用，用于调用中介者的方法，<br>典型的抽象同事类代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">abstract class Colleague </div><div class=\"line\">&#123;</div><div class=\"line\">    protected Mediator mediator; //维持一个抽象中介者的引用  </div><div class=\"line\">    </div><div class=\"line\">    public Colleague(Mediator mediator) &#123;  </div><div class=\"line\">        this.mediator=mediator;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    </div><div class=\"line\">    public abstract void method1(); //声明自身方法，处理自己的行为  </div><div class=\"line\">    </div><div class=\"line\">    //定义依赖方法，与中介者进行通信</div><div class=\"line\">    //即调用在中介者中定义的方法，依赖中介者来完成相应的行为（如调用另一个同事类的相关方法）\t</div><div class=\"line\">    public void method2() </div><div class=\"line\">\t&#123;  </div><div class=\"line\">        mediator.operation();  </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在抽象同事类中声明了同事类的抽象方法，而在具体同事类中将实现这些方法，<br>典型的具体同事类代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//具体同事类</div><div class=\"line\">class ConcreteColleague extends Colleague </div><div class=\"line\">&#123;  </div><div class=\"line\">    public ConcreteColleague(Mediator mediator) &#123;  </div><div class=\"line\">        super(mediator);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    //实现同事类的自身方法，用于处理自己的行为</div><div class=\"line\">    public void method1() &#123;  </div><div class=\"line\">        ......  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"六、知识点\"><a href=\"#六、知识点\" class=\"headerlink\" title=\"六、知识点\"></a>六、知识点</h3><ul>\n<li><p>中介者模式的主要优点如下：<br>(1) 简化了对象之间的交互。它用中介者和同事的一对多交互代替了原来同事之间的多对多交互，一对多关系更容易理解、维护和扩展，将原本难以理解的网状结构转换成相对简单的星型结构。<br>(2) 将各同事对象解耦。中介者有利于各同事之间的松耦合，我们可以独立的改变和复用每一个同事和中介者，增加新的中介者和新的同事类都比较方便，更好地符合“开闭原则”。<br>(3) 减少子类生成。中介者将原本分布于多个对象间的行为集中在一起，改变这些行为只需生成新的中介者子类即可，这使各个同事类可被重用，无须对同事类进行扩展。</p>\n</li>\n<li><p>中介者模式的主要缺点如下：<br>在具体中介者类中包含了大量同事之间的交互细节，可能会导致具体中介者类非常复杂，使得系统难以维护。</p>\n</li>\n<li><p>适用场景<br>(1) 系统中对象之间存在复杂的引用关系，系统结构混乱且难以理解。<br>(2) 一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象。<br>(3) 想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。可以通过引入中介者类来实现，在中介者中定义对象交互的公共行为，如果需要改变行为则可以增加新的具体中介者类。</p>\n</li>\n<li><p>模式应用<br>(1) 事件驱动类软件(如GUI、聊天室)<br>(2) MVC中的控制器 Controller就是一个中介者，负责控制视图对象View和模型对象Model之间的交互</p>\n</li>\n</ul>\n<h3 id=\"七、中介者模式扩展\"><a href=\"#七、中介者模式扩展\" class=\"headerlink\" title=\"七、中介者模式扩展\"></a>七、中介者模式扩展</h3><ul>\n<li>中介者模式与迪米特原则<br>迪米特原则要求“只与你直接的朋友们通信”，<br>即每一个对象与其他对象的相互作用均是短程的，而不是长程的；而且只要可能，朋友的数目越少越好。<br>换言之，一个对象只需知道它的直接合作者接口即可。<br>在中介者模式中，通过创造出一个中介者对象，将系统中有关的对象所引用的其他对象数目减到最少，<br>使得一个对象与其同事之间的相互作用被这个对象与中介者对象之间的相互作用所取代。<br>因此，<code>中介者模式就是迪米特原则的一个典型应用</code>。</li>\n<li>中介者模式与GUI开发<br>中介者模式可方便地应用于图形界面(GUI)开发中，在比较复杂的界面中可能存在多个界面组件之间的交互关系，<br>如一个按钮对象可能改变一个文本框对象和一个菜单对象的状态，而一个文本框状态中文字的选中与否又将影响某些按钮的状态等。<br>例如当文本框中的文字被选取时，则复制按钮与剪切按钮为可用，而没有文本被选取时可能就都被禁用；<br>又如在文字被选取且复制按钮被选中时，粘贴按钮由禁用改为可用，此时菜单中相应的菜单项也将发生变化。<br>对于这些复杂的交互关系，有时可引入一个<code>中介者类</code>，把这些交互的组件作为具体的同事类，将它们之间的引用和控制关系交由中介者负责，在一定程度上简化系统的交互。<br>这也是中介者模式的<code>常见应用之一</code>。</li>\n</ul>\n<h3 id=\"八、重要实例\"><a href=\"#八、重要实例\" class=\"headerlink\" title=\"八、重要实例\"></a>八、重要实例</h3><ul>\n<li><p>要求：<br>某软件公司欲开发一套CRM系统，其中包含一个客户信息管理模块，所设计的“客户信息管理窗口”界面效果图如图所示。<br><img src=\"https://ooo.0o0.ooo/2017/06/25/594f7e28d9bcd.jpg\" alt=\"客户信息管理窗口界面效果图\"><br>组件之间的交互关系如下：<br>(1) 当用户单击“增加”按钮、“删除”按钮、“修改”按钮或“查询”按钮时，界面左侧的“客户选择组合框”、“客户列表”以及界面中的文本框将产生响应。<br>(2) 当用户通过“客户选择组合框”选中某个客户姓名时，“客户列表”和文本框将产生响应。<br>(3) 当用户通过“客户列表”选中某个客户姓名时，“客户选择组合框”和文本框将产生响应。<br>请使用中介模式实现该系统,并补充程序中相应Java代码。</p>\n</li>\n<li><p>模式结构分析图<br><img src=\"https://ooo.0o0.ooo/2017/06/25/594f7e7db645d.jpg\" alt=\"模式结构分析图\"></p>\n</li>\n<li><p>解决代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div></pre></td><td class=\"code\"><pre><div class=\"line\">//抽象中介者  </div><div class=\"line\">abstract class Mediator &#123;  </div><div class=\"line\">    public abstract void componentChanged(Component c);  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">//具体中介者  </div><div class=\"line\">class ConcreteMediator extends Mediator </div><div class=\"line\">&#123; </div><div class=\"line\">  //维持对各个同事对象的引用 </div><div class=\"line\">  public Button addButton; </div><div class=\"line\">  public List list; </div><div class=\"line\">  public TextBox userNameTextBox;</div><div class=\"line\">  public ComboBox cb; </div><div class=\"line\">  </div><div class=\"line\">  //封装同事对象之间的交互 </div><div class=\"line\">  public void componentChanged(Component c) </div><div class=\"line\">  &#123; </div><div class=\"line\">     //单击按钮 </div><div class=\"line\">\t if(c == addButton) </div><div class=\"line\">\t &#123; </div><div class=\"line\">\t   System.out.println(&quot;--单击增加按钮--&quot;); </div><div class=\"line\">\t   list.update(); </div><div class=\"line\">\t   cb.update(); </div><div class=\"line\">\t   userNameTextBox.update(); </div><div class=\"line\">\t &#125; </div><div class=\"line\">\t //从列表框选择客户 </div><div class=\"line\">\t else if(c == list) </div><div class=\"line\">\t &#123; </div><div class=\"line\">\t   System.out.println(&quot;--从列表框选择客户--&quot;); </div><div class=\"line\">\t   cb.select(); </div><div class=\"line\">\t   userNameTextBox.setText(); </div><div class=\"line\">\t &#125; </div><div class=\"line\">\t //从组合框选择客户 </div><div class=\"line\">\t else if(c == cb) </div><div class=\"line\">\t &#123; </div><div class=\"line\">\t   System.out.println(&quot;--从组合框选择客户--&quot;); </div><div class=\"line\">\t   cb.select(); </div><div class=\"line\">\t   userNameTextBox.setText(); </div><div class=\"line\">\t &#125; </div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">//抽象组件类：抽象同事类  </div><div class=\"line\">abstract class Component </div><div class=\"line\">&#123;  </div><div class=\"line\">    protected Mediator mediator;  </div><div class=\"line\">      </div><div class=\"line\">    public void setMediator(Mediator mediator) &#123;  </div><div class=\"line\">        this.mediator = mediator;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    //转发调用  </div><div class=\"line\">    public void changed() </div><div class=\"line\">\t&#123;  </div><div class=\"line\">        mediator.componentChanged(this);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    public abstract void update();    </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">//按钮类：具体同事类  </div><div class=\"line\">class Button extends Component </div><div class=\"line\">&#123;  </div><div class=\"line\">    public void update() &#123;  </div><div class=\"line\">       //按钮不产生交互  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">//列表框类：具体同事类  </div><div class=\"line\">class List extends Component </div><div class=\"line\">&#123;  </div><div class=\"line\">    public void update() &#123;  </div><div class=\"line\">        System.out.println(&quot;列表框增加一项：张无忌。&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    public void select() &#123;  </div><div class=\"line\">        System.out.println(&quot;列表框选中项：小龙女。&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">//组合框类：具体同事类  </div><div class=\"line\">class ComboBox extends Component </div><div class=\"line\">&#123;  </div><div class=\"line\">    public void update() &#123;  </div><div class=\"line\">        System.out.println(&quot;组合框增加一项：张无忌。&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    public void select() &#123;  </div><div class=\"line\">        System.out.println(&quot;组合框选中项：小龙女。&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">//文本框类：具体同事类  </div><div class=\"line\">class TextBox extends Component </div><div class=\"line\">&#123;  </div><div class=\"line\">    public void update() &#123;  </div><div class=\"line\">        System.out.println(&quot;客户信息增加成功后文本框清空。&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    public void setText() &#123;  </div><div class=\"line\">        System.out.println(&quot;文本框显示：小龙女。&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">//客户端测试代码：</div><div class=\"line\">class Client </div><div class=\"line\">&#123;</div><div class=\"line\">    public static void main(String args[]) </div><div class=\"line\">\t&#123;</div><div class=\"line\">        //定义中介者对象  </div><div class=\"line\">        ConcreteMediator mediator;  </div><div class=\"line\">        mediator = new ConcreteMediator();  </div><div class=\"line\">        </div><div class=\"line\">        //定义同事对象  </div><div class=\"line\">        Button addBT = new Button();  </div><div class=\"line\">        List list = new List();  </div><div class=\"line\">        ComboBox cb = new ComboBox();  </div><div class=\"line\">        TextBox userNameTB = new TextBox();  </div><div class=\"line\">  </div><div class=\"line\">        addBT.setMediator(mediator);  </div><div class=\"line\">        list.setMediator(mediator);  </div><div class=\"line\">        cb.setMediator(mediator);  </div><div class=\"line\">        userNameTB.setMediator(mediator);  </div><div class=\"line\">  </div><div class=\"line\">        mediator.addButton = addBT;  </div><div class=\"line\">        mediator.list = list;  </div><div class=\"line\">        mediator.cb = cb;  </div><div class=\"line\">        mediator.userNameTextBox = userNameTB;  </div><div class=\"line\">          </div><div class=\"line\">        addBT.changed();  </div><div class=\"line\">        System.out.println(&quot;-----------------------------&quot;);  </div><div class=\"line\">        list.changed();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>编译并运行程序，输出结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">--单击增加按钮--</div><div class=\"line\">列表框增加一项：张无忌。</div><div class=\"line\">组合框增加一项：张无忌。</div><div class=\"line\">客户信息增加成功后文本框清空。</div><div class=\"line\">-----------------------------</div><div class=\"line\">--从列表框选择客户--</div><div class=\"line\">组合框选中项：小龙女。</div><div class=\"line\">文本框显示：小龙女。</div></pre></td></tr></table></figure>\n</li>\n<li><p>在中介者模式的实际使用过程中，如果需要引入新的具体同事类，只需要继承抽象同事类并实现其中的方法即可，<br>由于具体同事类之间并无直接的引用关系，因此原有所有同事类无须进行任何修改，它们与新增同事对象之间的交互可以通过修改或者增加具体中介者类来实现；<br>如果需要在原有系统中增加新的具体中介者类，只需要继承抽象中介者类（或已有的具体中介者类）并覆盖其中定义的方法即可，<br>在新的具体中介者中可以通过不同的方式来处理对象之间的交互，也可以增加对新增同事的引用和调用。<br>在客户端中只需要修改少许代码（如果引入配置文件的话有时可以不修改任何代码）就可以实现中介者的更换。</p>\n</li>\n</ul>\n<p>【参考】(作者：刘伟 <a href=\"http://blog.csdn.net/lovelion\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/lovelion</a>)</p>\n"}