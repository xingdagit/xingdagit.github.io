{"tags":[{"name":"设计模式","permalink":"http://yoursite.com/tags/设计模式/","url":"\\async\\tags\\设计模式.json","count":12}],"categories":[],"url":"\\async\\posts\\2017\\06\\25\\设计模式-策略模式Strategy.json","date":1498394389000,"path":{"year":2017,"month":6,"day":25,"name":"设计模式-策略模式Strategy"},"title":"设计模式-策略模式Strategy","permalink":"http://yoursite.com/2017/06/25/设计模式-策略模式Strategy/","content":"<h3 id=\"一、状态模式-Strategy-Pattern\"><a href=\"#一、状态模式-Strategy-Pattern\" class=\"headerlink\" title=\"一、状态模式(Strategy Pattern)\"></a>一、状态模式(Strategy Pattern)</h3><ul>\n<li>策略模式属于行为型模式</li>\n<li>策略模式用于算法的自由切换和扩展，它是应用较为广泛的设计模式之一。</li>\n<li>策略模式对应于解决某一问题的一个算法族，允许用户从该算法族中任选一个算法来解决某一问题，同时可以方便地更换算法或者增加新的算法。<br>只要涉及到算法的封装、复用和切换都可以考虑使用策略模式。</li>\n</ul>\n<h3 id=\"二、模式动机\"><a href=\"#二、模式动机\" class=\"headerlink\" title=\"二、模式动机\"></a>二、模式动机</h3><ul>\n<li>完成一项任务，往往可以有多种不同的方式，如旅行有多种出行方式。<br>在软件开发中也常常遇到类似的情况，实现某一个功能有多个途径，<br>每一种方式称为一个<code>策略</code>，我们可以根据环境或者条件的不同选择不同的策略来完成该项任务。<br>此时可以使用一种设计模式来使得系统可以灵活地选择解决途径，也能够方便地增加新的解决途径。<br>这个设计模式也就是策略模式。</li>\n<li>在策略模式中，为了解决这些问题，可以定义一些独立的类来封装不同的算法，每一个类封装一个具体的算法，每一个封装算法的类我们都可以称之为策略(Strategy)；</li>\n<li>为了保证这些策略的一致性，一般会用一个<code>抽象的策略类</code>来做算法的<code>定义</code>，而具体<code>每种算法</code>则对应于一个<code>具体策略类</code>。</li>\n</ul>\n<h3 id=\"三、模式定义\"><a href=\"#三、模式定义\" class=\"headerlink\" title=\"三、模式定义\"></a>三、模式定义</h3><blockquote>\n<p>策略模式(Strategy Pattern) ：定义一系列算法类，将每一个算法封装起来，并让它们可以相互替换，策略模式让算法独立于使用它的客户而变化。也称为政策模式(Policy)。</p>\n</blockquote>\n<h3 id=\"四、模式结构\"><a href=\"#四、模式结构\" class=\"headerlink\" title=\"四、模式结构\"></a>四、模式结构</h3><ul>\n<li>策略模式结构并不复杂，但我们需要理解其中环境类Context的作用。</li>\n<li><p>策略模式结构图<br><img src=\"https://ooo.0o0.ooo/2017/06/25/594fb5284bbba.png\" alt=\"策略模式结构图\"></p>\n</li>\n<li><p>在策略模式结构图中包含如下几个角色：</p>\n</li>\n</ul>\n<ol>\n<li>Context（环境类）：<br>环境类是使用算法的角色，它在解决某个问题（即实现某个方法）时可以采用多种策略。<br>在环境类中维持一个对抽象策略类的引用实例，用于定义所采用的策略。</li>\n<li>Strategy（抽象策略类）：<br>它为所支持的算法声明了抽象方法，是所有策略类的父类，它可以是抽象类或具体类，也可以是接口。<br>环境类通过抽象策略类中声明的方法在运行时调用具体策略类中实现的算法。</li>\n<li>ConcreteStrategy（具体策略类）：<br>它实现了在抽象策略类中声明的算法，<br>在运行时，具体策略类将覆盖在环境类中定义的抽象策略类对象，使用一种具体的算法实现某个业务处理。</li>\n</ol>\n<h3 id=\"五、模式分析\"><a href=\"#五、模式分析\" class=\"headerlink\" title=\"五、模式分析\"></a>五、模式分析</h3><ul>\n<li>策略模式是一个比较容易理解和使用的设计模式，<br><code>策略模式是对算法的封装</code>，它把算法的责任和算法本身分割开，委派给不同的对象管理。</li>\n<li>策略模式通常把一个系列的算法封装到一系列具体策略类里面，作为抽象策略类的子类。</li>\n<li>在策略模式中，对环境类和抽象策略类的理解非常重要。</li>\n<li>环境类是需要使用算法的类，在一个系统中可以存在多个环境类，它们可能需要重用一些相同的算法。<br>若不使用策略模式，环境类中可能存在多个if…else之类的判断代码，不仅导致代码冗长，更重要的是增加或修改算法时需修改环境类的源代码，<code>违反了“开闭原则”</code>;<br>导致这些问题的原因主要在于将算法的定义和使用都放在环境类，使其指责过重，<code>违反了“单一职责原则”</code>;</li>\n<li>策略模式的主要目的是将算法的定义与使用分开，也就是将算法的行为和环境分开，<br>将算法的定义放在专门的策略类中，每一个策略类封装了一种实现算法，<br>同时为了扩展更方便，引入抽象策略类，并在其中定义抽象算法，<br>使用算法的环境类针对抽象策略类进行编程，<code>符合“依赖倒转原则”</code>。<br>在出现新的算法时，只需要增加一个新的实现了抽象策略类的具体策略类即可。</li>\n<li><p>所以，首先将算法从Context类中提取出来，首先应该创建一个抽象策略类，其典型代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//抽象策略类</div><div class=\"line\">public abstract class AbstractStrategy </div><div class=\"line\">&#123; </div><div class=\"line\">   public abstract void algorithm(); //声明抽象算法 </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>再将封装每一种具体算法的类作为该抽象策略类的子类，即具体策略类，如下代码所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//具体策略类</div><div class=\"line\">public class ConcreteStrategyA extends AbstractStrategy </div><div class=\"line\">&#123;  </div><div class=\"line\">    //算法的具体实现  </div><div class=\"line\">    public void algorithm() &#123;  </div><div class=\"line\">       //算法A  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div><div class=\"line\">//其他具体策略类与之类似</div></pre></td></tr></table></figure>\n</li>\n<li><p>对于Context环境类而言，在它与抽象策略类之间建立一个关联关系，其典型代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//环境类</div><div class=\"line\">public class Context </div><div class=\"line\">&#123;  </div><div class=\"line\">    private AbstractStrategy strategy; //维持一个对抽象策略类的引用  </div><div class=\"line\">  </div><div class=\"line\">    public void setStrategy(AbstractStrategy strategy) &#123;  </div><div class=\"line\">        this.strategy= strategy;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    //调用策略类中的算法  </div><div class=\"line\">    public void algorithm() </div><div class=\"line\">\t&#123;  </div><div class=\"line\">        strategy.algorithm();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在Context类中定义一个AbstractStrategy类型的对象strategy，通过注入的方式在客户端传入一个具体策略对象，客户端代码片段如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">……  </div><div class=\"line\">Context context = new Context();  </div><div class=\"line\">AbstractStrategy strategy;  </div><div class=\"line\">strategy = new ConcreteStrategyA(); //可在运行时指定类型  </div><div class=\"line\">context.setStrategy(strategy);   //只需注入一个具体策略对象</div><div class=\"line\">context.algorithm();  </div><div class=\"line\">……</div></pre></td></tr></table></figure>\n</li>\n<li><p>在客户端代码中只需注入一个具体策略对象，可以将具体策略类类名存储在配置文件中，通过反射来动态创建具体策略对象，从而使得用户可以灵活地更换具体策略类，增加新的具体策略类也很方便。</p>\n</li>\n<li>策略模式提供了一种可插入式(Pluggable)算法的实现方案。</li>\n<li>方法策略的选择工作是由客户端自己决定，而不是由策略模式负责的，策略模式仅仅封装算法，并处理新算法的插入和旧算法的移除。<br>这在一定程度上提高了系统的灵活性，但也在一定程度上增加了客户端的使用难度。</li>\n</ul>\n<h3 id=\"六、知识点\"><a href=\"#六、知识点\" class=\"headerlink\" title=\"六、知识点\"></a>六、知识点</h3><ul>\n<li><p>策略模式的主要优点如下：<br>(1) 策略模式提供了<code>对“开闭原则”的完美支持</code>，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。<br>(2) 策略模式提供了<code>管理相关的算法族的办法</code>。策略类的等级结构定义了一个算法或行为族，恰当使用继承可以把公共的代码移到抽象策略类中，从而避免重复的代码。<br>(3) 策略模式提供了一种可以替换继承关系的办法。如果不使用策略模式，那么使用算法的环境类就可能会有一些子类，每一个子类提供一种不同的算法。但是，这样一来算法的使用就和算法本身混在一起，不符合“单一职责原则”，决定使用哪一种算法的逻辑和该算法本身混合在一起，从而不可能再独立演化；而且使用继承无法实现算法或行为在程序运行时的动态切换。<br>(4) 使用策略模式可以<code>避免多重条件选择语句</code>。多重条件选择语句不易维护，它把采取哪一种算法或行为的逻辑与算法或行为本身的实现逻辑混合在一起，将它们全部硬编码(Hard Coding)在一个庞大的多重条件选择语句中，比直接继承环境类的办法还要原始和落后。<br>(5) 策略模式提供了一种算法的复用机制，由于将算法单独提取出来封装在策略类中，因此不同的环境类可以方便地复用这些策略类。</p>\n</li>\n<li><p>策略模式的主要缺点如下：<br>(1) 客户端必须知道所有的策略类，并自行决定使用哪一个策略类。这就意味着客户端必须理解这些算法的区别，以便适时选择恰当的算法。换言之，策略模式只适用于客户端知道所有的算法或行为的情况。<br>(2) 策略模式将造成系统产生很多具体策略类，任何细小的变化都将导致系统要增加一个新的具体策略类。<br>(3) 无法同时在客户端使用多个策略类，也就是说，在使用策略模式时，客户端每次只能使用一个策略类，不支持使用一个策略类完成部分功能后再使用另一个策略类来完成剩余功能的情况。</p>\n</li>\n<li><p>适用场景<br>(1) 如果一个系统里面有很多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。<br>(2) 一个系统需要动态地在几种算法中选择一种，那么可以将这些算法封装到一个个的具体算法类中，而这些具体算法类都是一个抽象算法类的子类。换言之，这些具体算法类均有统一的接口，根据“里氏代换原则”和面向对象的多态性，客户端可以选择使用任何一个具体算法类，并只需要维持一个数据类型是抽象算法类的对象。<br>(3) 一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重条件选择语句来实现。此时，使用策略模式，把这些行为转移到相应的具体策略类里面，就可以避免使用难以维护的多重条件选择语句。<br>(4) 不希望客户端知道复杂的、与算法相关的数据结构，在具体策略类中封装算法与相关的数据结构，可以提高算法的保密性与安全性。</p>\n</li>\n<li><p>模式应用<br>策略模式实用性强，扩展性好，只要某一问题涉及有多种解决方案都可以使用。<br>(1) Java SE 的容器布局管理<br>(2) 面向对象技术开发的软件(如微软的PetShop4.0)</p>\n</li>\n</ul>\n<h3 id=\"七、策略模式扩展–策略模式与状态模式\"><a href=\"#七、策略模式扩展–策略模式与状态模式\" class=\"headerlink\" title=\"七、策略模式扩展–策略模式与状态模式\"></a>七、策略模式扩展–策略模式与状态模式</h3><p>策略模式与状态模式从类图结构上看具有惊人的相似性，很容易产生混淆。<br>如何区分两者呢？请看以下它们的区别：</p>\n<ol>\n<li>可通过环境类状态的个数决定。<br>若环境角色只有一种状态，则使用策略模式；<br>若环境角色存在多种状态，且之间可相互转换，则使用状态模式；</li>\n<li>策略模式的环境类自己选择一个具体策略类，具体策略类无须关心环境类；<br>而状态模式的环境类由于外在因素需放进一个具体状态中，以便通过其方法实现状态的切换（即环境类与状态类之间存在双向关联）</li>\n<li>使用策略模式时客户端要知道所选的具体策略是哪一个；<br>而使用状态模式时客户端无须关心具体状态，环境类的状态会根据用户的操作自动切换。</li>\n<li>如果系统中某个类的某一行为存在多种实现方式，且这些实现方式可发生互换，则使用策略模式；<br>如果系统中某个类的对象存在多种状态，不同状态下行为各异，且状态之间可发生互换，则使用状态模式。</li>\n</ol>\n<h3 id=\"八、重要实例\"><a href=\"#八、重要实例\" class=\"headerlink\" title=\"八、重要实例\"></a>八、重要实例</h3><ul>\n<li><p>要求：<br>软件公司为某电影院开发了一套影院售票系统，在该系统中需要为不同类型的用户提供不同的电影票打折方式，具体打折方案如下：<br>(1) 学生凭学生证可享受票价8折优惠；<br>(2) 年龄在10周岁及以下的儿童可享受每张票减免10元的优惠；<br>(3) 影院VIP用户除享受票价半价优惠外还可进行积分。<br>请根据类图编程实现该系统,并写出相应Java代码。</p>\n</li>\n<li><p>模式结构分析图<br><img src=\"https://ooo.0o0.ooo/2017/06/25/594fc1c584dec.png\" alt=\"模式结构分析图\"></p>\n</li>\n<li><p>解决代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\">//电影票类：环境类</div><div class=\"line\">class MovieTicket</div><div class=\"line\">&#123;</div><div class=\"line\">\tprivate double price;</div><div class=\"line\">\tprivate Discount discount; //维持一个对抽象折扣类的引用</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void setPrice(double price)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tthis.price = price;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void setDiscount(Discount discount)//注入一个折扣类对象</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tthis.discount = discount;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic double getPrice()</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\treturn discount.calculate(this.price);//调用折扣类的折扣价计算方法</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//折扣类：抽象策略类</div><div class=\"line\">interface Discount</div><div class=\"line\">&#123;</div><div class=\"line\">\tpublic double calculate(double price);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//学生折扣类：具体策略类</div><div class=\"line\">class StudentDiscount implements Discount</div><div class=\"line\">&#123;</div><div class=\"line\">\tpublic double calculate(double price)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t    System.out.println(&quot;学生票：&quot;); </div><div class=\"line\">\t\treturn price * 0.8;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//儿童折扣类：具体策略类</div><div class=\"line\">class ChildrenDiscount implements Discount</div><div class=\"line\">&#123;</div><div class=\"line\">\tpublic double calculate(double price)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t    System.out.println(&quot;儿童票：&quot;);</div><div class=\"line\">\t\treturn price - 10;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//VIP会员折扣类：具体策略类</div><div class=\"line\">class VIPDiscount implements Discount</div><div class=\"line\">&#123;</div><div class=\"line\">\tpublic double calculate(double price)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t    System.out.println(&quot;VIP票：&quot;);</div><div class=\"line\">\t\tSystem.out.println(&quot;增加积分！&quot;);</div><div class=\"line\">\t\treturn price * 0.5;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//客户端测试类</div><div class=\"line\">class Client</div><div class=\"line\">&#123;</div><div class=\"line\">\tpublic static void main(String args[])</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tMovieTicket mt = new MovieTicket();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tmt.setPrice(60.00); //注入折扣对象</div><div class=\"line\">\t\tSystem.out.println(&quot;原始价为：&quot; + mt.getPrice();); </div><div class=\"line\">\t\tSystem.out.println(&quot;---------------------------------&quot;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tdouble currentPrice;</div><div class=\"line\">\t\tDiscount obj;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tobj = new StudentDiscount();  //可通过配置文件实现</div><div class=\"line\">\t\tmt.setDiscount(obj);</div><div class=\"line\">\t\tcurrentPrice = mt.getPrice();</div><div class=\"line\">\t\tSystem.out.println(&quot;折后价为：&quot; + currentPrice);</div><div class=\"line\">\t\tSystem.out.println(&quot;---------------------------------&quot;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tobj = new VIPDiscount();  //可通过配置文件实现</div><div class=\"line\">\t\tmt.setDiscount(obj);</div><div class=\"line\">\t\tcurrentPrice = mt.getPrice();</div><div class=\"line\">\t\tSystem.out.println(&quot;折后价为：&quot; + currentPrice);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>编译并运行程序，输出结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">原始价为：60.0</div><div class=\"line\">---------------------------------</div><div class=\"line\">学生票：</div><div class=\"line\">折后价为：48.0</div><div class=\"line\">---------------------------------</div><div class=\"line\">VIP票：</div><div class=\"line\">增加积分！</div><div class=\"line\">折后价为：30.0</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用策略模式之后的改善<br><img src=\"https://ooo.0o0.ooo/2017/06/25/594fc446181b6.png\" alt=\"使用策略模式之后的改善\"></p>\n</li>\n</ul>\n<p>【参考】(作者：刘伟 <a href=\"http://blog.csdn.net/lovelion\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/lovelion</a>)</p>\n"}