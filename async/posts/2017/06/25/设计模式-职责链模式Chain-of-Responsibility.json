{"tags":[{"name":"设计模式","permalink":"http://yoursite.com/tags/设计模式/","url":"\\async\\tags\\设计模式.json","count":11}],"categories":[],"url":"\\async\\posts\\2017\\06\\25\\设计模式-职责链模式Chain-of-Responsibility.json","date":1498324792000,"path":{"year":2017,"month":6,"day":25,"name":"设计模式-职责链模式Chain-of-Responsibility"},"title":"设计模式-职责链模式Chain of Responsibility","permalink":"http://yoursite.com/2017/06/25/设计模式-职责链模式Chain-of-Responsibility/","content":"<h3 id=\"一、职责链模式-Chain-of-Responsibility-Pattern\"><a href=\"#一、职责链模式-Chain-of-Responsibility-Pattern\" class=\"headerlink\" title=\"一、职责链模式(Chain of Responsibility Pattern)\"></a>一、职责链模式(Chain of Responsibility Pattern)</h3><ul>\n<li>职责链模式属于行为型模式</li>\n<li>在软件开发中，如果遇到有多个对象可以处理同一请求时可以应用职责链模式。</li>\n</ul>\n<h3 id=\"二、模式动机\"><a href=\"#二、模式动机\" class=\"headerlink\" title=\"二、模式动机\"></a>二、模式动机</h3><ul>\n<li>很多情况下，在一个软件系统中可以处理某个请求的对象不止一个。</li>\n<li>例如SCM系统中的采购单审批，主任、副董事长、董事长和董事会都可以处理采购单，<br>又如大学奖学金的审批，辅导员、系主任、院长、校长、都可以处理奖学金申请表，<br>他们可以构成一条处理采购单/申请表的链式结构，采购单/申请表沿着这条链进行传递，这条链就称为<code>职责链</code>。</li>\n<li>职责链可以是<code>一条直线</code>、<code>一个环</code>或者<code>一个树形结构</code>，<br>最常见的职责链是<code>直线型</code>，即沿着<code>一条单向的链</code>来传递请求。</li>\n<li>链上的每一个对象都是请求处理者，职责链模式可以<code>将请求的处理者组织成一条链</code>，<br>并让请求沿着链传递，由链上的处理者对请求进行相应的处理，<br>客户端无须关心请求的处理细节以及请求的传递，只需将请求发送到链上即可，<br>实现<code>请求发送者和请求处理者解耦</code>。这就是职责链模式的模式动机。</li>\n</ul>\n<h3 id=\"三、模式定义\"><a href=\"#三、模式定义\" class=\"headerlink\" title=\"三、模式定义\"></a>三、模式定义</h3><blockquote>\n<p>职责链模式(Chain of Responsibility Pattern) ：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p>\n</blockquote>\n<h3 id=\"四、模式结构\"><a href=\"#四、模式结构\" class=\"headerlink\" title=\"四、模式结构\"></a>四、模式结构</h3><ul>\n<li><p>职责链模式结构的核心在于引入了一个抽象处理者。</p>\n</li>\n<li><p>职责链模式结构图<br><img src=\"https://ooo.0o0.ooo/2017/06/25/594f2d835af7a.jpg\" alt=\"职责链模式结构图\"></p>\n</li>\n<li><p>在职责链模式结构图中包含如下几个角色：</p>\n</li>\n</ul>\n<ol>\n<li>Handler（抽象处理者）：<br>它定义了一个处理请求的接口，一般设计为抽象类，<br>由于不同的具体处理者处理请求的方式不同，因此在其中定义了抽象请求处理方法。<br>因为每一个处理者的下家还是一个处理者，因此在抽象处理者中定义了一个抽象处理者类型的对象（如结构图中的successor），作为其对下家的引用。<br>通过该引用，处理者可以连成一条链。</li>\n<li>ConcreteHandler（具体处理者）：<br>它是抽象处理者的子类，可以处理用户请求，在具体处理者类中实现了抽象处理者中定义的抽象请求处理方法，<br>在处理请求之前需要进行判断，看是否有相应的处理权限，<br>如果可以处理请求就处理它，否则将请求转发给后继者；<br>在具体处理者中可以访问链中下一个对象，以便请求的转发。</li>\n<li>Client（客户类）：<br>客户类用于向链中的对象提出最初的请求，<br>客户类只需要关心链的源头，而无须关心请求的处理细节以及请求的传递过程。</li>\n</ol>\n<h3 id=\"五、模式分析\"><a href=\"#五、模式分析\" class=\"headerlink\" title=\"五、模式分析\"></a>五、模式分析</h3><ul>\n<li>在职责链模式里，很多对象<code>由每一个对象对其下家的引用而连接起来形成一条链</code>。</li>\n<li><code>请求在这条链上传递</code>，直到链上的某一个对象处理此请求为止。</li>\n<li>发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，<br>这使得<code>系统可以在不影响客户端的情况下动态地重新组织链和分配责任</code>。</li>\n<li><p>职责链模式的核心在于抽象处理者类的设计，抽象处理者的典型代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//抽象处理者类 </div><div class=\"line\">abstract class Handler </div><div class=\"line\">&#123; </div><div class=\"line\">  protected Handler successor; //维持对下家的引用,以便将请求转发给下家(设为protected--在其子类中可使用)</div><div class=\"line\">  </div><div class=\"line\">  public void setSuccessor(Handler successor) &#123; </div><div class=\"line\">     this.successor=successor; </div><div class=\"line\">  &#125; </div><div class=\"line\">  </div><div class=\"line\">  public abstract void handleRequest(String request); //声明抽象的请求处理方法，具体实现交由子类完成</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>体处理者是抽象处理者的子类，它具有两大作用：<br>第一是<code>处理请求</code>，不同的具体处理者以不同的形式实现抽象请求处理方法handleRequest()；<br>第二是<code>转发请求</code>，如果该请求超出了当前处理者类的权限，可以将该请求转发给下家。<br>具体处理者类的典型代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//具体处理者类</div><div class=\"line\">class ConcreteHandler extends Handler </div><div class=\"line\">&#123; </div><div class=\"line\">  public void handleRequest(String request) </div><div class=\"line\">  &#123;</div><div class=\"line\">     if (请求满足条件) </div><div class=\"line\">\t &#123; </div><div class=\"line\">\t    //处理请求 </div><div class=\"line\">\t &#125; </div><div class=\"line\">\t else </div><div class=\"line\">\t &#123; </div><div class=\"line\">\t    this.successor.handleRequest(request); //转发请求 </div><div class=\"line\">\t &#125; </div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>需要注意的是，<br>职责链模式并不创建职责链，职责链的创建工作必须由系统的其他部分来完成，一般是<code>在使用该职责链的客户端中创建职责链</code>。<br><code>职责链模式降低了请求的发送端和接收端之间的耦合，使多个对象都有机会处理这个请求</code>。 </p>\n</li>\n</ul>\n<h3 id=\"六、知识点\"><a href=\"#六、知识点\" class=\"headerlink\" title=\"六、知识点\"></a>六、知识点</h3><ul>\n<li><p>职责链模式的主要优点如下：<br>(1) <code>降低耦合度</code>：职责链模式使得一个对象无须知道是其他哪一个对象处理其请求，对象仅需知道该请求会被处理即可，接收者和发送者都没有对方的明确信息，且链中的对象不需要知道链的结构，由客户端负责链的创建，降低了系统的耦合度。<br>(2) <code>可简化对象的相互连接</code>：请求处理对象仅需维持一个指向其后继者的引用，而不需要维持它对所有的候选处理者的引用，可简化对象的相互连接。<br>(3) <code>增强给对象指派职责的灵活性</code>：在给对象分派职责时，职责链可以给我们更多的灵活性，可以通过在运行时对该链进行动态的增加或修改来增加或改变处理一个请求的职责。<br>(4) <code>增加新的请求处理类很方便</code>：在系统中增加一个新的具体请求处理者时无须修改原有系统的代码，只需要在客户端重新建链即可，从这一点来看是符合“开闭原则”的。</p>\n</li>\n<li><p>职责链模式的主要缺点如下：<br>(1) <code>不能保证请求一定被接收</code>：由于一个请求没有明确的接收者，那么就不能保证它一定会被处理，该请求可能一直到链的末端都得不到处理；一个请求也可能因职责链没有被正确配置而得不到处理。<br>(2) 对于比较长的职责链，请求的处理可能涉及到多个处理对象，系统性能将受到一定影响，而且在进行代码调试时不太方便。<br>(3) 如果建链不当，可能会造成循环调用，将导致系统陷入死循环。</p>\n</li>\n<li><p>适用场景<br>(1) 有多个对象可以处理同一个请求，具体哪个对象处理该请求待运行时刻再确定，客户端只需将请求提交到链上，而无须关心请求的处理对象是谁以及它是如何处理的。<br>(2) 在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。<br>(3) 可动态指定一组对象处理请求，客户端可以动态创建职责链来处理请求，还可以改变链中处理者之间的先后次序。 </p>\n</li>\n<li><p>模式应用<br>(1) <em>*</em>审批系统<br>(2) Java中的异常处理机制<br>(3) 早期的 Java AWT事件模型</p>\n</li>\n</ul>\n<h3 id=\"七、纯与不纯的职责链模式\"><a href=\"#七、纯与不纯的职责链模式\" class=\"headerlink\" title=\"七、纯与不纯的职责链模式\"></a>七、纯与不纯的职责链模式</h3><p>职责链模式可分为纯的职责链模式和不纯的职责链模式两种：</p>\n<ol>\n<li>纯的职责链模式<br>一个纯的职责链模式要求一个具体处理者对象只能在两个行为中选择一个：<br><code>要么承担全部责任，要么将责任推给下家</code>，不允许出现某一个具体处理者对象在承担了一部分或全部责任后又将责任向下传递的情况。<br>而且在纯的职责链模式中，<code>要求一个请求必须被某一个处理者对象所接收</code>，不能出现某个请求未被任何一个处理者对象处理的情况。<br>在前面的采购单审批实例中应用的是纯的职责链模式。</li>\n<li>不纯的职责链模式<br>在一个不纯的职责链模式中<code>允许某个请求被一个具体处理者部分处理后再向下传递，或者一个具体处理者处理完某请求后其后继处理者可以继续处理该请求，而且一个请求可以最终不被任何处理者对象所接收</code>。<br>Java AWT 1.0中的事件处理模型应用的是不纯的职责链模式，由于每一级组件在接收到事件时，都可以处理此事件，而不论此事件是否在这一级得到处理，事件都可以停止向上传播或继续向上传播，可以随时中断对事件的处理。</li>\n</ol>\n<h3 id=\"八、重要实例\"><a href=\"#八、重要实例\" class=\"headerlink\" title=\"八、重要实例\"></a>八、重要实例</h3><ul>\n<li>要求：<br>软件公司承接了某企业SCM(Supply Chain Management，供应链管理)系统的开发任务，其中包含一个采购审批子系统。<br>该企业的采购审批是分级进行的，即根据采购金额的不同由不同层次的主管人员来审批。<br>主任可以审批5万元以下（不包括5万元）的采购单，副董事长可以审批5万元至10万元（不包括10万元）的采购单，董事长可以审批10万元至50万元（不包括50万元）的采购单，50万元及以上的采购单就需要开董事会讨论决定。<br><img src=\"http://img.my.csdn.net/uploads/201204/02/1333307283_7751.gif\" alt=\"采购单分级审批示意图\"></li>\n<li>模式结构分析图<br><img src=\"https://ooo.0o0.ooo/2017/06/25/594f4773abb3b.jpg\" alt=\"模式结构分析图\"></li>\n<li><p>解决代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div></pre></td><td class=\"code\"><pre><div class=\"line\">//采购单：请求类  </div><div class=\"line\">class PurchaseRequest </div><div class=\"line\">&#123;  </div><div class=\"line\">    private double amount;  //采购金额  </div><div class=\"line\">    private int number;  //采购单编号  </div><div class=\"line\">    private String purpose;  //采购目的  </div><div class=\"line\">      </div><div class=\"line\">    public PurchaseRequest(double amount, int number, String purpose) &#123;  </div><div class=\"line\">        this.amount = amount;  </div><div class=\"line\">        this.number = number;  </div><div class=\"line\">        this.purpose = purpose;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    public void setAmount(double amount) &#123;  </div><div class=\"line\">        this.amount = amount;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    public double getAmount() &#123;  </div><div class=\"line\">        return this.amount;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    public void setNumber(int number) &#123;  </div><div class=\"line\">        this.number = number;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    public int getNumber() &#123;  </div><div class=\"line\">        return this.number;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    public void setPurpose(String purpose) &#123;  </div><div class=\"line\">        this.purpose = purpose;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    public String getPurpose() &#123;  </div><div class=\"line\">        return this.purpose;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">//审批者类：抽象处理者  </div><div class=\"line\">abstract class Approver </div><div class=\"line\">&#123;  </div><div class=\"line\">    protected Approver successor; //定义后继对象  </div><div class=\"line\">    protected String name; //审批者姓名  </div><div class=\"line\">      </div><div class=\"line\">    public Approver(String name) &#123;  </div><div class=\"line\">        this.name = name;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    //设置后继者  </div><div class=\"line\">    public void setSuccessor(Approver successor) &#123;   </div><div class=\"line\">        this.successor = successor;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    //抽象请求处理方法  </div><div class=\"line\">    public abstract void processRequest(PurchaseRequest request);  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">//主任类：具体处理者  </div><div class=\"line\">class Director extends Approver </div><div class=\"line\">&#123;  </div><div class=\"line\">    public Director(String name) &#123;  </div><div class=\"line\">        super(name);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    //具体请求处理方法  </div><div class=\"line\">    public void processRequest(PurchaseRequest request) </div><div class=\"line\">    &#123;  </div><div class=\"line\">        if (request.getAmount() &lt; 50000) </div><div class=\"line\">        &#123;  </div><div class=\"line\">            System.out.println(&quot;主任&quot; + this.name + &quot;审批采购单：&quot; + request.getNumber() + &quot;，金额：&quot; + request.getAmount() + &quot;元，采购目的：&quot; + request.getPurpose() + &quot;。&quot;);  //处理请求  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else </div><div class=\"line\">        &#123;  </div><div class=\"line\">            this.successor.processRequest(request);  //转发请求  </div><div class=\"line\">        &#125;     </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">//副董事长类：具体处理者  </div><div class=\"line\">class VicePresident extends Approver </div><div class=\"line\">&#123;  </div><div class=\"line\">    public VicePresident(String name) &#123;  </div><div class=\"line\">        super(name);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    //具体请求处理方法  </div><div class=\"line\">    public void processRequest(PurchaseRequest request) </div><div class=\"line\">    &#123;  </div><div class=\"line\">        if (request.getAmount() &lt; 100000) </div><div class=\"line\">        &#123;  </div><div class=\"line\">            System.out.println(&quot;副董事长&quot; + this.name + &quot;审批采购单：&quot; + request.getNumber() + &quot;，金额：&quot; + request.getAmount() + &quot;元，采购目的：&quot; + request.getPurpose() + &quot;。&quot;);  //处理请求  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else </div><div class=\"line\">        &#123;  </div><div class=\"line\">            this.successor.processRequest(request);  //转发请求  </div><div class=\"line\">        &#125;     </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">//董事长类：具体处理者  </div><div class=\"line\">class President extends Approver </div><div class=\"line\">&#123;  </div><div class=\"line\">    public President(String name) &#123;  </div><div class=\"line\">        super(name);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    //具体请求处理方法  </div><div class=\"line\">    public void processRequest(PurchaseRequest request) </div><div class=\"line\">    &#123;  </div><div class=\"line\">        if (request.getAmount() &lt; 500000) </div><div class=\"line\">        &#123;  </div><div class=\"line\">            System.out.println(&quot;董事长&quot; + this.name + &quot;审批采购单：&quot; + request.getNumber() + &quot;，金额：&quot; + request.getAmount() + &quot;元，采购目的：&quot; + request.getPurpose() + &quot;。&quot;);  //处理请求  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else </div><div class=\"line\">        &#123;  </div><div class=\"line\">            this.successor.processRequest(request);  //转发请求  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">//董事会类：具体处理者  </div><div class=\"line\">class Congress extends Approver </div><div class=\"line\">&#123;  </div><div class=\"line\">    public Congress(String name) </div><div class=\"line\">    &#123;  </div><div class=\"line\">        super(name);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    //具体请求处理方法  </div><div class=\"line\">    public void processRequest(PurchaseRequest request) </div><div class=\"line\">    &#123;  </div><div class=\"line\">        System.out.println(&quot;召开董事会审批采购单：&quot; + request.getNumber() + &quot;，金额：&quot; + request.getAmount() + &quot;元，采购目的：&quot; + request.getPurpose() + &quot;。&quot;);        //处理请求  </div><div class=\"line\">    &#125;      </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//客户端测试代码：</div><div class=\"line\">class Client </div><div class=\"line\">&#123;  </div><div class=\"line\">    public static void main(String[] args) </div><div class=\"line\">\t&#123;  </div><div class=\"line\">        Approver wjzhang,gyang,jguo,meeting;  </div><div class=\"line\">        wjzhang = new Director(&quot;张无忌&quot;);  </div><div class=\"line\">        gyang = new VicePresident(&quot;杨过&quot;);  </div><div class=\"line\">        jguo = new President(&quot;郭靖&quot;);  </div><div class=\"line\">        meeting = new Congress(&quot;董事会&quot;);  </div><div class=\"line\">      </div><div class=\"line\">        //创建职责链  </div><div class=\"line\">        wjzhang.setSuccessor(gyang);  </div><div class=\"line\">        gyang.setSuccessor(jguo);  </div><div class=\"line\">        jguo.setSuccessor(meeting);  </div><div class=\"line\">          </div><div class=\"line\">        //创建采购单  </div><div class=\"line\">        PurchaseRequest pr1 = new PurchaseRequest(45000,10001,&quot;购买倚天剑&quot;);  </div><div class=\"line\">        wjzhang.processRequest(pr1);  </div><div class=\"line\">          </div><div class=\"line\">        PurchaseRequest pr2 = new PurchaseRequest(60000,10002,&quot;购买《葵花宝典》&quot;);  </div><div class=\"line\">        wjzhang.processRequest(pr2);  </div><div class=\"line\">      </div><div class=\"line\">        PurchaseRequest pr3 = new PurchaseRequest(160000,10003,&quot;购买《金刚经》&quot;);  </div><div class=\"line\">        wjzhang.processRequest(pr3);  </div><div class=\"line\">  </div><div class=\"line\">        PurchaseRequest pr4 = new PurchaseRequest(800000,10004,&quot;购买桃花岛&quot;);  </div><div class=\"line\">        wjzhang.processRequest(pr4);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>编译并运行程序，输出结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">主任张无忌审批采购单：10001，金额：45000.0元，采购目的：购买倚天剑。</div><div class=\"line\">副董事长杨过审批采购单：10002，金额：60000.0元，采购目的：购买《葵花宝典》。</div><div class=\"line\">董事长郭靖审批采购单：10003，金额：160000.0元，采购目的：购买《金刚经》。</div><div class=\"line\">召开董事会审批采购单：10004，金额：800000.0元，采购目的：购买桃花岛。</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果需要在系统增加一个新的具体处理者，在客户端代码中，需要创建新的具体处理者对象并实例化，然后将该对象根据前后顺序加入职责链中。</p>\n</li>\n<li>由于链的创建过程由客户端负责，因此增加新的具体处理者类对原有类库无任何影响，无须修改已有类的源代码，符合“开闭原则”。</li>\n</ul>\n<p>【参考】(作者：刘伟 <a href=\"http://blog.csdn.net/lovelion\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/lovelion</a>)</p>\n"}