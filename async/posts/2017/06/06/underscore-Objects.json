{"tags":[{"name":"underscore","permalink":"http://yoursite.com/tags/underscore/","url":"\\async\\tags\\underscore.json","count":6}],"categories":[],"url":"\\async\\posts\\2017\\06\\06\\underscore-Objects.json","date":1496678798000,"path":{"year":2017,"month":6,"day":6,"name":"underscore-Objects"},"title":"underscore-Objects","permalink":"http://yoursite.com/2017/06/06/underscore-Objects/","content":"<h3 id=\"Objects\"><a href=\"#Objects\" class=\"headerlink\" title=\"Objects\"></a>Objects</h3><p>和<code>Array</code>类似，underscore也提供了大量针对<code>Object</code>的函数。</p>\n<ol>\n<li><p>keys()/allKeys()</p>\n<ul>\n<li><p><code>keys()</code>可以非常方便地返回一个object自身所有的<code>key</code>，但<code>不包含</code>从原型链继承下来的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> function Student(name, age) </div><div class=\"line\"> &#123; </div><div class=\"line\">   this.name = name; </div><div class=\"line\">this.age = age; </div><div class=\"line\"> &#125; </div><div class=\"line\"> var xiaoming = new Student(&apos;小明&apos;, 20); </div><div class=\"line\"> _.keys(xiaoming); // [&apos;name&apos;, &apos;age&apos;]</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>allKeys()</code>除了object自身的<code>key</code>，还<code>包含</code>从原型链继承下来的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"> function Student(name, age) </div><div class=\"line\"> &#123; </div><div class=\"line\">   this.name = name; </div><div class=\"line\">this.age = age; </div><div class=\"line\"> &#125; </div><div class=\"line\"> Student.prototype.school = &apos;No.1 Middle School&apos;; </div><div class=\"line\"> var xiaoming = new Student(&apos;小明&apos;, 20); </div><div class=\"line\"> _.allKeys(xiaoming); // [&apos;name&apos;, &apos;age&apos;, &apos;school&apos;]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>values()</p>\n<ul>\n<li>和<code>keys()</code>类似，<code>values()</code>返回object自身但<code>不包含</code>原型链继承的所有<code>值</code>：    </li>\n<li><p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123; name: &apos;小明&apos;, age: 20 &#125;; </div><div class=\"line\">_.values(obj); // [&apos;小明&apos;, 20]</div></pre></td></tr></table></figure>\n</li>\n<li><p>注意，没有<code>allValues()函数</code>。</p>\n</li>\n</ul>\n</li>\n<li><p>mapObject()</p>\n<ul>\n<li><code>mapObject()</code>就是针对<code>object</code>版本的<code>map()</code>：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123; a: 1, b: 2, c: 3 &#125;; </div><div class=\"line\">// 注意传入的函数签名，value在前，key在后: </div><div class=\"line\">_.mapObject(obj, (v, k) =&gt; 100 + v); // &#123; a: 101, b: 102, c: 103 &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>invert()</p>\n<ul>\n<li><code>invert()</code>把object的每个key-value来个交换，key变成value，value变成key:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123; Adam: 90, Lisa: 85, Bart: 59 &#125;; </div><div class=\"line\">_.invert(obj); // &#123; &apos;59&apos;: &apos;Bart&apos;, &apos;85&apos;: &apos;Lisa&apos;, &apos;90&apos;: &apos;Adam&apos; &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>extend() / extendOwn()</p>\n<ul>\n<li><code>extend()</code>把<code>多个object</code>的<code>key-value</code>合并到<code>第一个object</code>并返回;</li>\n<li><p>注意：如果有相同的key，后面的object的value将<code>覆盖</code>前面的object的value。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = &#123;name: &apos;Bob&apos;, age: 20&#125;; </div><div class=\"line\">_.extend(a, &#123;age: 15&#125;, &#123;age: 88, city: &apos;Beijing&apos;&#125;);//年龄和城市都被覆盖了 </div><div class=\"line\">// 变量a的内容也改变了： </div><div class=\"line\">a; // &#123;name: &apos;Bob&apos;, age: 88, city: &apos;Beijing&apos;&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>extendOwn()</code>和<code>extend()</code>类似，但获取属性时<code>忽略</code>从原型链继承下来的属性。</p>\n</li>\n</ul>\n</li>\n<li><p>clone()</p>\n<ul>\n<li><p><code>clone()</code>用于复制一个object对象，它会把原有对象的所有属性都复制到新的对象中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = &#123; name: &apos;小明&apos;, age: 20, skills: [&apos;JavaScript&apos;, &apos;CSS&apos;, &apos;HTML&apos;] &#125;; </div><div class=\"line\">var 对象b = _.clone(对象a);</div></pre></td></tr></table></figure>\n</li>\n<li><p>注意：<code>clone()</code>是“浅复制”，即两个对象相同的key所引用的value其实是同一对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//b.skills 引用 a.skills a.skills === b.skills; //true </div><div class=\"line\">//所以修改a.skills会影响b.skills </div><div class=\"line\">/* 注意区分修改与重新赋值的区别： </div><div class=\"line\">  1)修改是改变了&lt;原对象属性值所引用的值&gt;，但原对象和复制得到的新对象的属性值引用还是原来的，所以这种修改会让俩对象的属性值都会变化； </div><div class=\"line\">  2)重新赋值则是改变了&lt;原对象属性值的引用&gt;，开辟一个新的内存空间存放新的值，这时原对象属性值的引用变了，但刚刚复制得到的新对象还是引用原对象属性值的引用，所以没有影响。 </div><div class=\"line\">  3)会产生修改还是重新赋值，就要看值是什么类型了： </div><div class=\"line\">    *可变的就是修改；（如Array） </div><div class=\"line\">    *不可变的就是重新赋值；（如string） </div><div class=\"line\">如 a.skills[0] = java; //则为修改：两对象的skills[0]的引用的值都变成了java </div><div class=\"line\">如 a.skills = &apos;arr&apos;; //则为重新赋值：原对象的skills引用变成引用arr数组了；而新对象还是引用[&apos;JavaScript&apos;, &apos;CSS&apos;, &apos;HTML&apos;]这个数组 </div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>isEqual()</p>\n<ul>\n<li><code>isEqual()</code>对两个<code>object</code>或<code>Array</code>进行深度比较，内容完全相同则返回true（忽略内容顺序）：</li>\n<li>例子：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//比较object： </div><div class=\"line\">var o1 = &#123; name: &apos;Bob&apos;, skills: &#123; Java: 90, JavaScript: 99 &#125;&#125;; </div><div class=\"line\">var o2 = &#123; name: &apos;Bob&apos;, skills: &#123; JavaScript: 99, Java: 90 &#125;&#125;; </div><div class=\"line\">o1 === o2; // false </div><div class=\"line\">_.isEqual(o1, o2); // true </div><div class=\"line\">//比较Array： </div><div class=\"line\">var o1 = [ &apos;Bob&apos;, &#123; skills:[&apos;Java&apos;, &apos;JavaScript&apos;] &#125; ]; </div><div class=\"line\">var o2 = [ &apos;Bob&apos;, &#123; skills:[&apos;Java&apos;, &apos;JavaScript&apos;] &#125; ]; </div><div class=\"line\">o1 === o2; // false </div><div class=\"line\">_.isEqual(o1, o2); // true</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>更多完整<code>Objects</code>函数请参考underscore的文档：<a href=\"http://underscorejs.org/#objects\" target=\"_blank\" rel=\"external\">http://underscorejs.org/#objects</a></li>\n</ul>\n"}