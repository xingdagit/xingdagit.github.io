{"tags":[{"name":"设计模式","permalink":"http://yoursite.com/tags/设计模式/","url":"\\async\\tags\\设计模式.json","count":3}],"categories":[],"url":"\\async\\posts\\2017\\06\\22\\设计模式-建造者模式-Builder.json","date":1498115918000,"path":{"year":2017,"month":6,"day":22,"name":"设计模式-建造者模式-Builder"},"title":"设计模式--建造者模式(Builder)","permalink":"http://yoursite.com/2017/06/22/设计模式-建造者模式-Builder/","content":"<h3 id=\"建造者模式-Builder-Pattern\"><a href=\"#建造者模式-Builder-Pattern\" class=\"headerlink\" title=\"建造者模式(Builder Pattern)\"></a>建造者模式(Builder Pattern)</h3><ul>\n<li>没有人买车会只买一个轮胎或者方向盘，大家买的都是一辆包含轮胎、方向盘和发动机等多个部件的完整汽车。<br>如何将这些部件组装成一辆完整的汽车并返回给用户，这是建造者模式需要解决的问题。</li>\n<li>建造者模式又称为生成器模式，它是一种较为复杂、使用频率也相对较低的创建型模式。</li>\n<li>建造者模式用于创建一个包含多个组成部分的复杂对象，并可以返回一个完整的产品对象给用户/客户端。</li>\n<li>属于创建型模式（最复杂的创建型模式）</li>\n<li>关注该复杂对象是如何一步一步创建而成的，对用户而言，无须知道创建过程和内部组成细节，只需直接使用创建好的完整对象即可。</li>\n</ul>\n<h3 id=\"模式动机\"><a href=\"#模式动机\" class=\"headerlink\" title=\"模式动机\"></a>模式动机</h3><ul>\n<li>在软件开发中，也存在大量类似汽车一样的复杂对象，它们拥有一系列对象属性（类似汽车的部件）。</li>\n<li>这些部件的复杂组合过程往往被<code>外部化</code>到一个称作<code>建造者</code>的对象里；<br>对于大多数用户而言，无须知道这些部件的装配细节和组合过程，也几乎不会使用单独某个部件，而是使用一个完整的对象（一辆完整的汽车）。</li>\n<li>通过建造者模式<code>将部件本身与其组装过程分开</code>，然后一<code>步一步创建</code>并<code>返还给客户端一个已经建造完毕的完整产品对象</code>，而用户无须关心<code>该对象所包含的属性以及它们的组装方式</code>，这就是建造者模式的模式动机。 </li>\n</ul>\n<h3 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h3><blockquote>\n<p>建造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>\n</blockquote>\n<ul>\n<li>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。</li>\n</ul>\n<h3 id=\"模式结构\"><a href=\"#模式结构\" class=\"headerlink\" title=\"模式结构\"></a>模式结构</h3><ul>\n<li><p>建造者模式结构图<br><img src=\"https://ooo.0o0.ooo/2017/06/22/594b72cd5c162.png\" alt=\"建造者模式结构图\"></p>\n</li>\n<li><p>在建造者模式结构图中包含如下几个角色：</p>\n</li>\n</ul>\n<ol>\n<li>Builder（抽象建造者）：<br>它为创建一个产品Product对象的各个部件指定抽象接口。<br>在该接口中一般声明两类方法，一类方法是buildPartX()，它们用于创建复杂对象的各个部件；另一类方法是getResult()，它们用于返回复杂对象。<br>Builder既可以是抽象类，也可以是接口。</li>\n</ol>\n<p>【参考】(作者：刘伟 <a href=\"http://blog.csdn.net/lovelion\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/lovelion</a>)</p>\n"}