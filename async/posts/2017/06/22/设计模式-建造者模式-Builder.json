{"tags":[{"name":"设计模式","permalink":"http://yoursite.com/tags/设计模式/","url":"\\async\\tags\\设计模式.json","count":3}],"categories":[],"url":"\\async\\posts\\2017\\06\\22\\设计模式-建造者模式-Builder.json","date":1498115918000,"path":{"year":2017,"month":6,"day":22,"name":"设计模式-建造者模式-Builder"},"title":"设计模式--建造者模式(Builder)","permalink":"http://yoursite.com/2017/06/22/设计模式-建造者模式-Builder/","content":"<h3 id=\"建造者模式-Builder-Pattern\"><a href=\"#建造者模式-Builder-Pattern\" class=\"headerlink\" title=\"建造者模式(Builder Pattern)\"></a>建造者模式(Builder Pattern)</h3><ul>\n<li>建造者模式属于创建型模式（最复杂的创建型模式）</li>\n<li>没有人买车会只买一个轮胎或者方向盘，大家买的都是一辆包含轮胎、方向盘和发动机等多个部件的完整汽车。<br>如何将这些部件组装成一辆完整的汽车并返回给用户，这是建造者模式需要解决的问题。</li>\n<li>建造者模式又称为生成器模式，它是一种较为复杂、使用频率也相对较低的创建型模式。</li>\n<li>建造者模式用于创建一个包含多个组成部分的复杂对象，并可以返回一个完整的产品对象给用户/客户端。<br>它关注该复杂对象是如何一步一步创建而成的，对用户而言，无须知道创建过程和内部组成细节，只需直接使用创建好的完整对象即可。</li>\n<li>建造者模式将复杂对象的构建与对象的表现分离开来，这样使得同样的构建过程可以创建出不同的表现。 </li>\n</ul>\n<h3 id=\"模式动机\"><a href=\"#模式动机\" class=\"headerlink\" title=\"模式动机\"></a>模式动机</h3><ul>\n<li>在软件开发中，也存在大量类似汽车一样的复杂对象，它们拥有一系列对象属性（类似汽车的部件）。</li>\n<li>这些部件的复杂组合过程往往被<code>外部化</code>到一个称作<code>建造者</code>的对象里；<br>对于大多数用户而言，无须知道这些部件的装配细节和组合过程，也几乎不会使用单独某个部件，而是使用一个完整的对象（一辆完整的汽车）。</li>\n<li>通过建造者模式<code>将部件本身与其组装过程分开</code>，然后一<code>步一步创建</code>并<code>返还给客户端一个已经建造完毕的完整产品对象</code>，而用户无须关心<code>该对象所包含的属性以及它们的组装方式</code>，这就是建造者模式的模式动机。 </li>\n</ul>\n<h3 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h3><blockquote>\n<p>建造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>\n</blockquote>\n<ul>\n<li>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。</li>\n</ul>\n<h3 id=\"模式结构\"><a href=\"#模式结构\" class=\"headerlink\" title=\"模式结构\"></a>模式结构</h3><ul>\n<li><p>建造者模式结构图<br><img src=\"https://ooo.0o0.ooo/2017/06/22/594b9420ae8c2.jpg\" alt=\"建造者模式结构图\"></p>\n</li>\n<li><p>在建造者模式结构图中包含如下几个角色：</p>\n</li>\n</ul>\n<ol>\n<li>Builder（抽象建造者）：<br>它为创建一个产品Product对象的各个部件指定抽象接口。<br>在该接口中一般声明两类方法，一类方法是buildPartX()，它们用于创建复杂对象的各个部件；另一类方法是getResult()，它们用于返回复杂对象。<br>Builder既可以是抽象类，也可以是接口。</li>\n<li>ConcreteBuilder（具体建造者）：<br>它实现了Builder接口，实现各个部件的具体构造和装配方法，定义并明确它所创建的复杂对象，<br>也可以提供一个方法返回创建好的复杂产品对象。</li>\n<li>Product（产品角色）：<br>它是被构建的复杂对象，包含多个组成部件，<br>具体建造者创建该产品的内部表示并定义它的装配过程。</li>\n<li>Director（指挥者）：<br>指挥者又称为导演类，它负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，<br>可以在其<code>construct()建造方法</code>中调用建造者对象的部件构造与装配方法，完成复杂对象的建造，并返回。<br>客户端一般只需要与指挥者进行交互，在客户端确定具体建造者的类型，并实例化具体建造者对象（也可以通过配置文件和反射机制），然后通过指挥者类的构造函数或者Setter方法将该对象传入指挥者类中。</li>\n</ol>\n<h3 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h3><ol>\n<li><p>Product（产品角色）一般是复杂对象，即那些包含多个成员属性的对象；<br>这些成员属性也称为部件或零件，如汽车包括方向盘、发动机、轮胎等部件，电子邮件包括发件人、收件人、主题、内容、附件等部件；<br>一个典型的复杂对象类代码示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Product  </div><div class=\"line\">&#123;   </div><div class=\"line\">    //定义多个成员属性(部件)，可以是任意类型，包括值类型和引用类型</div><div class=\"line\">    private  String partA; </div><div class=\"line\">    private  String partB;</div><div class=\"line\">    private  String partC;</div><div class=\"line\"> //每个成员属性都有相应的Getter方法和Setter方法</div><div class=\"line\"> //通过这些Setter方法可以建造一个完整的产品对象</div><div class=\"line\">    //partA的Getter方法和Setter方法省略</div><div class=\"line\">    //partB的Getter方法和Setter方法省略</div><div class=\"line\">    //partC的Getter方法和Setter方法省略</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Builder（抽象建造者）定义了产品角色的创建方法和返回方法，其典型代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> public abstract class Builder </div><div class=\"line\"> &#123;</div><div class=\"line\">   //创建产品对象</div><div class=\"line\">   protected  Product product=new Product();</div><div class=\"line\">   </div><div class=\"line\">//抽象的成员属性(部件)的创建方法，具体建造过程在子类实现</div><div class=\"line\">   public  abstract void buildPartA();</div><div class=\"line\">   public  abstract void buildPartB();</div><div class=\"line\">   public  abstract void buildPartC();</div><div class=\"line\">    </div><div class=\"line\">   //工厂方法：返回建造好的完整对象(产品)</div><div class=\"line\">   public  Product getResult() </div><div class=\"line\">&#123;</div><div class=\"line\">      return  product;</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>ConcreteBuilder（具体建造者）实现了buildPartX()方法，<br>通过调用Product的setPartX()方法可以给产品对象的成员属性设值。<br>不同的具体建造者在实现buildPartX()方法时将有所区别，<br>如setPartX()方法的参数可能不一样，在有些具体建造者类中某些setPartX()方法无须实现（提供一个空实现）。<br>而这些对于客户端来说都无须关心，客户端只需知道具体建造者类型即可。</p>\n</li>\n<li><p>Director（指挥者）：<br>一方面它隔离了客户与创建过程；<br>另一方面它控制产品的创建过程，包括某个buildPartX()方法是否被调用以及多个buildPartX()方法调用的先后次序等。<br>它针对抽象建造者编程，客户端只需知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。<br>在实际生活中也存在类似指挥者一样的角色，如一个客户去购买电脑，电脑销售人员相当于指挥者，只要客户确定电脑的类型，电脑销售人员可以通知电脑组装人员给客户组装一台电脑。<br>指挥者类的代码示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Director </div><div class=\"line\">&#123;</div><div class=\"line\">    private  Builder  builder; //关联一个Builder类型对象</div><div class=\"line\"> </div><div class=\"line\">    public  Director(Builder builder) //构造函数</div><div class=\"line\"> &#123;</div><div class=\"line\">       this.builder=builder;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    public  void setBuilder(Builder builder) //set函数</div><div class=\"line\"> &#123;</div><div class=\"line\">       this.builder=builer;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    public Product construct() //产品构建与组装方法</div><div class=\"line\"> &#123;</div><div class=\"line\">    //通过builder对象调用其构造部件的方法</div><div class=\"line\"> //可以设置每个部件构造，即buildPartX()方法执行的顺序</div><div class=\"line\">       builder.buildPartA();</div><div class=\"line\">       builder.buildPartB();</div><div class=\"line\">       builder.buildPartC();</div><div class=\"line\"> //构造完后，返回一个完整对象(产品)</div><div class=\"line\">       return builder.getResult();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>对于客户端而言，只需确定具体建造者的类型即可。<br>通常客户端类代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Builder  builder = new ConcreteBuilder(参数); //参数为具体建造者类ConcreteBuilder的类名（可通过配置文件实现）</div><div class=\"line\">Director director = new Director(builder);</div><div class=\"line\">Product product = director.construct();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><ul>\n<li><p>优点：<br>(1) 在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。<br>(2) 每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象。<br>(3) 可以更加精细地控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。<br>(4) 由于指挥者类针对抽象建造者编程，增加新的具体建造者无须修改原有类库的代码，系统扩展方便，符合“开闭原则” </p>\n</li>\n<li><p>缺点：<br>(1) 建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，例如很多组成部分都不相同，不适合使用建造者模式，因此其使用范围受到一定的限制。<br>(2) 如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大，增加系统的理解难度和运行成本。</p>\n</li>\n<li><p>适用场景<br>(1) 需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性。<br>(2) 需要生成的产品对象的属性相互依赖，需要指定其生成顺序。<br>(3) 对象的创建过程独立于创建该对象的类。在建造者模式中通过引入了指挥者类，将创建过程封装在Director类中，而不在建造者类和客户类中。<br>(4) 隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。</p>\n</li>\n<li><p>建造者模式与抽象工厂模式的比较<br>建造者模式与抽象工厂模式有点相似，但是建造者模式返回一个完整的复杂产品，而抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族。<br>在抽象工厂模式中，客户端实例化具体工厂类，然后调用其工厂方法生成并获取所需产品对象；<br>而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过给Director类指定具体建造者的类型，进而指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。<br>如果将抽象工厂模式看成一个汽车配件生产厂，生成不同类型的汽车配件，那么建造者模式就是一个汽车组装厂，通过对配件进行组装返回一辆完整的汽车。</p>\n</li>\n<li><p>模式应用<br>(1) JavaMail客户端电子邮件程序<br>(2) 游戏软件中的场景地图、人物角色等等</p>\n</li>\n</ul>\n<h3 id=\"重要实例\"><a href=\"#重要实例\" class=\"headerlink\" title=\"重要实例\"></a>重要实例</h3><ul>\n<li>要求：软件公司开发一款网络RPG游戏，玩家在游戏中扮演虚拟世界中的某个角色。<br>不同类型的游戏角色，其性别、脸型、服装、发型等外部特性都有所差异。<br>公司决定开发一个小工具来创建不同类型的角色，并可以灵活增加新的角色。</li>\n<li>模式结构分析图<br><img src=\"https://ooo.0o0.ooo/2017/06/22/594ba4d7c5c6e.jpg\" alt=\"模式结构分析图\"></li>\n<li><p>解决代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Actor角色类：复杂产品，考虑到代码的可读性，只列出部分成员属性，且成员属性的类型均为String，真实情况下，有些成员属性的类型需自定义</div><div class=\"line\">class Actor</div><div class=\"line\">&#123;</div><div class=\"line\">       private  String type; //角色类型</div><div class=\"line\">       private  String sex; //性别</div><div class=\"line\">       private  String face; //脸型</div><div class=\"line\">       private  String costume; //服装</div><div class=\"line\">       private  String hairstyle; //发型 </div><div class=\"line\">\t   </div><div class=\"line\">       public  void setType(String type) &#123;</div><div class=\"line\">           this.type  = type;</div><div class=\"line\">       &#125;</div><div class=\"line\">       public  void setSex(String sex) &#123;</div><div class=\"line\">           this.sex  = sex;</div><div class=\"line\">       &#125;</div><div class=\"line\">       public  void setFace(String face) &#123;</div><div class=\"line\">           this.face  = face;</div><div class=\"line\">       &#125;</div><div class=\"line\">       public  void setCostume(String costume) &#123;</div><div class=\"line\">           this.costume  = costume;</div><div class=\"line\">       &#125;</div><div class=\"line\">       public  void setHairstyle(String hairstyle) &#123;</div><div class=\"line\">           this.hairstyle  = hairstyle;</div><div class=\"line\">       &#125;</div><div class=\"line\">       public  String getType() &#123;</div><div class=\"line\">           return  (this.type);</div><div class=\"line\">       &#125;</div><div class=\"line\">       public  String getSex() &#123;</div><div class=\"line\">           return  (this.sex);</div><div class=\"line\">       &#125;</div><div class=\"line\">       public  String getFace() &#123;</div><div class=\"line\">           return  (this.face);</div><div class=\"line\">       &#125;</div><div class=\"line\">       public  String getCostume() &#123;</div><div class=\"line\">           return  (this.costume);</div><div class=\"line\">       &#125;</div><div class=\"line\">       public  String getHairstyle() &#123;</div><div class=\"line\">           return  (this.hairstyle);</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/*************************************/</div><div class=\"line\">//角色建造器：抽象建造者</div><div class=\"line\">abstract class ActorBuilder</div><div class=\"line\">&#123;</div><div class=\"line\">    protected  Actor actor = new Actor();</div><div class=\"line\">    public  abstract void buildType();</div><div class=\"line\">    public  abstract void buildSex();</div><div class=\"line\">    public  abstract void buildFace();</div><div class=\"line\">    public  abstract void buildCostume();</div><div class=\"line\">    public  abstract void buildHairstyle();</div><div class=\"line\">\t</div><div class=\"line\">    //钩子方法：判断某个角色是否为“光头(Bareheaded)”</div><div class=\"line\">    public boolean isBareheaded()&#123;</div><div class=\"line\">        return false;//默认返回false</div><div class=\"line\">    &#125;</div><div class=\"line\">    //工厂方法，返回一个完整的游戏角色对象</div><div class=\"line\">    public Actor createActor()&#123;</div><div class=\"line\">        return actor;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/*************************************/</div><div class=\"line\">//英雄角色建造器：具体建造者</div><div class=\"line\">class HeroBuilder extends ActorBuilder</div><div class=\"line\">&#123;</div><div class=\"line\">       public  void buildType()&#123;</div><div class=\"line\">           actor.setType(&quot;英雄&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">       public void buildSex() &#123;</div><div class=\"line\">           actor.setSex(&quot;男&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">       public void buildFace()&#123;</div><div class=\"line\">           actor.setFace(&quot;英俊&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">       public void buildCostume()&#123;</div><div class=\"line\">           actor.setCostume(&quot;盔甲&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">       public void buildHairstyle()&#123;</div><div class=\"line\">           actor.setHairstyle(&quot;飘逸&quot;);</div><div class=\"line\">       &#125;    </div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">//天使角色建造器：具体建造者</div><div class=\"line\">class AngelBuilder extends ActorBuilder</div><div class=\"line\">&#123;</div><div class=\"line\">       public void buildType()&#123;</div><div class=\"line\">           actor.setType(&quot;天使&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">       public void buildSex()&#123;</div><div class=\"line\">           actor.setSex(&quot;女&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">       public void buildFace()&#123;</div><div class=\"line\">           actor.setFace(&quot;漂亮&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">       public void buildCostume()&#123;</div><div class=\"line\">           actor.setCostume(&quot;白裙&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">       public void buildHairstyle()&#123;</div><div class=\"line\">           actor.setHairstyle(&quot;披肩长发&quot;);</div><div class=\"line\">       &#125;    </div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">//恶魔角色建造器：具体建造者</div><div class=\"line\">class DevilBuilder extends ActorBuilder</div><div class=\"line\">&#123;</div><div class=\"line\">       public  void buildType()&#123;</div><div class=\"line\">          actor.setType(&quot;恶魔&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">       public  void buildSex()&#123;</div><div class=\"line\">          actor.setSex(&quot;妖&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">       public  void buildFace()&#123;</div><div class=\"line\">          actor.setFace(&quot;丑陋&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">       public  void buildCostume()&#123;</div><div class=\"line\">          actor.setCostume(&quot;黑衣&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">       public  void buildHairstyle()&#123;</div><div class=\"line\">          actor.setHairstyle(&quot;光头&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">       //恶魔(Devil)为光头，所以覆盖钩子方法，返回true</div><div class=\"line\">       public boolean isBareheaded()&#123;</div><div class=\"line\">          return true;</div><div class=\"line\">       &#125; \t   </div><div class=\"line\">&#125;</div><div class=\"line\">/*************************************/</div><div class=\"line\">//游戏角色创建控制器：指挥者类</div><div class=\"line\">class ActorController</div><div class=\"line\">&#123;</div><div class=\"line\">    //construct方法拥有一个抽象建造者ActorBuilder类型的参数，</div><div class=\"line\">\t//在该方法内部实现了游戏角色对象的逐步构建</div><div class=\"line\">    public Actor construct(ActorBuilder ab)</div><div class=\"line\">\t&#123;</div><div class=\"line\">       ab.buildType();</div><div class=\"line\">       ab.buildSex();</div><div class=\"line\">       ab.buildFace();</div><div class=\"line\">       ab.buildCostume();</div><div class=\"line\">       ab.buildHairstyle();</div><div class=\"line\">       //通过钩子方法来控制产品的构建</div><div class=\"line\">       if(!ab.isBareheaded())&#123;</div><div class=\"line\">         ab.buildHairstyle();</div><div class=\"line\">       &#125;</div><div class=\"line\">       Actor actor = ab.createActor();</div><div class=\"line\">       return actor; //最后返回一个完整的游戏角色对象</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/*************************************/</div><div class=\"line\">//客户端测试代码：</div><div class=\"line\">class ActorClient</div><div class=\"line\">&#123;</div><div class=\"line\">\tpublic static void main(String args[])</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tActorController ac = new ActorController();</div><div class=\"line\">\t\tActorBuilder ab;</div><div class=\"line\">\t\tab = new AngelBuilder();</div><div class=\"line\">\t\tActor angel;</div><div class=\"line\">\t\tangel = ac.construct(ab);</div><div class=\"line\">\t\tString type = angel.getType();</div><div class=\"line\">\t\tSystem.out.println(type + &quot;的外观：&quot;);</div><div class=\"line\">\t\tSystem.out.println(&quot;性别：&quot; + angel.getSex());</div><div class=\"line\">\t\tSystem.out.println(&quot;面容：&quot; + angel.getFace());</div><div class=\"line\">\t\tSystem.out.println(&quot;服装：&quot; + angel.getCostume());</div><div class=\"line\">\t\tSystem.out.println(&quot;发型：&quot; + angel.getHairstyle());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>编译并运行程序，输出结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">天使的外观：</div><div class=\"line\">性别：女</div><div class=\"line\">面容：漂亮</div><div class=\"line\">服装：白裙</div><div class=\"line\">发型：披肩长发</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>【参考】(作者：刘伟 <a href=\"http://blog.csdn.net/lovelion\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/lovelion</a>)</p>\n"}