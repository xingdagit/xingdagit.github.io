{"tags":[{"name":"underscore","permalink":"http://yoursite.com/tags/underscore/","url":"\\async\\tags\\underscore.json","count":2}],"categories":[],"url":"\\async\\posts\\2017\\06\\05\\underscore-Collections.json","date":1496671391000,"path":{"year":2017,"month":6,"day":5,"name":"underscore-Collections"},"title":"underscore-Collections","permalink":"http://yoursite.com/2017/06/05/underscore-Collections/","content":"<h3 id=\"Collections\"><a href=\"#Collections\" class=\"headerlink\" title=\"Collections\"></a>Collections</h3><ul>\n<li><code>underscore</code>为<code>集合类</code>(<code>集合类</code>是指<code>Array</code>和<code>Object</code>，暂不支持Map和Set)对象提供了一致的接口。</li>\n</ul>\n<p>1.map() / filter()</p>\n<ul>\n<li><code>underscore</code>和Array的map()与filter()类似，但是<code>underscore的map()和filter()</code>可以作用于<code>Object</code>。</li>\n<li>当作用于<code>Object</code>时，传入的函数为<code>function (value, key)</code>，第一个参数接收value，第二个参数接收key：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var upper = _.map(obj, function (value, key) &#123;</div><div class=\"line\">      return ???;</div><div class=\"line\">   &#125;);</div><div class=\"line\">//_.map返回结果是Array</div><div class=\"line\">//若要返回Object，把_.map换成_.mapObject就可以</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2.every() / some()</p>\n<ul>\n<li>当集合的<code>所有元素</code>都满足条件时，<code>_.every()函数</code>返回<code>true</code><br>_.every会一直遍历obj直到返回false或者遍历所有键值对直到结束返回true</li>\n<li>当集合的<code>至少一个元素</code>满足条件时，<code>_.some()函数</code>返回<code>true</code><br>_.some只要obj中有一个键值对符合要求就结束并返回true</li>\n<li><p>实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">//作用于集合Array时</div><div class=\"line\">_.every([1, 4, 7, -3, -9], (x) =&gt; x &gt; 0); //判断所有元素都大于0？false</div><div class=\"line\">_.some([1, 4, 7, -3, -9], (x) =&gt; x &gt; 0);  //判断至少一个元素大于0？true</div><div class=\"line\">//作用于集合Object时，可以同时获得value和key：</div><div class=\"line\">var obj = &#123;</div><div class=\"line\">    name: &apos;bob&apos;,</div><div class=\"line\">    school: &apos;No.1 middle school&apos;,</div><div class=\"line\">    address: &apos;xueyuan road&apos;</div><div class=\"line\">&#125;;</div><div class=\"line\">//判断key和value是否全部是小写：</div><div class=\"line\">var r1 = _.every(obj, function (value, key) &#123;</div><div class=\"line\">   return value===value.toLowerCase() &amp;&amp; key===key.toLowerCase();</div><div class=\"line\">   //也可以return (value+key) === (value+key).toLowerCase();</div><div class=\"line\">   //也可以return _.every(value+key,(x)=&gt;x&gt;&apos;a&apos;&amp;&amp;x&lt;&apos;z&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">//返回false</div><div class=\"line\">var r2 = _.some(obj, function (value, key) &#123;</div><div class=\"line\">    return value===value.toLowerCase() &amp;&amp; key===key.toLowerCase();</div><div class=\"line\">\t//也可以return (value+key) === (value+key).toLowerCase();</div><div class=\"line\">\t//也可以return _.some(value+key,(x)=&gt;x&gt;&apos;a&apos;&amp;&amp;x&lt;&apos;z&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">//返回true</div><div class=\"line\">```\t</div><div class=\"line\"></div><div class=\"line\">3.max() / min()</div><div class=\"line\">  - `max / min`两个函数分别直接返回集合中最大和最小的数：</div><div class=\"line\">  - 实例：</div></pre></td></tr></table></figure>\n<p>//作用于集合Array时<br>var arr = [3, 5, 7, 9];<br><em>.max(arr); // 9\n</em>.min(arr); // 3<br>//空集合会返回-Infinity和Infinity，所以要先判断集合不为空：<br><em>.max([])//-Infinity\n</em>.min([])//Infinity</p>\n<p>//作用于集合Object时，只作用于value，忽略掉key：<br><em>.max({ a: 1, b: 2, c: 3 }); // 3\n</em>.min({ a: 1, b: 2, c: 3 }); // 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t</div><div class=\"line\">4.groupBy()</div><div class=\"line\">  - `groupBy()`把集合的元素按照`key`归类，`key`由传入的`函数`返回;</div><div class=\"line\">  - 用来分组非常方便。</div><div class=\"line\">  - 实例：</div></pre></td></tr></table></figure>\n<p>var scores = [20, 81, 75, 40, 91, 59, 77, 66, 72, 88, 99];<br>var groups = _.groupBy(scores, function (x){<br>   if (x &lt; 60) </p>\n<pre><code>return &apos;C&apos;;\n</code></pre><p>   else if (x &lt; 80)</p>\n<pre><code>return &apos;B&apos;;\n</code></pre><p>   else</p>\n<pre><code>return &apos;A&apos;;\n</code></pre><p>});<br>// 结果:<br>// {<br>//   A: [81, 91, 88, 99],<br>//   B: [75, 77, 66, 72],<br>//   C: [20, 40, 59]<br>// }</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">6.shuffle() / sample()</div><div class=\"line\">  - `shuffle()`用洗牌算法随机打乱一个集合，且每次结果都不一样：</div><div class=\"line\">    `_.shuffle([1, 2, 3, 4, 5, 6]); `// [3, 5, 4, 6, 2, 1]</div><div class=\"line\">  - `sample()`则是随机选择`一个或多个`元素：</div></pre></td></tr></table></figure>\n<p>// 注意每次结果都不一样：<br>// 随机选1个：<br><em>.sample([1, 2, 3, 4, 5, 6]); // 2<br>// 随机选3个：\n</em>.sample([1, 2, 3, 4, 5, 6], 3); // [6, 1, 4]<br>```</p>\n</li>\n</ul>\n<ul>\n<li>更多完整<code>Collections</code>函数请参考underscore的文档：<a href=\"http://underscorejs.org/#collections\" target=\"_blank\" rel=\"external\">http://underscorejs.org/#collections</a></li>\n</ul>\n"}