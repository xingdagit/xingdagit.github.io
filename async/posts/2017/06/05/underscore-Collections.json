{"tags":[{"name":"underscore","permalink":"http://yoursite.com/tags/underscore/","url":"\\async\\tags\\underscore.json","count":5}],"categories":[],"url":"\\async\\posts\\2017\\06\\05\\underscore-Collections.json","date":1496671391000,"path":{"year":2017,"month":6,"day":5,"name":"underscore-Collections"},"title":"underscore-Collections","permalink":"http://yoursite.com/2017/06/05/underscore-Collections/","content":"<h3 id=\"Collections\"><a href=\"#Collections\" class=\"headerlink\" title=\"Collections\"></a>Collections</h3><ul>\n<li><code>underscore</code>为<code>集合类</code>(<code>集合类</code>是指<code>Array</code>和<code>Object</code>，暂不支持Map和Set)对象提供了一致的接口。</li>\n</ul>\n<p>1.map() / filter()</p>\n<ul>\n<li><code>underscore</code>和Array的map()与filter()类似，但是<code>underscore的map()和filter()</code>可以作用于<code>Object</code>。</li>\n<li>当作用于<code>Object</code>时，传入的函数为<code>function (value, key)</code>，第一个参数接收value，第二个参数接收key：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var upper = _.map(obj, function (value, key) &#123;</div><div class=\"line\">      return ???;</div><div class=\"line\">   &#125;);</div><div class=\"line\">//_.map返回结果是Array</div><div class=\"line\">//若要返回Object，把_.map换成_.mapObject就可以</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2.every() / some()</p>\n<ul>\n<li>当集合的<code>所有元素</code>都满足条件时，<code>_.every()函数</code>返回<code>true</code><br>_.every会一直遍历obj直到返回false或者遍历所有键值对直到结束返回true</li>\n<li>当集合的<code>至少一个元素</code>满足条件时，<code>_.some()函数</code>返回<code>true</code><br>_.some只要obj中有一个键值对符合要求就结束并返回true</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">//作用于集合Array时</div><div class=\"line\">_.every([1, 4, 7, -3, -9], (x) =&gt; x &gt; 0); //判断所有元素都大于0？false </div><div class=\"line\">_.some([1, 4, 7, -3, -9], (x) =&gt; x &gt; 0); //判断至少一个元素大于0？true </div><div class=\"line\">//作用于集合Object时，可以同时获得value和key： </div><div class=\"line\">var obj = &#123; name: &apos;bob&apos;, school: &apos;No.1 middle school&apos;, address: &apos;xueyuan road&apos; &#125;; </div><div class=\"line\">//判断key和value是否全部是小写： </div><div class=\"line\">var r1 = _.every(obj, function (value, key) &#123; </div><div class=\"line\">   return value===value.toLowerCase() &amp;&amp; key===key.toLowerCase(); </div><div class=\"line\">//也可以return (value+key) === (value+key).toLowerCase(); </div><div class=\"line\">//也可以return _.every(value+key,(x)=&gt;x&gt;&apos;a&apos;&amp;&amp;x&lt;&apos;z&apos;); </div><div class=\"line\">&#125;); </div><div class=\"line\">//返回false </div><div class=\"line\">var r2 = _.some(obj, function (value, key) &#123; </div><div class=\"line\">   return value===value.toLowerCase() &amp;&amp; key===key.toLowerCase(); </div><div class=\"line\">//也可以return (value+key) === (value+key).toLowerCase(); </div><div class=\"line\">//也可以return _.some(value+key,(x)=&gt;x&gt;&apos;a&apos;&amp;&amp;x&lt;&apos;z&apos;); </div><div class=\"line\">&#125;); </div><div class=\"line\">//返回true</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>3.max() / min()</p>\n<ul>\n<li><code>max / min</code>两个函数分别直接返回集合中最大和最小的数：</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//作用于集合Array时</div><div class=\"line\">var arr = [3, 5, 7, 9];</div><div class=\"line\">_.max(arr); // 9</div><div class=\"line\">_.min(arr); // 3</div><div class=\"line\">//空集合会返回-Infinity和Infinity，所以要先判断集合不为空：</div><div class=\"line\">_.max([])//-Infinity</div><div class=\"line\">_.min([])//Infinity</div><div class=\"line\"></div><div class=\"line\">   //作用于集合Object时，只作用于value，忽略掉key：</div><div class=\"line\">_.max(&#123; a: 1, b: 2, c: 3 &#125;); // 3</div><div class=\"line\">_.min(&#123; a: 1, b: 2, c: 3 &#125;); // 1</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>4.groupBy()</p>\n<ul>\n<li><code>groupBy()</code>把集合的元素按照<code>key</code>归类，<code>key</code>由传入的<code>函数</code>返回;</li>\n<li>用来分组非常方便。</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"> var scores = [20, 81, 75, 40, 91, 59, 77, 66, 72, 88, 99]; </div><div class=\"line\"> var groups = _.groupBy(scores, function (x)&#123; </div><div class=\"line\">   if (x &lt; 60) </div><div class=\"line\">  return &apos;C&apos;; </div><div class=\"line\">else if (x &lt; 80) </div><div class=\"line\">  return &apos;B&apos;; </div><div class=\"line\">else </div><div class=\"line\">  return &apos;A&apos;; </div><div class=\"line\"> &#125;); </div><div class=\"line\"> // 结果: </div><div class=\"line\"> // &#123; </div><div class=\"line\"> //   A: [81, 91, 88, 99], </div><div class=\"line\"> //   B: [75, 77, 66, 72], </div><div class=\"line\"> //   C: [20, 40, 59] </div><div class=\"line\"> // &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>5.shuffle() / sample()</p>\n<ul>\n<li><code>shuffle()</code>用洗牌算法随机打乱一个集合，且每次结果都不一样：<br><code>_.shuffle([1, 2, 3, 4, 5, 6]);</code>// [3, 5, 4, 6, 2, 1]</li>\n<li><code>sample()</code>则是随机选择<code>一个或多个</code>元素：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 注意每次结果都不一样：</div><div class=\"line\">// 随机选1个：</div><div class=\"line\">_.sample([1, 2, 3, 4, 5, 6]); // 2</div><div class=\"line\">// 随机选3个：</div><div class=\"line\">_.sample([1, 2, 3, 4, 5, 6], 3); // [6, 1, 4]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>更多完整<code>Collections</code>函数请参考underscore的文档：<a href=\"http://underscorejs.org/#collections\" target=\"_blank\" rel=\"external\">http://underscorejs.org/#collections</a></li>\n</ul>\n"}