{"tags":[{"name":"JS","permalink":"http://yoursite.com/tags/JS/","url":"\\async\\tags\\JS.json","count":17}],"categories":[],"url":"\\async\\posts\\2017\\06\\05\\JS-错误处理.json","date":1496625742000,"path":{"year":2017,"month":6,"day":5,"name":"JS-错误处理"},"title":"JS-错误处理","permalink":"http://yoursite.com/2017/06/05/JS-错误处理/","content":"<p>一、在执行JavaScript代码的时候，有些情况下会发生错误。<br>二、错误分两种：</p>\n<ol>\n<li><p>一种是程序写的逻辑不对，导致代码执行异常。对于这种错误，要修复程序。<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var s = null;</div><div class=\"line\">var len = s.length; // TypeError：null变量没有length属性</div></pre></td></tr></table></figure>\n</li>\n<li><p>一种是执行过程中，程序可能遇到无法预测的异常情况而报错。<br>例如，网络连接中断，读取不存在的文件，没有操作权限等。<br>对于这种错误，就需要处理它，并可能需要给用户反馈。</p>\n</li>\n</ol>\n<p>三、错误处理是程序设计时必须要考虑的问题。有些贴近系统底层的语言(如C)，错误是通过错误码返回的，不过这种方式表示错误在编写程序时十分不便。因此，高级语言通常都提供了更抽象的错误处理逻辑：<code>try ... catch ... finally</code>，JavaScript也不例外。</p>\n<ul>\n<li><p>使用<code>try ... catch ... finally</code>处理错误时，上例代码编写如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var r1, r2, s = null;</div><div class=\"line\">try</div><div class=\"line\">&#123;</div><div class=\"line\">  r1 = s.length; // 此处应产生错误</div><div class=\"line\">  r2 = 100; // 该语句不会执行</div><div class=\"line\">&#125; </div><div class=\"line\">catch (e)</div><div class=\"line\">&#123;</div><div class=\"line\">  alert(&apos;出错了：&apos; + e);</div><div class=\"line\">&#125;</div><div class=\"line\">finally </div><div class=\"line\">&#123;</div><div class=\"line\">  console.log(&apos;finally&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(&apos;r1 = &apos; + r1); // r1应为undefined</div><div class=\"line\">console.log(&apos;r2 = &apos; + r2); // r2应为undefined</div></pre></td></tr></table></figure>\n<p>运行后可发现，弹出的Alert提示类似“出错了：TypeError: Cannot read property ‘length’ of null”。</p>\n</li>\n<li><p>try … catch … finally的执行流程</p>\n<ul>\n<li><code>try { ... }</code>包裹的那部分代码表示在执行过程中可能会发生错误，一旦发生错误就不再继续执行后续代码，转而跳到catch块。</li>\n<li><code>catch (e) { ... }</code>包裹的代码就是错误处理代码，变量<code>e</code>表示捕获到的错误。</li>\n<li>最后，无论有没有错误，finally一定会被执行。</li>\n<li>总结执行流程：<ol>\n<li>先执行<code>try { ... }</code>的代码；</li>\n<li>有错误发生时，执行到出错的语句，后续语句不再继续执行，转而执行<code>catch (e) { ... }</code>代码；没有错误发生时，<code>catch (e) { ... }</code>代码不会被执行；</li>\n<li>最后执行`finally { … }代码。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p><code>catch</code>和<code>finally</code>可以不必都出现。即try语句一共有三种形式：</p>\n<ol>\n<li>完整的<code>try ... catch ... finally</code></li>\n<li>只有<code>try ... catch，没有finally</code></li>\n<li>只有<code>try ... finally，没有catch</code></li>\n</ol>\n</li>\n</ul>\n<p>四、错误类型<br>JavaScript有一个标准的<code>Error对象</code>表示错误，还有从<code>Error</code>派生的<code>TypeError、ReferenceError</code>等错误对象。在处理错误时，可以通过<code>catch(e)</code>捕获的<code>变量e</code>（也可以用其他变量名命名）来访问错误对象。<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">try &#123;</div><div class=\"line\">   ...</div><div class=\"line\">&#125; </div><div class=\"line\">catch (e)&#123;</div><div class=\"line\">   if (e instanceof TypeError) </div><div class=\"line\">   &#123;</div><div class=\"line\">      alert(&apos;Type error!&apos;);</div><div class=\"line\">   &#125;</div><div class=\"line\">   else if (e instanceof Error) </div><div class=\"line\">   &#123;</div><div class=\"line\">      alert(e.message);</div><div class=\"line\">   &#125;</div><div class=\"line\">   else </div><div class=\"line\">   &#123;</div><div class=\"line\">      alert(&apos;Error: &apos; + e);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>五、抛出错误</p>\n<ul>\n<li>程序也可以主动抛出一个错误，让执行流程直接跳转到<code>catch</code>块。</li>\n<li>抛出错误使用<code>throw</code>语句。</li>\n<li>JavaScript允许抛出任意对象，包括数字、字符串。但最好还是抛出一个<code>Error</code>对象。</li>\n<li><p>例如下面的代码让用户输入一个数字，程序接收到的实际上是一个字符串，然后用parseInt()转换为整数。当用户输入不合法的时，就抛出错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var r, n, s;</div><div class=\"line\">try </div><div class=\"line\">&#123;</div><div class=\"line\">    s = prompt(&apos;请输入一个数字&apos;);</div><div class=\"line\">    n = parseInt(s);</div><div class=\"line\">    if (isNaN(n)) </div><div class=\"line\">    &#123;</div><div class=\"line\">        throw new Error(&apos;输入错误&apos;);// 主动抛出错误</div><div class=\"line\">    &#125;</div><div class=\"line\">    // 计算平方:</div><div class=\"line\">    r = n * n;</div><div class=\"line\">    alert(n + &apos; * &apos; + n + &apos; = &apos; + r);</div><div class=\"line\">&#125; </div><div class=\"line\">catch (e) &#123;</div><div class=\"line\">    alert(&apos;出错了：&apos; + e);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>实际上JavaScript允许抛出任意对象，包括数字、字符串。但最好还是抛出一个<code>Error</code>对象。</p>\n</li>\n<li>当用<code>catch</code>捕获错误时，一定要编写错误处理语句。哪怕仅仅把错误打印出来（<code>console.log(e);</code>），也不要什么也不干。</li>\n</ul>\n<p>六、错误传播</p>\n<ul>\n<li>如果在一个函数内部发生了错误，它自身没有捕获，错误就会被抛到外层调用函数；如果外层函数也没有捕获，该错误会一直沿着函数调用链向上抛出，直到被JavaScript引擎捕获，代码终止执行。</li>\n<li>所以不必在每一个函数内部捕获错误，只需要在合适的地方来个统一捕获，一网打尽。至于在哪些地方捕获错误比较合适，需要视情况而定。</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">//3.main()函数有try ... catch语句，所以错误最终在main()函数被处理了</div><div class=\"line\">function main(s)</div><div class=\"line\">&#123;</div><div class=\"line\">    console.log(&apos;BEGIN main()&apos;);</div><div class=\"line\">    try &#123;</div><div class=\"line\">        foo(s);</div><div class=\"line\">    &#125; </div><div class=\"line\">    catch (e) &#123;</div><div class=\"line\">      alert(&apos;出错了：&apos; + e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(&apos;END main()&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//2. foo()函数没有try ... catch语句，所以错误继续向上抛给调用方main()函数</div><div class=\"line\">function foo(s)  </div><div class=\"line\">&#123;</div><div class=\"line\">  console.log(&apos;BEGIN foo()&apos;);</div><div class=\"line\">  bar(s); </div><div class=\"line\">  console.log(&apos;END foo()&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//1.当bar()函数传入参数null时代码会报错，错误会向上抛给调用方foo()函数</div><div class=\"line\">function bar(s)</div><div class=\"line\">&#123;</div><div class=\"line\">  console.log(&apos;BEGIN bar()&apos;);</div><div class=\"line\">  console.log(&apos;length = &apos; + s.length); </div><div class=\"line\">  console.log(&apos;END bar()&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">main(null);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>七、异步错误处理</p>\n<ul>\n<li>JavaScript引擎是一个事件驱动的执行引擎，代码总是以单线程执行，而回调函数的执行需要等到下一个满足条件的事件出现后，才会被执行。</li>\n<li><p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//先执行打印done操作，1秒后才会执行回调函数printTime()</div><div class=\"line\">function printTime() &#123;</div><div class=\"line\">  console.log(&apos;It is time!&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\">setTimeout(printTime, 1000);</div><div class=\"line\">console.log(&apos;done&apos;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>如上面<code>printTime()函数</code>内部发生了错误，用<code>try</code>包裹<code>setTimeout()</code>是无效的。原因就在于调用<code>setTimeout()函数</code>时，传入的<code>printTime函数</code>并未立刻执行！紧接着，JavaScript引擎会继续执行<code>console.log(&#39;done&#39;);</code>语句，而此时并没有错误发生。直到1秒钟后，执行<code>printTime函数</code>时才发生错误，但此时除了在<code>printTime函数</code>内部捕获错误外，外层代码并无法捕获。</p>\n</li>\n<li>所以，涉及到异步代码，无法在调用时捕获的原因就是<code>捕获时回调函数并未执行</code>。因此异步代码要在<code>函数内部</code>捕获错误!</li>\n<li>类似地当处理一个事件时，在绑定事件的代码处(外面)无法捕获事件处理函数的错误。所以要在事件处理函数<code>内部</code>对相应语句进行捕获。</li>\n</ul>\n"}