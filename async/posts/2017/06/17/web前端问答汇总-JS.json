{"tags":[{"name":"JS","permalink":"http://yoursite.com/tags/JS/","url":"\\async\\tags\\JS.json","count":15},{"name":"面试","permalink":"http://yoursite.com/tags/面试/","url":"\\async\\tags\\面试.json","count":3}],"categories":[],"url":"\\async\\posts\\2017\\06\\17\\web前端问答汇总-JS.json","date":1497681893000,"path":{"year":2017,"month":6,"day":17,"name":"web前端问答汇总-JS"},"title":"web前端问答汇总--JS","permalink":"http://yoursite.com/2017/06/17/web前端问答汇总-JS/","content":"<p>整理汇总一下常见的一些web前端问答知识点<br>继续整理：<br><a href=\"http://www.qdfuns.com/notes/40893/9ddac6bdbcd5e02e9a6dad08441ff0a8.html\" target=\"_blank\" rel=\"external\">http://www.qdfuns.com/notes/40893/9ddac6bdbcd5e02e9a6dad08441ff0a8.html</a></p>\n<hr>\n<h3 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h3><p><code>javascript的typeof返回哪些数据类型</code><br>Object number function boolean underfind</p>\n<p><code>例举3种强制类型转换和2种隐式类型转换?</code><br>强制（parseInt,parseFloat,number）<br>隐式（== – ===）</p>\n<p><code>split() join() 的区别</code><br>前者是切割成数组的形式，后者是将数组转换成字符串</p>\n<p><code>数组方法pop() push() unshift() shift()</code><br>Push()尾部添加 pop()尾部删除<br>Unshift()头部添加 shift()头部删除</p>\n<p><code>事件绑定和普通事件有什么区别</code><br>暂空</p>\n<p><code>IE和DOM事件流的区别</code><br>1.执行顺序不一样、<br>2.参数不一样<br>3.事件加不加on<br>4.this指向问题</p>\n<p><code>IE和标准下有哪些兼容性的写法</code><br>Var ev = ev || window.event<br>document.documentElement.clientWidth || document.body.clientWidth<br>Var target = ev.srcElement||ev.target</p>\n<p>`ajax请求的时候get和post方式的区别<br>一个在url后面 一个放在虚拟载体里面<br>有大小限制<br>安全问题<br>应用不同 一个是论坛等只需要请求的，一个是类似修改密码的</p>\n<p><code>call和apply的区别</code><br>Object.call(this,obj1,obj2,obj3)<br>Object.apply(this,arguments)</p>\n<p><code>ajax请求时，如何解释json数据</code><br>使用eval parse 鉴于安全性考虑 使用parse更靠谱</p>\n<p><code>JS继承与原型问题</code><br>Js所有的函数都有一个prototype属性，这个属性引用了一个对象，即原型对象，也简称原型。每一个对象都有原型，在浏览器中它体现在一个隐藏的 proto 属性上。<br>当一个对象需要调用某个方法时，它回去最近的原型上查找该方法，如果没有找到，它会再次往下继续查找。这样逐级查找，一直找到了要找的方法。 这些查找的原型构成了该对象的原型链条。原型最后指向的是null。我们说的原型继承，就是将父对像的方法给子类的原型。子类的构造函数中不拥有这些方法和属性。</p>\n<p><code>Javascript中callee和caller的作用？</code><br>caller是返回一个对函数的引用，该函数调用了当前函数；<br>callee是返回正在被执行的function函数，也就是所指定的function对象的正文。</p>\n<p><code>事件委托是什么</code><br>让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！<br>例子可见此链接<a href=\"http://www.webasily.com/?p=78\" target=\"_blank\" rel=\"external\">http://www.webasily.com/?p=78</a> </p>\n<p><code>闭包是什么，有什么特性，对页面有什么影响</code><br>闭包：指能够读取其他函数内部变量的函数。函数能被外部调用到，则该作用链上的所有变量都会被保存下来。<br>作用：<br>①可以读取函数内部的变量;<br>②相当于划出了一块私有作用域，避免数据污染;<br>③让变量始终保存在内存中<br>使用全局变量被认为是不好的习惯，而且容易造成错误并且维护成本较高，所以js可以采用闭包的方式读取函数的内部变量。<br>但是如果大量使用闭包就会造成过多的变量始终保存在内存中，会造成内存泄漏。<br>一个简单的闭包例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function f1()</div><div class=\"line\">&#123; </div><div class=\"line\">   var n=999; </div><div class=\"line\">   function f2()</div><div class=\"line\">   &#123; </div><div class=\"line\">      alert(n); </div><div class=\"line\">   &#125; </div><div class=\"line\">   return f2; </div><div class=\"line\">&#125; </div><div class=\"line\">var result=f1(); </div><div class=\"line\">result(); // 999</div></pre></td></tr></table></figure></p>\n<p>详看<a href=\"http://blog.csdn.net/gaoshanwudi/article/details/7355794\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/gaoshanwudi/article/details/7355794</a></p>\n<p><code>如何阻止事件冒泡和默认事件</code><br>canceBubble return false</p>\n<p><code>怎样添加、移除、移动、复制、创建和查找节点？</code><br>1）创建新节点<br>createDocumentFragment() //创建一个DOM片段<br>createElement() //创建一个具体的元素<br>createTextNode() //创建一个文本节点<br>2）添加、移除、替换、插入<br>appendChild() //添加<br>removeChild() //移除<br>replaceChild() //替换<br>insertBefore() //插入<br>3）查找<br>getElementsByTagName() //通过标签名称<br>getElementsByName() //通过元素的Name属性的值<br>getElementById() //通过元素Id，唯一性</p>\n<p><code>js中this的工作原理</code><br>①全局范围内：指向全局对象; this;<br>②函数调用：指向全局对象 foo();<br>③方法调用：this指向test对象 test.foo();<br>④调用构造函数：this指向新创建的对象 new foo();<br>⑤显式的设置this：<br>使用call或者apply方法时，this指向第一个参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(a, b, c) &#123;&#125; </div><div class=\"line\">var bar = &#123;&#125;; </div><div class=\"line\">foo.apply(bar, [1, 2, 3]); // 数组将会被扩展，如下所示 </div><div class=\"line\">foo.call(bar, 1, 2, 3); // 传递到foo的参数是：a = 1, b = 2, c = 3</div></pre></td></tr></table></figure></p>\n<p><code>请描述一下cookies，sessionStorage和localStorage的区别</code><br>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。<br>web storage和cookie的区别:<br>Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。<br>Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。<br>除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。</p>\n<p><code>解释jsonp的原理，以及为什么不是真正的ajax</code><br>JSONP(JSON with Padding)是一个非官方的协议，它允许在服务器端集成Script tags(动态创建script标签)返回至客户端，通过javascript callback(回调函数)的形式实现跨域访问。<br>由于同源策略的限制，XmlHttpRequest只允许请求当前源(域名、协议、端口)的资源，为了实现跨域请求，可以通过script标签实现跨域请求(因为同源策略不阻止动态脚本插入，并且将脚本看作是从提供 Web 页面的域上加载的)，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。<br>Ajax是页面无刷新请求数据操作</p>\n<p><code>javascript的本地对象，内置对象和宿主对象</code><br>本地对象为array obj regexp等可以new实例化<br>内置对象为gload Math 等不可以实例化的<br>宿主为浏览器自带的document,window 等</p>\n<p><code>document load 和document ready的区别</code><br>Document.onload 是在结构和样式加载完才执行js<br>Document.ready原生种没有这个方法，jquery中有 $().ready(function)</p>\n<p><code>”==”和“===”的不同</code><br>前者会自动转换类型<br>后者不会，检测时不同类型返回false</p>\n<p><code>JS和JAVA的作用域有什么区别</code><br>java是块级作用域;而js是函数作用域，没有块级作用域。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//js代码：</div><div class=\"line\">var name=&quot;global&quot;; </div><div class=\"line\">if(true)</div><div class=\"line\">&#123; </div><div class=\"line\">   var name=&quot;local&quot;; </div><div class=\"line\">   console.log(name) </div><div class=\"line\">&#125; </div><div class=\"line\">console.log(name);</div><div class=\"line\">//这段都输出是“local&quot;</div><div class=\"line\">//如果有块级作用域，if语句将创建局部变量name,并不会修改全局变量name</div><div class=\"line\">//可是Js没有块级作用域，所以值被覆盖为“local”了。</div></pre></td></tr></table></figure></p>\n<p><code>javascript的同源策略</code><br>一段脚本只能读取来自于同一来源的窗口和文档的属性，这里的同一来源指的是主机名、协议和端口号的组合</p>\n<p><code>跨域请求资源的方法有哪些？</code></p>\n<p><code>谈谈垃圾回收机制方式及内存管理</code></p>\n<p><code>开发过程中遇到的内存泄露情况，如何解决的？</code></p>\n<p><code>在Javascript中什么是伪数组？如何将伪数组转化为标准数组？</code><br>伪数组（类数组）：无法直接调用数组方法或期望length属性有什么特殊的行为，但仍可以对真正数组遍历方法来遍历它们。<br>典型的是函数的argument参数，还有像调用getElementsByTagName,document.childNodes之类的,它们都返回NodeList对象都属于伪数组。<br>可以使用Array.prototype.slice.call(fakeArray)将数组转化为真正的Array对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function log()</div><div class=\"line\">&#123; </div><div class=\"line\">  var args = Array.prototype.slice.call(arguments); //为了使用unshift数组方法，将argument转化为真正的数组 </div><div class=\"line\">  args.unshift(&apos;(app)&apos;); </div><div class=\"line\">  console.log.apply(console, args); </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><code>使用原生js实现ajax</code><br>创建一个 XMLHttpRequest 对象。如果不支持创建该对象的浏览器，则需要创建 ActiveXObject，具体方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">var xmlHttpRequest; </div><div class=\"line\">function createXmlHttpRequest()</div><div class=\"line\">&#123; </div><div class=\"line\">   if(window.XMLHttpRequest)//非IE </div><div class=\"line\">      xmlHttpRequest = new XMLHttpRequest(); </div><div class=\"line\">   else if(window.ActiveObject)//IE6+ </div><div class=\"line\">      xmlHttpRequest = new ActiveObject(&quot;Msxml2.XMLHTTP&quot;); </div><div class=\"line\">   else//IE6- </div><div class=\"line\">      xmlHttpRequest = new ActiveObject(&quot;Microsoft.XMLHTTP&quot;); </div><div class=\"line\">&#125; </div><div class=\"line\">提交请求的方法： </div><div class=\"line\">open(method,url);//分别为提交的方法(GET或者POST)和提交的url </div><div class=\"line\">send(content); </div><div class=\"line\">onreadystatechange()</div><div class=\"line\">&#123; </div><div class=\"line\">   if(xmlHttpRequest.readyState == 4)</div><div class=\"line\">   &#123; </div><div class=\"line\">     if(xmlHttpRequest.state == 200)</div><div class=\"line\">\t &#123; </div><div class=\"line\">\t   //请求成功 </div><div class=\"line\">\t &#125; </div><div class=\"line\">   &#125;</div><div class=\"line\">   else</div><div class=\"line\">   &#123; </div><div class=\"line\">     //请求失败 </div><div class=\"line\">   &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>写一个获取非行间样式的函数</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getStyle(obj,attr,value)</div><div class=\"line\">&#123;</div><div class=\"line\">  if(!value)</div><div class=\"line\">  &#123;</div><div class=\"line\">    if(obj.currentStyle)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t  return obj.currentStyle(attr)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\telse</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t  obj.getComputedStyle(attr,false)</div><div class=\"line\">\t&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  else</div><div class=\"line\">  &#123;</div><div class=\"line\">    obj.style[attr]=value</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>统计字符串中字母个数或统计最多字母数。</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = &quot;aaaabbbccccddfgh&quot;; </div><div class=\"line\">var obj = &#123;&#125;; </div><div class=\"line\">for(var i=0;i&lt;str.length;i++)</div><div class=\"line\">&#123; </div><div class=\"line\">   var v = str.charAt(i); </div><div class=\"line\">   if(obj[v] &amp;&amp; obj[v].value == v)</div><div class=\"line\">   &#123; </div><div class=\"line\">      obj[v].count = ++ obj[v].count; </div><div class=\"line\">   &#125;</div><div class=\"line\">   else</div><div class=\"line\">   &#123; </div><div class=\"line\">      obj[v] = &#123;&#125;; obj[v].count = 1; </div><div class=\"line\">\t  obj[v].value = v; </div><div class=\"line\">   &#125; </div><div class=\"line\">&#125; </div><div class=\"line\">for(key in obj)</div><div class=\"line\">&#123; </div><div class=\"line\">  document.write(obj[key].value +&apos;=&apos;+obj[key].count+&apos;&amp;nbsp;&apos;); </div><div class=\"line\">  // a=4 b=3 c=4 d=2 f=1 g=1 h=1 </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制。</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">/** </div><div class=\"line\">* 对象克隆 </div><div class=\"line\">* 支持基本数据类型及对象 </div><div class=\"line\">* 递归方法 </div><div class=\"line\">*/ </div><div class=\"line\">function clone(obj) </div><div class=\"line\">&#123; </div><div class=\"line\">   var o; </div><div class=\"line\">   switch (typeof obj) </div><div class=\"line\">   &#123; </div><div class=\"line\">      case &quot;undefined&quot;: </div><div class=\"line\">\t     break; </div><div class=\"line\">\t  case &quot;string&quot;: </div><div class=\"line\">\t     o = obj + &quot;&quot;; </div><div class=\"line\">\t\t break; </div><div class=\"line\">\t  case &quot;number&quot;: </div><div class=\"line\">\t     o = obj - 0; </div><div class=\"line\">\t\t break; </div><div class=\"line\">\t  case &quot;boolean&quot;: </div><div class=\"line\">\t     o = obj; </div><div class=\"line\">\t\t break; </div><div class=\"line\">\t  case &quot;object&quot;: // object 分为两种情况 对象（Object）或数组（Array） </div><div class=\"line\">\t    if (obj === null) </div><div class=\"line\">\t\t&#123; </div><div class=\"line\">\t\t   o = null; </div><div class=\"line\">\t\t&#125; </div><div class=\"line\">\t\telse </div><div class=\"line\">\t\t&#123; </div><div class=\"line\">\t\t   if (Object.prototype.toString.call(obj).slice(8, -1) === &quot;Array&quot;) </div><div class=\"line\">\t\t   &#123; </div><div class=\"line\">\t\t      o = []; </div><div class=\"line\">\t\t\t  for (var i = 0; i &lt; obj.length; i++) </div><div class=\"line\">\t\t\t  &#123; </div><div class=\"line\">\t\t\t     o.push(clone(obj[i])); </div><div class=\"line\">\t\t\t  &#125; </div><div class=\"line\">\t\t   &#125; </div><div class=\"line\">\t\t   else </div><div class=\"line\">\t\t   &#123; </div><div class=\"line\">\t\t      o = &#123;&#125;; </div><div class=\"line\">\t\t\t  for (var k in obj) </div><div class=\"line\">\t\t\t  &#123; </div><div class=\"line\">\t\t\t     o[k] = clone(obj[k]); </div><div class=\"line\">\t\t\t  &#125; </div><div class=\"line\">\t\t   &#125; </div><div class=\"line\">\t\t&#125; </div><div class=\"line\">\t\tbreak; </div><div class=\"line\">\t  default: </div><div class=\"line\">\t    o = obj; </div><div class=\"line\">\t\tbreak; </div><div class=\"line\">\t&#125; </div><div class=\"line\">\treturn o; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>编写一个数组去重的方法</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">//方法1</div><div class=\"line\">function oSort(arr)</div><div class=\"line\">&#123;</div><div class=\"line\">  var result =&#123;&#125;;</div><div class=\"line\">  var newArr=[];</div><div class=\"line\">  for(var i=0;i&lt;arr.length;i++)</div><div class=\"line\">  &#123;</div><div class=\"line\">    if(!result[arr])</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t  newArr.push(arr)</div><div class=\"line\">\t  result[arr]=1</div><div class=\"line\">\t&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return newArr</div><div class=\"line\">&#125;</div><div class=\"line\">//方法2</div><div class=\"line\">var </div><div class=\"line\">  arr1 =[1,2,2,2,3,3,3,4,5,6], </div><div class=\"line\">  arr2 = []; </div><div class=\"line\">for(var i = 0,len = arr1.length; i&lt; len; i++)</div><div class=\"line\">&#123; </div><div class=\"line\">   if(arr2.indexOf(arr1[i]) &lt; 0)</div><div class=\"line\">   &#123; </div><div class=\"line\">      arr2.push(arr1[i]); </div><div class=\"line\">   &#125; </div><div class=\"line\">&#125; </div><div class=\"line\">document.write(arr2); // 1,2,3,4,5,6</div></pre></td></tr></table></figure></p>\n<hr>\n<p>参考出处：<a href=\"http://www.offcn.com/it/\" target=\"_blank\" rel=\"external\">http://www.offcn.com/it/</a></p>\n"}