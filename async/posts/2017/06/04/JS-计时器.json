{"tags":[{"name":"JS","permalink":"http://yoursite.com/tags/JS/","url":"\\async\\tags\\JS.json","count":14}],"categories":[],"url":"\\async\\posts\\2017\\06\\04\\JS-计时器.json","date":1496559983000,"path":{"year":2017,"month":6,"day":4,"name":"JS-计时器"},"title":"JS-计时器","permalink":"http://yoursite.com/2017/06/04/JS-计时器/","content":"<p>在JavaScript中，我们可以在设定的时间间隔之后来执行代码，而不是一定要在函数被调用后立即执行。</p>\n<ul>\n<li><p>计时器类型：<br>1)一次性计时器：仅在指定的延迟时间之后触发一次。<br>2)间隔性触发计时器：每隔一定的时间间隔就触发一次。</p>\n</li>\n<li><p>计时器方法：<br>1)<code>setTimeout( 要调用的函数或要执行的代码串, 延时时间 )</code>：</p>\n<ul>\n<li>指定时间后执行；</li>\n<li>返回值为一个可以传递给<code>clearTimeout ()</code>来取消对”代码”的周期性执行的值; </li>\n<li>延时时间以毫秒ms计(1s=1000ms)； </li>\n<li>调用函数格式：<code>setTimeout (&quot;clock()&quot;,1000)</code>或<code>setTimeout (clock,1000)</code></li>\n</ul>\n<p>2)<code>clearTimeout(id_of_setTimeout)</code>：清除setTimeout()设置<br>3)<code>setinterval( 要调用的函数或要执行的代码串, 时间间隔 )</code>：</p>\n<ul>\n<li>每隔指定时间就执行一次；</li>\n<li>返回值为一个可以传递给<code>clearInterval()</code>来取消对”代码”的周期性执行的值;</li>\n<li>时间间隔以毫秒ms计(1s=1000ms)；</li>\n<li>调用函数格式：<code>setInterval(&quot;clock()&quot;,1000)</code>或<code>setInterval(clock,1000)</code></li>\n</ul>\n<p>4)<code>clearinterval(id_of_setInterval)</code>：取消setinterval()设置</p>\n</li>\n</ul>\n"}