{"tags":[{"name":"jQuery","permalink":"http://yoursite.com/tags/jQuery/","url":"\\async\\tags\\jQuery.json","count":9}],"categories":[],"url":"\\async\\posts\\2017\\06\\04\\jQuery-样式.json","date":1496582501000,"path":{"year":2017,"month":6,"day":4,"name":"jQuery-样式"},"title":"jQuery-样式","permalink":"http://yoursite.com/2017/06/04/jQuery-样式/","content":"<h3 id=\"jQuery操作样式\"><a href=\"#jQuery操作样式\" class=\"headerlink\" title=\"jQuery操作样式\"></a>jQuery操作样式</h3><ul>\n<li>用选择器拿到了jQuery对象之后做什么呢——–可以操作样式</li>\n<li>每个元素都有一个或者多个特性，这些特性的用途就是给出相应元素或者其内容的附加信息。<br>如：在img元素中，src就是元素的特性，用来标记图片的地址。</li>\n<li>通过动态改变类名（class），可以让其修改元素呈现出不同的效果。<br>在HTML结构中里，多个class以空格分隔，当一个节点（或称为一个标签）含有多个class时，DOM元素响应的className属性获取的不是class名称的数组，而是一个含有空格的字符串，这就使得多class操作变得很麻烦。<br>同样的jQuery开发者也考虑到这种情况，增加了一个一系列操作class属性的方法。</li>\n</ul>\n<h3 id=\"1-增加样式（通过操作class属性）\"><a href=\"#1-增加样式（通过操作class属性）\" class=\"headerlink\" title=\"1.增加样式（通过操作class属性）\"></a>1.增加样式（通过操作class属性）</h3><ul>\n<li><code>.addClass()方法</code>：用于动态增加class类名</li>\n<li>语法：<br>1)<code>addClass( className )</code>：为每个匹配元素所要增加的一个或多个样式名<br>2)<code>addClass( function(index, currentClass) )</code>: 这个函数返回一个或更多用空格隔开的要增加的样式名(index参数表示元素在匹配集合中的索引位置) </li>\n<li>注意：<br><code>addClass()方法</code>不会替换一个样式类名。它只是简单的添加一个样式类名到元素上</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&apos;.left div&apos;).addClass(&apos;newClass&apos;)//对class=left下div元素增加一个新的样式，增加背景颜色</div><div class=\"line\"></div><div class=\"line\">//找到所有的div，然后根据返回的className的判断，再通过addClass添加新样式：</div><div class=\"line\">$(&quot;div&quot;).addClass(function(index,className)&#123; </div><div class=\"line\">if(-1 !== className.indexOf(&apos;imooc&apos;))//找到类名中包含了imooc的元素 </div><div class=\"line\">&#123;  </div><div class=\"line\">   $(this).addClass(&apos;imoocClass&apos;) //this指向匹配元素集合中的当前元素</div><div class=\"line\">&#125; </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-删除样式（通过操作class属性）\"><a href=\"#2-删除样式（通过操作class属性）\" class=\"headerlink\" title=\"2.删除样式（通过操作class属性）\"></a>2.删除样式（通过操作class属性）</h3><ul>\n<li><code>removeClass( )方法</code>：用于从匹配的元素中删除全部或者指定的class</li>\n<li>语法：<br>1)<code>removeClass( [className ] )</code>：每个匹配元素移除的一个或多个用空格隔开的样式名<br>2)<code>removeClass( function(index, class) )</code>： 一个函数，返回一个或多个将要被移除的样式名</li>\n<li>注意：<br>如果一个样式类名作为一个参数,只有这样式类会被从匹配的元素集合中删除。如果没有样式名作为参数，那么所有的样式类将被移除</li>\n</ul>\n<h3 id=\"3-切换样式（通过操作class属性）\"><a href=\"#3-切换样式（通过操作class属性）\" class=\"headerlink\" title=\"3.切换样式（通过操作class属性）\"></a>3.切换样式（通过操作class属性）</h3><ul>\n<li><code>toggleClass( )方法</code>：动态互斥切换(添加删除)Class。(一次执行相当于addClass，再次执行相当于removeClass)</li>\n<li>语法：<br>1)<code>toggleClass( className )</code>：在匹配的元素集合中的每个元素上用来切换的一个或多个（用空格隔开）样式类名<br>2)<code>toggleClass( className, switch )</code>：一个布尔值，用于判断样式是否应该被添加或移除<br>3)<code>toggleClass( [switch ] )</code>：一个用来判断样式类添加还是移除的 布尔值<br>4)<code>toggleClass( function(index, class, switch) [, switch ] )</code>：用来返回在匹配的元素集合中的每个元素上用来切换的样式类名的一个函数。接收元素的索引位置和元素旧的样式类作为参数</li>\n<li>注意：<br>1)在匹配的元素集合中的每个元素上添加或删除一个或多个样式类,取决于这个样式类是否存在或值切换属性。即：如果存在（不存在）就删除（添加）一个类<br>2)toggleClass是一个互斥的逻辑，也就是通过判断对应的元素上是否存在指定的Class名，如果有就删除，如果没有就增加<br>3)toggleClass会保留原有的Class名后新增，通过空格隔开</li>\n<li>hasClass( className )方法`：是否包含指定class（返回true或false）</li>\n</ul>\n<h3 id=\"4-修改Text和HTML\"><a href=\"#4-修改Text和HTML\" class=\"headerlink\" title=\"4.修改Text和HTML\"></a>4.修改Text和HTML</h3><ul>\n<li>读取、修改元素的html结构或者元素的文本内容是常见的对于样式的DOM操作，jQuery针对这样的处理提供了2个便捷的方法<code>.html()</code>与<code>.text()</code>。</li>\n<li><code>text()</code>方法：<br>获取匹配元素集合中每个元素（包括他们的后代）的文本内容结合，或匹配元素集合中每个元素的文本内容为指定的文本内容；<br>结果返回一个字符串，包含所有匹配元素的合并文本；<br>语法：<br> 1)<code>text()</code>得到匹配元素集合中每个元素的合并文本，包括他们的后代<br> 2)<code>text( textString )</code>用于设置匹配元素内容的文本<br> 3)<code>text( function(index, text) )</code>用来返回设置文本内容的一个函数</li>\n<li><code>html()</code>方法：<br>获取集合中第一个匹配元素的HTML内容，或设置每一个匹配元素的html内容；<br>内部使用的是DOM的<code>innerHTML属性</code>来处理的，所以在设置与获取上需要注意：这个操作是针对<code>整个HTML内容</code>（不仅仅只是文本内容）;<br>语法：<br> 1)<code>html()</code>不传入值，就是获取集合中第一个匹配元素的HTML内容<br> 2)<code>html( htmlString )</code>设置每一个匹配元素的html内容<br> 3)<code>html( function(index, oldhtml) )</code>用来返回设置HTML内容的一个函数</li>\n<li><code>html()</code>与<code>text()</code>的异同:<br> 1)<code>html()</code>与<code>text()</code>的方法操作是一样，只是在具体针对处理对象不同<br> 2)<code>html()</code>处理的是元素内容，<code>text()</code>处理的是文本内容<br> 3)<code>html()</code>只能使用在HTML文档中，<code>text()</code>在XML 和 HTML 文档中都能使用<br> 4)如果处理的对象只有一个子文本节点，那么<code>html()</code>处理的结果与<code>text()</code>是一样的<br> 5)火狐不支持<code>innerText属性</code>，用了类似的textContent属性，<code>text()</code>方法综合了2个属性的支持，所以可以兼容所有浏览器</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- HTML结构 --&gt;</div><div class=\"line\">&lt;ul id=&quot;test-ul&quot;&gt;</div><div class=\"line\">  &lt;li class=&quot;js&quot;&gt;JavaScript&lt;/li&gt;</div><div class=\"line\">  &lt;li name=&quot;book&quot;&gt;Java &amp;amp; JavaScript&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\">//分别获取文本和HTML：</div><div class=\"line\">$(&apos;#test-ul li[name=book]&apos;).text(); // &apos;Java &amp; JavaScript&apos;</div><div class=\"line\">$(&apos;#test-ul li[name=book]&apos;).html(); // &apos;Java &amp;amp; JavaScript&apos;</div><div class=\"line\">//分别设置文本和HTML：</div><div class=\"line\">$(&apos;#test-ul li[name=book]&apos;). text(&apos;JavaScript &amp; ECMAScript&apos;);</div><div class=\"line\">$(&apos;#test-ul li.js&apos;)..html(&apos;&lt;span style=&quot;color: red&quot;&gt;JavaScript&lt;/span&gt;&apos;);</div><div class=\"line\">//也可以作用在一组DOM节点上</div><div class=\"line\">$(&apos;#test-ul li&apos;).text(&apos;JS&apos;); //两个&lt;li&gt;节点的文本都变成了JS</div><div class=\"line\">// id不存在的情况：</div><div class=\"line\">$(&apos;#not-exist&apos;).text(&apos;Hello&apos;); // 代码不报错，没有节点被设置为&apos;Hello&apos;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-修改样式CSS\"><a href=\"#5-修改样式CSS\" class=\"headerlink\" title=\"5.修改样式CSS\"></a>5.修改样式CSS</h3><ul>\n<li>通过JavaScript获取dom元素上的style属性，我们可以动态的给元素赋予样式属性。<br>在jQuery中利用jQuery对象“批量操作”的特点，可通过<code>css()方法</code>动态地修改style属性，修改CSS。</li>\n<li><code>css()方法</code>：获取元素样式属性的计算值或者设置元素的CSS属性。<br>它将作用于DOM节点的<code>style属性</code>，具有最高优先级。</li>\n<li>语法：<br>1、获取：<br><code>css( propertyName )</code>：获取匹配元素集合中的第一个元素的样式属性的计算值<br><code>css( propertyNames )</code>：传递一组数组，返回一个对象结果<br>2、设置：<br><code>css(propertyName, value )</code>：设置CSS<br><code>css( propertyName, function )</code>：可以传入一个回调函数，返回取到对应的值进行处理<br><code>css( properties )</code>：可以传一个对象，同时设置多个样式</li>\n<li>注意：<br>1、浏览器属性获取方式不同，在获取某些值的时候都jQuery采用统一的处理，比如颜色采用RBG，尺寸采用px<br>2、css()方法支持驼峰写法与大小写混搭的写法，内部做了容错的处理<br>3、当一个数只被作为值（value）的时候， jQuery会将其转换为一个字符串，并添在字符串的结尾处添加px，例如 .css(“width”,50}) 与 .css(“width”,”50px”})一样</li>\n</ul>\n<h3 id=\"css-与-addClass-设置样式的区别\"><a href=\"#css-与-addClass-设置样式的区别\" class=\"headerlink\" title=\".css()与.addClass()设置样式的区别\"></a>.css()与.addClass()设置样式的区别</h3><p>一、可维护性：<br>1)<code>addClass()</code>的本质是通过定义个class类的样式规则，给元素添加一个或多个类。css方法是通过JavaScript大量代码进行改变元素的样式<br>2)通过<code>addClass()</code>我们可以批量的给相同的元素设置统一规则，变动起来比较方便，可以统一修改删除。如果通过<code>css()方法</code>就需要指定每一个元素是一一的修改，日后维护也要一一的修改，比较麻烦<br>二、灵活性：<br>通过<code>css()</code>方式可以很容易动态的去改变一个样式的属性，不需要在去繁琐的定义个class类的规则。一般来说在不确定开始布局规则，通过动态生成的HTML代码结构中，都是通过<code>css()方法</code>处理的<br>三、样式值：<br><code>addClass()</code>本质只是针对class的类的增加删除，不能获取到指定样式的属性的值，<code>css()</code>可以获取到指定的样式值。<br>四、样式的优先级：<br>1)<code>addClass()方法</code>是通过增加class名的方式，那么这个样式是在外部文件或者内部样式中先定义好的，等到需要的时候在附加到元素上<br>2)通过<code>css()方法</code>处理的是内联样式，直接通过元素的style属性附加到元素上的<br>3)所以，通过<code>css()方法</code>设置的样式属性优先级要高于<code>addClass()方法</code>（根据css设置样式的优先级可知）<br>五、总结：<br>1)<code>addClass()方法</code>与<code>css()方法</code>各有利弊，一般是静态的结构，都确定了布局的规则，可以用addClass的方法，增加统一的类规则<br>2)如果是动态的HTML结构，在不确定规则，或者经常变化的情况下，一般多考虑<code>css()</code>方式</p>\n<h3 id=\"6-jQuery属性与操作样式\"><a href=\"#6-jQuery属性与操作样式\" class=\"headerlink\" title=\"6.jQuery属性与操作样式\"></a>6.jQuery属性与操作样式</h3><ul>\n<li>操作特性的DOM方法主要有3个：<code>getAttribute方法</code>、<code>setAttribute方法</code>和<code>removeAttribute方法</code>，但这些方法在实际操作中还是会存在很多问题。</li>\n<li>在jQuery中用<code>attr()</code>和<code>removeAttr()</code>方法来操作DOM节点元素的属性，并解决了兼容问题</li>\n<li><code>attr()</code>用于获取和设置元素属性，<br>语法：<br> 1)<code>attr(传入属性名)</code>：获取属性的值<br> 2)<code>attr(属性名, 属性值)</code>：设置属性的值<br> 3)<code>attr(属性名,函数值)</code>：设置属性的函数值<br> 4)<code>attr(attributes)</code>：给指定元素设置多个属性值，即：{属性名一: “属性值一” , 属性名二: “属性值二” , … … }</li>\n<li><code>removeAttr(attributeName )</code>用于为匹配的元素集合中的每个元素中移除一个属性：</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">// &lt;div id=&quot;test-div&quot; name=&quot;Test&quot; start=&quot;1&quot;&gt;...&lt;/div&gt;</div><div class=\"line\">var div = $(&apos;#test-div&apos;);</div><div class=\"line\">div.attr(&apos;data&apos;); // undefined, 属性不存在</div><div class=\"line\">div.attr(&apos;name&apos;); // &apos;Test&apos;</div><div class=\"line\">div.attr(&apos;name&apos;, &apos;Hello&apos;); // div的name属性变为&apos;Hello&apos;</div><div class=\"line\">div.removeAttr(&apos;name&apos;); // 删除name属性</div><div class=\"line\">div.attr(&apos;name&apos;); // undefined</div><div class=\"line\"></div><div class=\"line\">//DOM中有个概念的区分：Attribute和Property：</div><div class=\"line\">1、Attribute就是dom节点自带的属性，获取Attribute就需要用attr；</div><div class=\"line\">2、Property是这个DOM元素作为对象，其附加的内容，获取Property就需要用prop。</div><div class=\"line\"></div><div class=\"line\">//prop()方法和attr()类似，只是对于一些在DOM节点中可没有值的属性(如checked, selected)，使用prop()返回值为真假(true/false)（更合理些）</div><div class=\"line\">var radio = $(&apos;#test-radio&apos;);</div><div class=\"line\">radio.attr(&apos;checked&apos;); // &apos;checked&apos;</div><div class=\"line\">radio.prop(&apos;checked&apos;); // true</div><div class=\"line\">//不过，用is()方法判断会更好：</div><div class=\"line\">radio.is(&apos;:checked&apos;); // true</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"7-操作表单\"><a href=\"#7-操作表单\" class=\"headerlink\" title=\"7.操作表单\"></a>7.操作表单</h3><ul>\n<li>对于表单元素(如input, select和textarea)，jQuery对象统一提供<code>val()</code>方法获取和设置对应的<code>value</code>属性。</li>\n<li>语法：<br>1)<code>val()</code>无参数，获取匹配的元素集合中第一个元素的当前值<br>2)<code>val( value )</code>，设置匹配的元素集合中每个元素的值<br>3)<code>val( function )</code>，一个用来返回设置值的函数</li>\n<li>注意：<br>1)通过<code>val()</code>处理select元素，当没有选择项被选中，它返回null<br>2)<code>val()</code>方法多用来设置表单的字段的值<br>3)如果select元素有multiple（多选）属性，并且至少一个选择项被选中，<code>val()方法</code>返回一个数组，这个数组包含每个选中选择项的值</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">/***************表单********************/</div><div class=\"line\"> &lt;input id=&quot;test-input&quot; name=&quot;email&quot; value=&quot;&quot;&gt;</div><div class=\"line\"> &lt;select id=&quot;test-select&quot; name=&quot;city&quot;&gt;</div><div class=\"line\">     &lt;option value=&quot;BJ&quot; selected&gt;Beijing&lt;/option&gt;</div><div class=\"line\">     &lt;option value=&quot;SH&quot;&gt;Shanghai&lt;/option&gt;</div><div class=\"line\">     &lt;option value=&quot;SZ&quot;&gt;Shenzhen&lt;/option&gt;</div><div class=\"line\"> &lt;/select&gt;</div><div class=\"line\"> &lt;textarea id=&quot;test-textarea&quot;&gt;Hello&lt;/textarea&gt;</div><div class=\"line\">/*****************************************/</div><div class=\"line\">var</div><div class=\"line\">   input = $(&apos;#test-input&apos;),</div><div class=\"line\">   select = $(&apos;#test-select&apos;),</div><div class=\"line\">   textarea = $(&apos;#test-textarea&apos;);</div><div class=\"line\"></div><div class=\"line\">input.val(); // &apos;test&apos;</div><div class=\"line\">input.val(&apos;abc@example.com&apos;); // 文本框的内容已变为abc@example.com</div><div class=\"line\"></div><div class=\"line\">select.val(); // &apos;BJ&apos;</div><div class=\"line\">select.val(&apos;SH&apos;); // 选择框已变为Shanghai</div><div class=\"line\"></div><div class=\"line\">textarea.val(); // &apos;Hello&apos;</div><div class=\"line\">textarea.val(&apos;Hi&apos;); // 文本区域已更新为&apos;Hi&apos;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"html-text-和-val-的差异总结：\"><a href=\"#html-text-和-val-的差异总结：\" class=\"headerlink\" title=\".html(),.text()和.val()的差异总结：\"></a>.html(),.text()和.val()的差异总结：</h3><p>1）.html(),.text(),.val()三种方法都是用来读取选定元素的内容；只不过.html()是用来读取元素的html内容（包括html标签），.text()用来读取元素的纯文本内容，包括其后代元素，.val()是用来读取表单元素的”value”值。其中.html()和.text()方法不能使用在表单元素上,而.val()只能使用在表单元素上；另外.html()方法使用在多个元素上时，只读取第一个元素；.val()方法和.html()相同，如果其应用在多个元素上时，只能读取第一个表单元素的”value”值，但是.text()和他们不一样，如果.text()应用在多个元素上时，将会读取所有选中元素的文本内容。<br>2）.html(htmlString),.text(textString)和.val(value)三种方法都是用来替换选中元素的内容，如果三个方法同时运用在多个元素上时，那么将会替换所有选中元素的内容。<br>3）.html(),.text(),.val()都可以使用回调函数的返回值来动态的改变多个元素的内容</p>\n<h3 id=\"8-元素的数据存储\"><a href=\"#8-元素的数据存储\" class=\"headerlink\" title=\"8.元素的数据存储\"></a>8.元素的数据存储</h3><ul>\n<li><code>html5 dataset</code>是新的HTML5标准，允许你在普通的元素标签里嵌入类似<code>data-*</code>的属性，来实现一些简单数据的存取。<br>它的数量不受限制，并且也能由JavaScript动态修改，也支持CSS选择器进行样式设置。<br>这使得<code>data属性</code>特别灵活，也非常强大，能更加有序直观的进行数据预设或存储。</li>\n<li>但在不支持HTML5标准的浏览器中，要如何实现数据存取?<br>jQuery就提供了一个.data()的方法来处理这个问题。</li>\n<li>jQuery提供的存储接口<br>1)<code>jQuery.data( element, key, value )</code> //静态接口,存数据<br>2)<code>jQuery.data( element, key )</code>//静态接口,取数据<br>3)<code>.data( key, value )</code>//实例接口,存数据<br>4)<code>.data( key )</code>//实例接口,存数据</li>\n<li>jQuery提供相应的删除接口<br>1)<code>jQuery.removeData( element [, name ] )</code><br>2)<code>.removeData( [name ] )</code></li>\n<li>我们可把DOM看作一个对象，往对象存储基本类型，引用类型的数据，但是这里会引发一个问题，可能会存在<code>循环引用的内存泄漏风险</code><br>通过jQuery提供的数据接口，就很好的处理了这个问题了，我们不需要关心它底层是如何实现，只需要按照对应的<code>data方法</code>使用就行了</li>\n<li><a href=\"http://www.imooc.com/code/8596\" target=\"_blank\" rel=\"external\">实例</a></li>\n</ul>\n"}