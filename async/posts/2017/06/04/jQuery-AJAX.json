{"tags":[{"name":"jQuery","permalink":"http://yoursite.com/tags/jQuery/","url":"\\async\\tags\\jQuery.json","count":6}],"categories":[],"url":"\\async\\posts\\2017\\06\\04\\jQuery-AJAX.json","date":1496590189000,"path":{"year":2017,"month":6,"day":4,"name":"jQuery-AJAX"},"title":"jQuery-AJAX","permalink":"http://yoursite.com/2017/06/04/jQuery-AJAX/","content":"<ul>\n<li>用JavaScript写AJAX存在的主要问题是：不同浏览器需要写不同代码，并且状态和错误处理写起来很麻烦。而用jQuery的相关对象来处理AJAX，不但不需要考虑浏览器问题，代码也能大大简化。</li>\n<li>jQuery在全局对象jQuery（即<code>$</code>）绑定了<code>ajax(url, settings)</code>函数，用来处理AJAX请求。</li>\n<li><code>ajax(url, settings)</code>函数需要接收<code>一个URL</code>和<code>一个可选的settings对象</code>，常用的选项如下：<ul>\n<li><code>async</code>：是否异步执行AJAX请求，默认为true，千万不要指定为false；</li>\n<li><code>method</code>：发送的Method，缺省为’GET’，可指定为’POST’、’PUT’等；</li>\n<li><code>contentType</code>：发送POST请求的格式，默认值为’application/x-www-form-urlencoded; charset=UTF-8’，也可以指定为text/plain、application/json；</li>\n<li><code>data</code>：发送的数据，可以是字符串、数组或object。如果是GET请求，data将被转换成query附加到URL上；如果是POST请求，根据contentType把data序列化成合适的格式；</li>\n<li><code>headers</code>：发送的额外的HTTP头，必须是一个object；</li>\n<li><code>dataType</code>：接收的数据格式，可以指定为’html’、’xml’、’json’、’text’等，缺省情况下根据响应的Content-Type猜测。</li>\n</ul>\n</li>\n<li><p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//发送一个GET请求，并返回一个JSON格式的数据：</div><div class=\"line\">var jqxhr = $.ajax( &apos;/api/categories&apos; , &#123;</div><div class=\"line\">    dataType: &apos;json&apos;</div><div class=\"line\">&#125;);</div><div class=\"line\">// 请求已发送</div></pre></td></tr></table></figure>\n</li>\n<li><p>jQuery的<code>jqXHR对象</code>类似一个Promise对象，用<code>链式写法</code>来处理各种回调（用回调函数处理返回的数据和出错时的响应）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var jqxhr = $.ajax(&apos;/api/categories&apos;, &#123;</div><div class=\"line\">    dataType: &apos;json&apos;</div><div class=\"line\">&#125;).done(function (data) &#123;</div><div class=\"line\">    ajaxLog(&apos;成功, 收到的数据: &apos; + JSON.stringify(data));</div><div class=\"line\">&#125;).fail(function (xhr, status) &#123;</div><div class=\"line\">    ajaxLog(&apos;失败: &apos; + xhr.status + &apos;, 原因: &apos; + status);</div><div class=\"line\">&#125;).always(function () &#123;</div><div class=\"line\">    ajaxLog(&apos;请求完成: 无论成功或失败都会调用&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>对常用的AJAX操作，jQuery提供了一些辅助方法：<br>1、get<br>由于<code>GET请求</code>最常见，所以jQuery提供了<code>get()</code>方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var jqxhr = $.get( &apos;/path/to/resource&apos;, &#123;</div><div class=\"line\">  name: &apos;Bob Lee&apos;,</div><div class=\"line\">  check: 1</div><div class=\"line\">&#125;);</div><div class=\"line\">//第二个参数若是object，jQuery自动把它变成query string然后加到URL后面，上例实际的URL是：</div><div class=\"line\">/path/to/resource?name=Bob%20Lee&amp;check=1</div><div class=\"line\">//这样就不用关心如何用URL编码并构造一个query string</div></pre></td></tr></table></figure>\n<p>2、post<br><code>post()</code>和<code>get()</code>类似，但是传入的第二个参数默认被序列化为<code>application/x-www-form-urlencoded</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var jqxhr = $.post(&apos;/path/to/resource&apos;, &#123;</div><div class=\"line\">  name: &apos;Bob Lee&apos;,</div><div class=\"line\">  check: 1</div><div class=\"line\">&#125;);</div><div class=\"line\">//实际构造的数据name=Bob%20Lee&amp;check=1作为POST的body被发送</div></pre></td></tr></table></figure>\n<p>3、getJSON<br>由于JSON用得越来越普遍，所以jQuery也提供了<code>getJSON()</code>方法来快速通过<code>GET</code>获取一个<code>JSON对象</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var jqxhr = $.getJSON(&apos;/path/to/resource&apos;, &#123;</div><div class=\"line\">  name: &apos;Bob Lee&apos;,</div><div class=\"line\">  check: 1</div><div class=\"line\">&#125;).done(function (data) &#123;</div><div class=\"line\">  // data已经被解析为JSON对象了</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>安全限制</p>\n<ul>\n<li>jQuery的AJAX完全封装的是JavaScript的AJAX操作，所以它的安全限制和前面讲的用JavaScript写AJAX完全一样。</li>\n<li>如果需要使用<code>JSONP</code>，可以在<code>ajax()</code>中设置<code>jsonp: &#39;callback&#39;</code>，让jQuery实现JSONP跨域加载数据。</li>\n</ul>\n</li>\n</ul>\n"}