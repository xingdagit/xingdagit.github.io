{"tags":[{"name":"JS","permalink":"http://yoursite.com/tags/JS/","url":"\\async\\tags\\JS.json","count":9}],"categories":[],"url":"\\async\\posts\\2017\\06\\04\\JS-BOM.json","date":1496558305000,"path":{"year":2017,"month":6,"day":4,"name":"JS-BOM"},"title":"JS-BOM","permalink":"http://yoursite.com/2017/06/04/JS-BOM/","content":"<h3 id=\"一、浏览器\"><a href=\"#一、浏览器\" class=\"headerlink\" title=\"一、浏览器\"></a>一、浏览器</h3><ul>\n<li>目前主流的浏览器分这么几种：<ol>\n<li>IE 6~11：国内用得最多的IE浏览器，历来对W3C标准支持差。从IE10开始支持ES6标准；</li>\n<li>Chrome：Google出品的基于Webkit内核浏览器，内置了非常强悍的JavaScript引擎——V8。由于Chrome一经安装就时刻保持自升级，所以不用管它的版本，最新版早就支持ES6了；</li>\n<li>Safari：Apple的Mac系统自带的基于Webkit内核的浏览器，从OS X 10.7 Lion自带的6.1版本开始支持ES6，目前最新的OS X 10.11 El Capitan自带的Safari版本是9.x，早已支持ES6；</li>\n<li>Firefox：Mozilla自己研制的Gecko内核和JavaScript引擎OdinMonkey。早期的Firefox按版本发布，后来终于聪明地学习Chrome的做法进行自升级，时刻保持最新；</li>\n<li>移动设备上目前iOS和Android两大阵营分别主要使用Apple的Safari和Google的Chrome，由于两者都是Webkit核心，结果HTML5首先在手机上全面普及，对JavaScript的标准支持也很好，最新版本均支持ES6。</li>\n<li>其他浏览器如Opera等由于市场份额太小就被自动忽略了。</li>\n</ol>\n</li>\n<li>不同的浏览器对JavaScript支持的差异主要是，有些API的接口不一样，比如AJAX，File接口。对于ES6标准，不同的浏览器对各个特性支持也不一样。</li>\n<li>在编写JavaScript的时候，就要充分考虑到浏览器的差异，尽量让同一份JavaScript代码能运行在不同的浏览器中。</li>\n</ul>\n<h3 id=\"二、BOM\"><a href=\"#二、BOM\" class=\"headerlink\" title=\"二、BOM\"></a>二、BOM</h3><ul>\n<li>BOM（Browser Object Document）即<code>浏览器对象模型</code>。</li>\n<li>BOM提供了独立于内容、而与浏览器窗口进行交互的对象，使 JavaScript 有能力与浏览器”对话”。</li>\n<li>BOM由一系列相关的对象构成，并且每个对象都提供了很多方法与属性；</li>\n<li>BOM仍缺乏标准，JavaScript语法的标准化组织是ECMA，DOM的标准化组织是W3C，BOM最初是Netscape浏览器标准的一部分。</li>\n<li><img src=\"http://images2015.cnblogs.com/blog/997049/201608/997049-20160830235030324-1067760196.jpg\" alt=\" BOM结构图\"></li>\n</ul>\n<h3 id=\"三、浏览器对象\"><a href=\"#三、浏览器对象\" class=\"headerlink\" title=\"三、浏览器对象\"></a>三、浏览器对象</h3><ul>\n<li>JavaScript可以获取浏览器提供的很多对象，并进行操作。</li>\n</ul>\n<ol>\n<li><p>window对象</p>\n<ul>\n<li>由于BOM主要用于管理窗口与窗口之间的通讯，因此其核心对象是window；</li>\n<li>window对象不但充当全局作用域，而且表示当前的浏览器窗口。</li>\n<li>window对象有<code>innerWidth</code>和<code>innerHeight</code>属性，可获取浏览器窗口的内部宽度和高度(内部宽高是指除去菜单栏、工具栏、边框等占位元素后，用于显示网页的净宽高)。</li>\n<li>对应的还有<code>outerWidth</code>和<code>outerHeight</code>属性，可以获取浏览器窗口的整个宽高。</li>\n<li>兼容性：IE&lt;=8不支持。</li>\n<li>所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员(全局变量是 window 对象的属性；全局函数是 window 对象的方法，其他浏览器对象也是window 对象的属性)。</li>\n<li>window对象方法：<br>alert()———-显示带有一段信息和一个确认按钮的警示框<br>prompt()———显示可提示用户输入的对话框<br>confirm()——–显示带有一段消息及确认按钮和取消按钮的对话框<br>open()———–打开一个新的浏览器窗口或查找一个已命名的窗口<br>close()———-关闭浏览器窗口<br>print()———-打印当前窗口的内容<br>focus()———-把键盘焦点给予一个窗口<br>blur()———–把键盘焦点从顶层窗口离开<br>moveBy()———相对窗口的当前坐标把它移动指定的像素<br>moveTo()———把窗口的左上角移动到指定的坐标<br>resizeBy()——-按照指定的像素调整窗口的大小<br>resizeTo()——-把窗口的大小调整到指定的宽度和高度<br>scrollBy()——-按照指定的像素值来滚动内容<br>scrollTo()——-把内容滚动到指定的坐标<br>setInterval()—-每隔指定的时间执行一次代码<br>setTimeout()—–在指定延迟时间之后执行代码<br>clearInterval()–取消setInterval()的设置<br>clearTimeout()—取消setTimeout()的设置</li>\n</ul>\n</li>\n<li><p>navigator对象</p>\n<ul>\n<li><p>navigator对象表示浏览器的信息，最常用的属性包括：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.navigator.appName：浏览器名称；</div><div class=\"line\">2.navigator.appVersion：浏览器版本；</div><div class=\"line\">3.navigator.language：浏览器设置的语言；</div><div class=\"line\">4.navigator.platform：操作系统类型；</div><div class=\"line\">5.navigator.userAgent：浏览器设定的User-Agent字符串。</div></pre></td></tr></table></figure>\n</li>\n<li><p>需注意的一点，navigator的信息可以很容易被用户修改，所以JavaScript读取的值不一定是正确的。所以，针对不同浏览器编写不同的代码时，不要通过<code>if</code>判断浏览器版本的方式，而是充分利用JavaScript对不存在属性返回undefined的特性，直接用短路运算符||计算：<br><code>var width = window.innerWidth || document.body.clientWidth;</code></p>\n</li>\n</ul>\n</li>\n<li><p>screen对象</p>\n<ul>\n<li>screen对象表示屏幕的信息。</li>\n<li>常用的screen对象属性：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.screen.width：屏幕宽度，以像素为单位；</div><div class=\"line\">2.screen.height：屏幕高度，以像素为单位；</div><div class=\"line\">3. screen.availWidth： 可用的屏幕宽度</div><div class=\"line\">4.screen.availHeight ： 可用的屏幕高度</div><div class=\"line\">5.screen.colorDepth：返回颜色位数，如8、16、24。</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>location对象</p>\n<ul>\n<li>location对象用于获取表示或设置窗体的URL，并且可以用于解析URL。</li>\n<li>语法：<code>location.[属性|方法]</code></li>\n<li><p>location对象属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">location.href; /*http://www.example.com:8080/path/index.html?a=1&amp;b=2#TOP*/</div><div class=\"line\">location.protocol; // &apos;http&apos;,协议</div><div class=\"line\">location.host; // &apos;www.example.com&apos;，主机名</div><div class=\"line\">location.port; // &apos;8080&apos;，端口号</div><div class=\"line\">location.pathname; // &apos;/path/index.html&apos; ，路径部分</div><div class=\"line\">location.search; // &apos;?a=1&amp;b=2&apos;，从？开始的查询部分</div><div class=\"line\">location.hash; // &apos;TOP&apos;，从#开始的锚</div></pre></td></tr></table></figure>\n</li>\n<li><p>location 对象方法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">location.assign(‘新页面URL地址’)  //加载一个新页面或文档</div><div class=\"line\">location.reload()  //重新加载当前页面</div><div class=\"line\">location. replace()  //用新的文档替换当前文档</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>document对象</p>\n<ul>\n<li>由于HTML在浏览器中以DOM形式表示为树形结构，document对象就是整个DOM树的根节点，表示当前页面。</li>\n<li>document的<code>title</code>属性是从HTML文档中的<code>&lt;title&gt;xxx&lt;/title&gt;</code>读取的，但是也可以动态改变。</li>\n<li>要查找DOM树的某个节点，需从document对象开始查找。最常用的是根据 <code>ID</code>和<code>Tag Name</code> 查找，即用document对象提供的<code>getElementById()</code>和<code>getElementsByTagName()</code>方法。</li>\n<li>document对象还有一个cookie属性，可以获取当前页面的Cookie。<br>1)Cookie是由服务器发送的key-value标示符。<br>2)通过<code>document.cookie</code>读取到当前页面的Cookie<br>3)因为HTTP协议是无状态的，但是服务器要区分到底是哪个用户发过来的请求，就可以用Cookie来区分。<br>4)当一个用户成功登录后，服务器发送一个Cookie给浏览器，例如user=ABC123XYZ(加密的字符串)…，此后，浏览器访问该网站时，会在请求头附上这个Cookie，服务器根据Cookie即可区分出用户。<br>5)Cookie还可以存储网站的一些设置，如页面显示的语言等等。<br>6)由于JavaScript能读取到页面的Cookie，而用户的登录信息通常也存在Cookie中，这就造成了巨大的安全隐患。为了解决HTML页面中可能引入第三方恶意JavaScript代码的问题，服务器在设置Cookie时可使用<code>httpOnly</code>，设定了<code>httpOnly</code>的Cookie将不能被JavaScript读取（这个行为由浏览器实现，主流浏览器均支持<code>httpOnly</code>选项，IE从IE6 SP1开始支持）。所以，为了确保安全，服务器端在设置Cookie时，应该始终坚持使用<code>httpOnly</code>。</li>\n</ul>\n</li>\n<li><p>history对象</p>\n<ul>\n<li>history对象保存了浏览器的历史记录(URL)。</li>\n<li>JavaScript可以调用history对象的<code>back()</code>或<code>forward ()</code>方法，相当于用户点击了浏览器的“后退”或“前进”按钮。 </li>\n<li>length属性返回浏览器历史列表中URL数量</li>\n<li>注意:从窗口被打开的那一刻开始记录，每个浏览器窗口、每个标签页乃至每个框架，都有自己的history对象与特定的window对象关联。</li>\n<li>这个对象属于历史遗留对象，对于现代Web页面来说，由于大量使用AJAX和页面交互，简单粗暴地调用history.back()可能会让用户感到非常愤怒。</li>\n<li>新手开始设计Web页面时喜欢在登录页登录成功时调用history.back()，试图回到登录前的页面。这是一种错误的方法。所以不推荐使用history这个对象了。</li>\n</ul>\n</li>\n<li><p>Navigator对象</p>\n<ul>\n<li>Navigator 对象包含有关浏览器的信息，通常用于检测浏览器与操作系统的版本。。</li>\n<li><p>Navigator对象属性:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">appCodeName ----浏览器代码名的字符串表示。</div><div class=\"line\">appName-----返回浏览器的名称。</div><div class=\"line\">appVersion-----返回浏览器的平台和版本信息。</div><div class=\"line\">Platform------返回运行浏览器的操作系统平台。</div><div class=\"line\">userAgent------返回由客户机发送服务器的user-agent头部的值。</div></pre></td></tr></table></figure>\n</li>\n<li><p>警告：来自 navigator 对象的信息具有误导性，不应该被用于检测浏览器版本。由于不同的浏览器支持不同的对象，可使用对象来检测浏览器。</p>\n</li>\n</ul>\n</li>\n</ol>\n"}