{"tags":[{"name":"jQuery","permalink":"http://yoursite.com/tags/jQuery/","url":"\\async\\tags\\jQuery.json","count":6}],"categories":[],"url":"\\async\\posts\\2017\\06\\04\\jQuery-选择器.json","date":1496580626000,"path":{"year":2017,"month":6,"day":4,"name":"jQuery-选择器"},"title":"jQuery-选择器","permalink":"http://yoursite.com/2017/06/04/jQuery-选择器/","content":"<h3 id=\"关于jQuery选择器\"><a href=\"#关于jQuery选择器\" class=\"headerlink\" title=\"关于jQuery选择器\"></a>关于jQuery选择器</h3><ul>\n<li>选择器是jQuery的核心。</li>\n<li><p>使用jQuery选择器可改善以往复杂的DOM选择操作，它能快速定位到一个或多个DOM节点。</p>\n</li>\n<li><p>基础选择器。</p>\n<ol>\n<li><p>按<code>ID</code>查找</p>\n<ul>\n<li>语法：<code>var div = $(&#39;#abc&#39;);</code>  //查找<code>&lt;div id=&quot;abc&quot;&gt;</code>;</li>\n<li>选择器返回的对象是jQuery对象，类似数组，它的每个元素都是一个引用了DOM节点的对象；</li>\n<li>以上面的查找为例，如果id为abc的<code>&lt;div&gt;</code>存在，返回的jQuery对象如下：<br><code>[&lt;div id=&quot;abc&quot;&gt;...&lt;/div&gt;]</code>;<br>如果id为abc的<code>&lt;div&gt;</code>不存在，返回的jQuery对象为：<code>[]</code>;<br>总之jQuery的选择器不会返回<code>undefined</code>或者<code>null</code>，这样的好处是你不必在下一行判断<code>if (div === undefined)</code>;</li>\n<li>jQuery对象和DOM对象之间可以互相转化：<br>1)<code>var div = $(&#39;#abc&#39;);</code> // jQuery对象<br>2)<code>var divDom = div.get(0);</code>// 假设存在div，获取第1个DOM元素<br>3)<code>var another = $(divDom);</code>// 重新把DOM包装为jQuery对象 </li>\n<li>通常情况下你不需要获取DOM对象，直接使用jQuery对象更加方便。如果你拿到了一个DOM对象，那可以简单地调用<code>$(aDomObject)</code>把它变成jQuery对象，这样就可以方便地使用jQuery的API了。</li>\n</ul>\n</li>\n<li><p>按<code>tag</code>查找<br>语法：<code>$(&#39;tag名称&#39;)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ps = $(&apos;p&apos;);  // 返回所有&lt;p&gt;节点</div><div class=\"line\">ps.length;     // 计算页面有多少个&lt;p&gt;节点</div></pre></td></tr></table></figure>\n</li>\n<li><p>按<code>class</code>查找<br>语法：<code>$(&#39;.class名称&#39;)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// &lt;div class=&quot;red&quot;&gt;...&lt;/div&gt;</div><div class=\"line\">// &lt;p class=&quot;green red&quot;&gt;...&lt;/p&gt;</div><div class=\"line\">var a = $(&apos;.red&apos;);      //查找所有包含red的节点</div><div class=\"line\">var a = $(&apos;.red.green&apos;); // 查找所有同时包含red和green的节点(注意没有空格！)</div></pre></td></tr></table></figure>\n</li>\n<li><p>按属性查找<br>语法：<code>$(&#39; [属性=属性值] &#39; )</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//在一个表单中按属性来查找</div><div class=\"line\">var email = $(&apos;[name=email]&apos;); ` // 找出&lt;??? name=&quot;email&quot;&gt;</div><div class=\"line\">var passwordInput = $(&apos;[type=password]&apos;); // 找出&lt;??? type=&quot;password&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">//当属性值包含空格等特殊字符时，需用双引号括起来</div><div class=\"line\">var a = $(&apos;[items=&quot;A B&quot;]&apos;); // 找出&lt;??? items=&quot;A B&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">//还可以使用前缀查找或者后缀查找</div><div class=\"line\">var icons = $(&apos;[name^=icon]&apos;); // 找出所有name属性值以icon开头的DOM</div><div class=\"line\">var names = $(&apos;[name$=with]&apos;); // 找出所有name属性值以with结尾的DOM</div><div class=\"line\"></div><div class=\"line\">//十分适合通过class属性查找，且不受class包含多个名称影响的情况</div><div class=\"line\">var icons = $(&apos;[class^=&quot;icon-&quot;]&apos;); // 找出所有class包含至少一个以`icon-`开头的DOM</div></pre></td></tr></table></figure>\n</li>\n<li><p>组合查找<br>组合查找就是把上述简单选择器组合起来使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//根据tag和属性 来组合查找</div><div class=\"line\">var emailInput = $(&apos;input[name=email]&apos;); //查找&lt;input name=&quot;email&quot;&gt;</div><div class=\"line\">//根据tag和class来组合查找</div><div class=\"line\">var tr = $(&apos;tr.red&apos;);  // 找出&lt;tr class=&quot;red ...&quot;&gt;...&lt;/tr&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>多项选择器<br>多项选择器就是把多个选择器用,组合起来一块选：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&apos;p,div&apos;); // 把&lt;p&gt;和&lt;div&gt;都选出来</div><div class=\"line\">$(&apos;p.red,p.green&apos;); // 把&lt;p class=&quot;red&quot;&gt;和&lt;p class=&quot;green&quot;&gt;都选出来</div><div class=\"line\">//注意：选出来的元素是按照它们在HTML中出现的顺序排列的，而且不会有重复元素。如&lt;p class=&quot;red green&quot;&gt;不会被上面的$(&apos;p.red,p.green&apos;)选择两次。</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>层级选择器</p>\n<ul>\n<li>因为DOM的结构就是层级结构，所以经常要根据层级关系进行选择；</li>\n<li>如果两个DOM元素具有层级关系，就可以用层级选择器来选择； </li>\n<li>层级选择器相比单个的选择器好处在于：它缩小了选择范围。因为首先要定位父节点，才能选择相应的子节点，这样避免了页面其他不相关的元素；</li>\n<li>语法：<code>$(&#39;ancestor descendant&#39;)</code> //层级之间用空格隔开</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- HTML结构 --&gt;</div><div class=\"line\">&lt;div class=&quot;testing&quot;&gt;</div><div class=\"line\">   &lt;ul class=&quot;lang&quot;&gt;</div><div class=\"line\">     &lt;li class=&quot;lang-javascript&quot;&gt;JavaScript&lt;/li&gt;</div><div class=\"line\">     &lt;li class=&quot;lang-python&quot;&gt;Python&lt;/li&gt;</div><div class=\"line\">     &lt;li class=&quot;lang-lua&quot;&gt;Lua&lt;/li&gt;</div><div class=\"line\">   &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">//因为&lt;div&gt;和&lt;ul&gt;都是&lt;li&gt;的祖先节点，所以以下两种方式都可选出相应的&lt;li&gt;节点：</div><div class=\"line\">$(&apos;ul.lang li.lang-javascript&apos;); // [&lt;li class=&quot;lang-javascript&quot;&gt;JavaScript&lt;/li&gt;]</div><div class=\"line\">$(&apos;div.testing li.lang-javascript&apos;); // [&lt;li class=&quot;lang-javascript&quot;&gt;JavaScript&lt;/li&gt;]</div><div class=\"line\">//要选择所有的&lt;li&gt;节点：</div><div class=\"line\">$(&apos;ul.lang li&apos;);</div><div class=\"line\">/******其他实例*******/</div><div class=\"line\">//选择范围限定在name属性为upload的表单里的&lt;input&gt;，而其他表单的不会被选择：</div><div class=\"line\">$(&apos;form[name=upload] input&apos;);</div><div class=\"line\">$(&apos;form.test p input&apos;); // 在form表单选择被&lt;p&gt;包含的&lt;input&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>子选择器</p>\n<ul>\n<li>子选择器类似层级选择器，但限定了层级关系必须是父子关系，就是<code>&lt;child&gt;</code>节点必须是<code>&lt;parent&gt;</code>节点的直属子节点。</li>\n<li>语法：<code>$(&#39;parent&gt;child&#39;)</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//对于上例HTML结构：</div><div class=\"line\">$(&apos;ul.lang&gt;li.lang-javascript&apos;); // 可以选出[&lt;li class=&quot;lang-javascript&quot;&gt;JavaScript&lt;/li&gt;]</div><div class=\"line\">$(&apos;div.testing&gt;li.lang-javascript&apos;); // [], 无法选出，因为&lt;div&gt;和&lt;li&gt;不构成父子关系</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>过滤器</p>\n<ul>\n<li>过滤器一般不单独使用，它通常附加在选择器上，帮助我们更精确地定位元素。</li>\n<li>语法：<code>$(&#39;parent&gt;child&#39;)</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//对于上例HTML结构：</div><div class=\"line\">$(&apos;ul.lang li&apos;); // 选出JavaScript、Python和Lua 3个节点</div><div class=\"line\">/***********************************************/</div><div class=\"line\">$(&apos;ul.lang li:first-child&apos;); // 仅选出JavaScript</div><div class=\"line\">$(&apos;ul.lang li:last-child&apos;); // 仅选出Lua</div><div class=\"line\">$(&apos;ul.lang li:nth-child(2)&apos;); // 选出第N个元素，N从1开始</div><div class=\"line\">$(&apos;ul.lang li:nth-child(even)&apos;); // 选出序号为偶数的元素</div><div class=\"line\">$(&apos;ul.lang li:nth-child(odd)&apos;); // 选出序号为奇数的元素</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>“表单”选择器</p>\n<ul>\n<li>针对表单元素，jQuery还有一组特殊的选择器。<br>1.<code>:input</code>：可以选择<code>&lt;input&gt;，&lt;textarea&gt;，&lt;select&gt;和&lt;button&gt;</code>；<br>2.<code>:file</code>：可以选择<code>&lt;input type=&quot;file&quot;&gt;</code>，和<code>input[type=file]</code>一样；<br>3.:<code>checkbox</code>：可以选择复选框，和<code>input[type=checkbox]</code>一样；<br>4.<code>:radio</code>：可以选择单选框，和<code>input[type=radio]</code>一样；<br>5.<code>:focus</code>：可以选择当前输入焦点的元素，例如把光标放到一个<code>&lt;input&gt;</code>上，用<code>$(&#39;input:focus&#39;)</code>就可以选出；<br>6.<code>:checked</code>：选择当前勾上的单选框和复选框，用这个选择器可以立刻获得用户选择的项目，如<code>$(&#39;input[type=radio]:checked&#39;)</code>；<br>7.<code>:enabled</code>：可以选择可以正常输入的<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>等，也就是不变暗的输入；<br>8.<code>:disabled</code>：和<code>:enabled</code>正好相反，选择那些不能输入的。</li>\n</ul>\n</li>\n<li><p>其他选择器</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&apos;div:visible&apos;); // 选出所有可见的div</div><div class=\"line\">$(&apos;div:hidden&apos;); // 选出所有隐藏的div</div></pre></td></tr></table></figure>\n</li>\n<li><p>查找和过滤</p>\n<ul>\n<li>通常情况下选择器就可以直接定位到我们想要的元素。但当我们拿到一个jQuery对象后，还可以以这个对象为基准进行查找和过滤。</li>\n<li>查找<ol>\n<li><code>find()方法</code>：用于在某个节点的所有子节点中查找</li>\n<li><code>parent()方法</code>：用于从当前节点开始向上查找</li>\n<li><code>next()和prev()方法</code>：用于位于同一层级的节点</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- HTML结构 --&gt;</div><div class=\"line\">&lt;ul class=&quot;lang&quot;&gt;</div><div class=\"line\">  &lt;li class=&quot;js dy&quot;&gt;JavaScript&lt;/li&gt;</div><div class=\"line\">  &lt;li class=&quot;dy&quot;&gt;Python&lt;/li&gt;</div><div class=\"line\">  &lt;li id=&quot;swift&quot;&gt;Swift&lt;/li&gt;</div><div class=\"line\">  &lt;li class=&quot;dy&quot;&gt;Scheme&lt;/li&gt;</div><div class=\"line\">  &lt;li name=&quot;haskell&quot;&gt;Haskell&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">/********find()********/</div><div class=\"line\">var ul = $(&apos;ul.lang&apos;); // 获得&lt;ul&gt;</div><div class=\"line\">var dy = ul.find(&apos;.dy&apos;); // 获得JavaScript, Python, Scheme</div><div class=\"line\">var swf = ul.find(&apos;#swift&apos;); // 获得Swift</div><div class=\"line\">var hsk = ul.find(&apos;[name=haskell]&apos;); // 获得Haskell</div><div class=\"line\">/******* parent()*******/</div><div class=\"line\">var swf = $(&apos;#swift&apos;); // 获得Swift</div><div class=\"line\">var parent = swf.parent(); // 获得Swift的上层节点&lt;ul&gt;</div><div class=\"line\">var a = swf.parent(&apos;div.red&apos;); // 从Swift的父节点开始向上查找，直到找到某个符合条件的节点并返回</div><div class=\"line\">/******** next()和prev()方法********/</div><div class=\"line\">var swift = $(&apos;#swift&apos;);</div><div class=\"line\">swift.next(); // Scheme</div><div class=\"line\">swift.next(&apos;[name=haskell]&apos;); // Haskell，因为Haskell是后续第一个符合选择器条件的节点</div><div class=\"line\">swift.prev(); // Python</div><div class=\"line\">swift.prev(&apos;.js&apos;); // JavaScript，因为JavaScript是往前第一个符合选择器条件的节点</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>过滤<ol>\n<li><code>filter()方法</code>：用于过滤掉不符合选择器条件的节点或者传入一个函数</li>\n<li><code>map()方法</code>：用于把一个jQuery对象包含的若干DOM节点转化为其他对象</li>\n<li><code>first()、last()和slice()方法</code>：用于jQuery对象包含不止一个DOM节点时返回一个新的jQuery对象，把不需要的DOM节点去掉</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- HTML结构 --&gt;</div><div class=\"line\">&lt;ul class=&quot;lang&quot;&gt;</div><div class=\"line\">   &lt;li class=&quot;js dy&quot;&gt;JavaScript&lt;/li&gt;</div><div class=\"line\">   &lt;li class=&quot;dy&quot;&gt;Python&lt;/li&gt;</div><div class=\"line\">   &lt;li id=&quot;swift&quot;&gt;Swift&lt;/li&gt;</div><div class=\"line\">   &lt;li class=&quot;dy&quot;&gt;Scheme&lt;/li&gt;</div><div class=\"line\">   &lt;li name=&quot;haskell&quot;&gt;Haskell&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">/******** filter ()********/</div><div class=\"line\">var langs = $(&apos;ul.lang li&apos;); // 拿到JavaScript, Python, Swift, Scheme和Haskell</div><div class=\"line\">var a = langs.filter(&apos;.dy&apos;); // 拿到JavaScript, Python, Scheme</div><div class=\"line\">//传入一个函数</div><div class=\"line\">//注意函数内部的this被绑定为DOM对象而不是jQuery对象</div><div class=\"line\">var langs = $(&apos;ul.lang li&apos;); // 拿到JavaScript, Python, Swift, Scheme和Haskell</div><div class=\"line\">langs.filter(function ()&#123;</div><div class=\"line\">    return this.innerHTML.indexOf(&apos;S&apos;) === 0; // 返回S开头的节点</div><div class=\"line\">&#125;); // 拿到Swift, Scheme</div><div class=\"line\"></div><div class=\"line\">/******** map ()********/</div><div class=\"line\">  var langs = $(&apos;ul.lang li&apos;); // 拿到JavaScript, Python, Swift, Scheme和Haskell</div><div class=\"line\">var arr = langs.map(function () &#123;</div><div class=\"line\">     return this.innerHTML;</div><div class=\"line\">&#125;).get(); // 用get()拿到包含string的Array：[&apos;JavaScript&apos;, &apos;Python&apos;, &apos;Swift&apos;, &apos;Scheme&apos;, &apos;Haskell&apos;]</div><div class=\"line\">//用jQuery获取表单的JSON字符串，以key：value的格式输出</div><div class=\"line\">Var json = &#123;&#125;;</div><div class=\"line\">var keys = $(&apos;#表单的id input&apos;);</div><div class=\"line\">keys.map(function () &#123;</div><div class=\"line\">    json[this.name] = this.value;//一个个生成数组元素</div><div class=\"line\">&#125;);</div><div class=\"line\">json = JSON.stringify(json);</div><div class=\"line\">alert(json);</div><div class=\"line\"></div><div class=\"line\">/******** first()、last()和slice()********/</div><div class=\"line\">var langs = $(&apos;ul.lang li&apos;); // 拿到JavaScript, Python, Swift, Scheme和Haskell</div><div class=\"line\">var js = langs.first(); // JavaScript，相当于$(&apos;ul.lang li:first-child&apos;)</div><div class=\"line\">var haskell = langs.last(); // Haskell, 相当于$(&apos;ul.lang li:last-child&apos;)</div><div class=\"line\">var sub = langs.slice(2, 4); // Swift, Scheme, 参数和数组的slice()方法一致</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n"}