{"tags":[{"name":"jQuery","permalink":"http://yoursite.com/tags/jQuery/","url":"\\async\\tags\\jQuery.json","count":9}],"categories":[],"url":"\\async\\posts\\2017\\06\\04\\jQuery-选择器.json","date":1496580626000,"path":{"year":2017,"month":6,"day":4,"name":"jQuery-选择器"},"title":"jQuery-选择器","permalink":"http://yoursite.com/2017/06/04/jQuery-选择器/","content":"<h3 id=\"关于jQuery选择器\"><a href=\"#关于jQuery选择器\" class=\"headerlink\" title=\"关于jQuery选择器\"></a>关于jQuery选择器</h3><ul>\n<li>选择器是jQuery的核心。</li>\n<li>使用jQuery选择器可改善以往复杂的DOM选择操作，它能快速定位到一个或多个DOM节点。<br>让开发者可以更少的处理复杂选择过程与性能优化，更多专注业务逻辑的编写。</li>\n</ul>\n<h3 id=\"一、基础选择器。\"><a href=\"#一、基础选择器。\" class=\"headerlink\" title=\"一、基础选择器。\"></a>一、基础选择器。</h3><p>1.全选择器（*选择器）</p>\n<ul>\n<li>选出获取文档中所有的元素</li>\n<li>语法：<code>$( &quot;*&quot; )</code></li>\n<li>相当于<code>document.getElementsByTagName(&#39;*&#39;);</code></li>\n</ul>\n<p>2.<code>ID</code>选择器</p>\n<ul>\n<li>语法：<code>$(&#39;#id号&#39;)</code><br>如<code>var div = $(&#39;#abc&#39;);</code>  //选择查找<code>&lt;div id=&quot;abc&quot;&gt;</code>;</li>\n<li>选择器返回的对象是jQuery对象，类似数组，它的每个元素都是一个引用了DOM节点的对象；</li>\n<li>以上面的查找为例，如果id为abc的<code>&lt;div&gt;</code>存在，返回的jQuery对象如下：<br><code>[&lt;div id=&quot;abc&quot;&gt;...&lt;/div&gt;]</code>;<br>如果id为abc的<code>&lt;div&gt;</code>不存在，返回的jQuery对象为：<code>[]</code>;<br>总之jQuery的选择器不会返回<code>undefined</code>或者<code>null</code>，这样的好处是你不必在下一行判断<code>if (div === undefined)</code>;</li>\n<li>jQuery对象和DOM对象之间可以互相转化：<br>1)<code>var div = $(&#39;#abc&#39;);</code> // jQuery对象<br>2)<code>var divDom = div.get(0);</code>// 假设存在div，获取第1个DOM元素<br>3)<code>var another = $(divDom);</code>// 重新把DOM包装为jQuery对象 </li>\n<li>通常情况下你不需要获取DOM对象，直接使用jQuery对象更加方便。<br>如果你拿到了一个DOM对象，那可以简单地调用<code>$(aDomObject)</code>把它变成jQuery对象，这样就可以方便地使用jQuery的API了。</li>\n</ul>\n<p>3.<code>tag</code>元素选择器</p>\n<ul>\n<li>根据给定<code>（html）标记名称</code>选择搜索指定元素标签名的所有节点，这个是一个合集的操作。</li>\n<li>同样的也有原生方法<code>getElementsByTagName()函数</code>支持,不过一般也需要通过循环进行操作</li>\n<li>语法：<code>$(&#39;tag名称&#39;)</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ps = $(&apos;p&apos;);  // 返回所有&lt;p&gt;节点</div><div class=\"line\">ps.length;        // 计算页面有多少个&lt;p&gt;节点</div><div class=\"line\">//也可以：</div><div class=\"line\">$(&quot;p&quot;).css(&quot;border&quot;, &quot;3px solid red&quot;); //同意对所有&lt;p&gt;元素操作</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>4.<code>class</code>类选择器</p>\n<ul>\n<li>相对id选择器来说，效率相对会低一点，但优势是可以多选统一处理，而不是像原生<code>getElementsByClassName()函数</code>一样需要使用循环才能进行处理。</li>\n<li>语法：<code>$(&#39;.class名称&#39;)</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// &lt;div class=&quot;red&quot;&gt;...&lt;/div&gt;</div><div class=\"line\">// &lt;p class=&quot;green red&quot;&gt;...&lt;/p&gt;</div><div class=\"line\">var a = $(&apos;.red&apos;);      //查找所有包含red的节点</div><div class=\"line\">var a = $(&apos;.red.green&apos;); // 查找所有同时包含red和green的节点(注意没有空格！)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>不难发现，id、tag、class都可以通过原生的方法获取到对应的节点，但需考虑一个兼容性的问题:<br>  1)IE会将注释节点实现为元素，所以在IE中调用getElementsByTagName里面会包含注释节点，这个通常是不应该的；<br>  2)getElementById的参数在IE8及较低的版本不区分大小写；<br>  3)IE7及较低的版本中，表单元素中，如果表单A的name属性名用了另一个元素B的ID名并且A在B之前，那么getElementById会选中A；<br>  4)IE8及较低的版本，浏览器不支持getElementsByClassName；</p>\n</blockquote>\n<p>5.按属性查找</p>\n<ul>\n<li>语法：<code>$(&#39; [属性=属性值] &#39; )</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//在一个表单中按属性来查找</div><div class=\"line\">var email = $(&apos;[name=email]&apos;); ` // 找出&lt;??? name=&quot;email&quot;&gt;</div><div class=\"line\">var passwordInput = $(&apos;[type=password]&apos;); // 找出&lt;??? type=&quot;password&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">//当属性值包含空格等特殊字符时，需用双引号括起来</div><div class=\"line\">var a = $(&apos;[items=&quot;A B&quot;]&apos;); // 找出&lt;??? items=&quot;A B&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">//还可以使用前缀查找或者后缀查找</div><div class=\"line\">var icons = $(&apos;[name^=icon]&apos;); // 找出所有name属性值以icon开头的DOM</div><div class=\"line\">var names = $(&apos;[name$=with]&apos;); // 找出所有name属性值以with结尾的DOM</div><div class=\"line\"></div><div class=\"line\">//十分适合通过class属性查找，且不受class包含多个名称影响的情况</div><div class=\"line\">var icons = $(&apos;[class^=&quot;icon-&quot;]&apos;); // 找出所有class包含至少一个以`icon-`开头的DOM</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>6.组合选择器<br>   组合查找就是把上述简单选择器<code>组合</code>起来使用<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//根据tag和属性来组合查找</div><div class=\"line\">var emailInput = $(&apos;input[name=email]&apos;); //查找&lt;input name=&quot;email&quot;&gt;</div><div class=\"line\">//根据tag和class来组合查找</div><div class=\"line\">var tr = $(&apos;tr.red&apos;);  // 找出&lt;tr class=&quot;red ...&quot;&gt;...&lt;/tr&gt;</div></pre></td></tr></table></figure></p>\n<p>7.多项选择器<br>   多项选择器就是把多个选择器用,组合起来一块选，用逗号隔开：<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&apos;p,div&apos;); // 把&lt;p&gt;和&lt;div&gt;都选出来</div><div class=\"line\">$(&apos;p.red,p.green&apos;); // 把&lt;p class=&quot;red&quot;&gt;和&lt;p class=&quot;green&quot;&gt;都选出来</div><div class=\"line\">//注意：选出来的元素是按照它们在HTML中出现的顺序排列的，而且不会有重复元素。如&lt;p class=&quot;red green&quot;&gt;不会被上面的$(&apos;p.red,p.green&apos;)选择两次。</div></pre></td></tr></table></figure></p>\n<h3 id=\"二、层级选择器\"><a href=\"#二、层级选择器\" class=\"headerlink\" title=\"二、层级选择器\"></a>二、层级选择器</h3><ul>\n<li>因为DOM的结构就是层级结构，所以经常要根据层级关系进行选择；</li>\n<li>如果两个DOM元素具有层级关系（子元素，后代元素，兄弟元素，相邻元素），就可以用层级选择器来选择； </li>\n<li>层级选择器相比单个的选择器好处在于：它缩小了选择范围。因为首先要定位父节点，才能选择相应的子节点，这样避免了页面其他不相关的元素；</li>\n</ul>\n<p>1.后代选择器</p>\n<ul>\n<li>选择给定的祖先元素的所有后代元素，一个元素的后代可能是该元素的一个孩子、孙子、曾孙</li>\n<li>语法：<code>$(&#39;ancestor descendant&#39;)</code> //层级之间用空格隔开</li>\n<li>注意：在其他选择器中如存在<code>空格</code>，则有可能变为后代选择器</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">   &lt;!-- HTML结构 --&gt;</div><div class=\"line\">   &lt;div class=&quot;testing&quot;&gt;</div><div class=\"line\">      &lt;ul class=&quot;lang&quot;&gt;</div><div class=\"line\">        &lt;li class=&quot;lang-javascript&quot;&gt;JavaScript&lt;/li&gt;</div><div class=\"line\">        &lt;li class=&quot;lang-python&quot;&gt;Python&lt;/li&gt;</div><div class=\"line\">        &lt;li class=&quot;lang-lua&quot;&gt;Lua&lt;/li&gt;</div><div class=\"line\">      &lt;/ul&gt;</div><div class=\"line\">   &lt;/div&gt;</div><div class=\"line\">   //因为&lt;div&gt;和&lt;ul&gt;都是&lt;li&gt;的祖先节点，所以以下两种方式都可选出相应的&lt;li&gt;节点：</div><div class=\"line\">   $(&apos;ul.lang li.lang-javascript&apos;); // [&lt;li class=&quot;lang-javascript&quot;&gt;JavaScript&lt;/li&gt;]</div><div class=\"line\">   $(&apos;div.testing li.lang-javascript&apos;); // [&lt;li class=&quot;lang-javascript&quot;&gt;JavaScript&lt;/li&gt;]</div><div class=\"line\">   </div><div class=\"line\">//要选择所有的&lt;li&gt;节点：</div><div class=\"line\">   $(&apos;ul.lang li&apos;);</div><div class=\"line\"></div><div class=\"line\">   //选择范围限定在name属性为upload的表单里的&lt;input&gt;，而其他表单的不会被选择：</div><div class=\"line\">   $(&apos;form[name=upload] input&apos;);</div><div class=\"line\"></div><div class=\"line\">   $(&apos;form.test p input&apos;); //在form表单选择被&lt;p&gt;包含的&lt;input&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2.子选择器</p>\n<ul>\n<li>子选择器类似层级选择器，但限定了层级关系必须是<code>父子关系</code>。</li>\n<li>选择所有指定”parent”父元素中指定的”child”<code>直接子元素</code>。（要求<code>&lt;child&gt;</code>节点必须是<code>&lt;parent&gt;</code>节点的直属子节点）</li>\n<li>语法：<code>$( &#39;parent &gt; child&#39; )</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//对于上例HTML结构：</div><div class=\"line\">$(&apos;ul.lang &gt; li.lang-javascript&apos;); // 可以选出[&lt;li class=&quot;lang-javascript&quot;&gt;JavaScript&lt;/li&gt;]</div><div class=\"line\">$(&apos;div.testing &gt; li.lang-javascript&apos;); // [], 无法选出，因为&lt;div&gt;和&lt;li&gt;不构成父子关系</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>3.相邻兄弟选择器</p>\n<ul>\n<li>选择所有紧接在”prev”元素后的”next”元素</li>\n<li>语法：<code>$(&#39;prev + next&#39;)</code></li>\n</ul>\n<p>4.一般兄弟选择器</p>\n<ul>\n<li>匹配”prev”元素之后的所有<code>兄弟元素</code>。具有相同的父元素，并匹配过滤”siblings”选择器</li>\n<li>语法：<code>$(&#39;prev ~ siblings&#39;)</code></li>\n</ul>\n<ul>\n<li>层级选择器之间还是有很多相似与不同点:<br>1)层级选择器都有一个参考节点<br>2)后代选择器包含子选择器的选择的内容<br>3)相邻兄弟选择器和一般兄弟选择器所选择到的元素，必须在同一个父元素下<br>4)一般兄弟选择器包含相邻兄弟选择的内容</li>\n</ul>\n<h3 id=\"三、筛选选择器\"><a href=\"#三、筛选选择器\" class=\"headerlink\" title=\"三、筛选选择器\"></a>三、筛选选择器</h3><ul>\n<li>很多时候不能直接通过基本选择器与层级选择器找到我们想要的元素，为此jQuery提供了一系列的筛选选择器用来更快捷的找到所需的DOM元素。</li>\n<li>筛选选择器很多都不是CSS的规范，而是jQuery自己为了开发者的便利延展出来的选择器。</li>\n<li>筛选选择器的用法与<code>CSS中的伪元素</code>相似，选择器用<code>冒号“:”</code>开头。</li>\n</ul>\n<p>1.基本筛选选择器</p>\n<ul>\n<li>针对<code>元素DOM节点</code>进行筛选；</li>\n<li><img src=\"http://img.mukewang.com/57cd1df2000146de06020498.jpg\" alt=\"常用基本筛选选择器\"></li>\n<li>注意：<br> 1.<code>:eq()</code>, <code>:lt()</code>, <code>:gt()</code>, <code>:even</code> , <code>:odd</code>用来筛选他们前面的匹配表达式的集合元素，根据之前匹配的元素在进一步筛选，注意jQuery合集都是从<code>0</code>开始索引<br> 2.gt是一个段落筛选，从指定索引的下一个开始，<code>gt(1)</code>实际从<code>2</code>开始</li>\n<li><a href=\"http://www.imooc.com/code/8344\" target=\"_blank\" rel=\"external\">例子</a></li>\n</ul>\n<p>2.内容筛选选择器</p>\n<ul>\n<li>针对<code>内容</code>进行筛选；</li>\n<li><img src=\"http://img.mukewang.com/57cd20bf0001a97f05290214.jpg\" alt=\"常用内容筛选选择器\"></li>\n<li>注意：<br> 1.<code>:contains</code>与<code>:has</code>都有查找的意思，但<code>contains查找</code>包含<code>“指定文本”的元素</code>，而<code>has查找</code>包含<code>“指定元素”的元素</code>;<br> 2.如果<code>:contains</code>匹配的文本<code>包含在元素的子元素</code>中，同样认为是符合条件的;<br> 3.<code>:parent</code>与<code>:empty</code>是相反的，两者所涉及的子元素，包括文本节点在内。</li>\n<li><a href=\"http://www.imooc.com/code/8345\" target=\"_blank\" rel=\"external\">例子</a></li>\n</ul>\n<p>3.可见性筛选选择器</p>\n<ul>\n<li>针对元素的显示状态与隐藏状态进行筛选；</li>\n<li>如果元素中占据文档中一定的空间(宽度或高度大于零),元素被认为是可见的。<br>元素设置<code>visibility: hidden</code>或<code>opacity: 0</code>也是是可见的，因为他们仍然占用空间布局。所以<code>:hidden选择器</code>对它们不起作用。</li>\n<li>不在文档中(不占用空间布局)的元素是被认为是不可见(“隐藏”)的。</li>\n<li>语法：<br> 1.<code>$(&#39;div:visible&#39;);</code> //选择所有可见的div<br> 2.<code>$(&#39;div:hidden&#39;);</code>  //选择所有隐藏的div</li>\n<li>能被<code>:hidden选择器</code>选择出的元素：<br> 1.CSS display的值为<code>none</code>的;<br> 2.<code>type=&quot;hidden&quot;</code>的表单元素;<br> 3.<code>width</code>和<code>height</code>都显式设置为<code>0</code>;<br> 4.一个元素的祖先元素是隐藏的，该元素是不会在页面上显示;</li>\n<li><a href=\"http://www.imooc.com/code/8346\" target=\"_blank\" rel=\"external\">例子</a></li>\n</ul>\n<p>4.属性筛选选择器</p>\n<ul>\n<li>针对元素的<code>属性</code>进行筛选； </li>\n<li><img src=\"http://img.mukewang.com/57d654200001c46507360560.jpg\" alt=\"常用属性筛选选择器\"></li>\n<li>注意：<br>1.[att=val]、[att]、[att|=val]、[att~=val] 属于CSS2.1规范<br>2.[ns|attr]、[att^=val]、[att<em>=val]、[att$=val] 属于CSS3规范<br>3.[name!=”value”] 属于jQuery 扩展的选择器<br>4.CSS选择器无论CSS2.1版本还是CSS3版本，IE7和IE8都支持，webkit、Gecko核心及Opera也都支持，只有IE6以下浏览器才不支持<br>5.[attr=”value”]和[attr</em>=”value”]是最实用的;<br>6.<code>[attr=&quot;value&quot;]</code>能帮我们定位不同类型的元素，特别是表单form元素的操作<br>7.特别注意：如与便签名一起使用时，注意中间是否有空格。<br> （1）<code>$(&quot;div[name=&#39;p1&#39;]&quot;)</code> —属性name=p1的div元素<br> （2）<code>$(&quot;div [name=&#39;p1&#39;]&quot;)</code>—div后代中属性name=p1的元素(不一定为div元素)</li>\n<li><a href=\"http://www.imooc.com/code/8347\" target=\"_blank\" rel=\"external\">例子</a></li>\n</ul>\n<p>5.子元素筛选选择器</p>\n<ul>\n<li>子元素筛选选择器不常使用，其筛选规则比起其它的选择器稍微要复杂点； </li>\n<li><img src=\"http://img.mukewang.com/559105da0001301105960331.jpg\" alt=\"常用子元素筛选选择器\"></li>\n<li>注意：<br>1.<code>:first</code>只匹配一个单独的元素，但是:first-child选择器可以匹配多个：即为每个父级元素匹配第一个子元素。这相当于:nth-child(1)<br>2.<code>:last</code>只匹配一个单独的元素， :last-child 选择器可以匹配多个元素：即，为每个父级元素匹配最后一个子元素<br>3.如果子元素只有一个的话，<code>:first-child</code>与<code>:last-child</code>是同一个<br>4.<code>:only-child</code>匹配某个元素是父元素中唯一的子元素，就是说当前子元素是父元素中唯一的元素，则匹配<br>5.jQuery实现<code>:nth-child(n)</code>是严格来自CSS规范，所以n值是“索引”。<br>  也就是说，从1开始计数，<code>:nth-child(index)</code>从1开始的，而<code>eq(index)</code>是从0开始的<br>6.<code>nth-child(n)</code>与<code>:nth-last-child(n)</code>的区别前者是<code>从前往后</code>计算，后者<code>从后往前</code>计算</li>\n<li><a href=\"http://www.imooc.com/code/8348\" target=\"_blank\" rel=\"external\">例子</a></li>\n</ul>\n<h3 id=\"四、“表单”选择器\"><a href=\"#四、“表单”选择器\" class=\"headerlink\" title=\"四、“表单”选择器\"></a>四、“表单”选择器</h3><p>1.表单元素选择器</p>\n<ul>\n<li>针对表单元素，jQuery还有一组表单选择器：<br>   1)<code>$(&quot;:input&quot;)</code>：选择所有<code>&lt;input&gt;，&lt;textarea&gt;，&lt;select&gt;和&lt;button&gt;</code>元素；<br>   2)<code>$(&quot;:text&quot;)</code>：匹配所有文本框<br>   3)<code>$(&quot;:password&quot;)</code>：匹配所有密码框<br>   4)<code>$(&quot;:file&quot;)</code>：匹配所有文件域，即<code>&lt;input type=&quot;file&quot;&gt;</code>，和<code>input[type=file]</code>一样；<br>   5)<code>$(&quot;:checkbox&quot;)</code>：匹配所有复选框，和<code>input[type=checkbox]</code>一样；<br>   6)<code>$(&quot;:radio&quot;)</code>：匹配所有单选按钮，和<code>input[type=radio]</code>一样；<br>   7)<code>$(&quot;:button&quot;)</code>：匹配所有按钮<br>   8)<code>$(&quot;:submit&quot;)</code>：匹配所有提交按钮<br>   9)<code>$(&quot;:reset&quot;)</code>：匹配所有重置按钮<br>  10)<code>$(&quot;:image&quot;)</code>：匹配所有图像域<br>  11)<code>$(&quot;:focus&quot;)</code>：匹配当前为输入焦点的元素，例如把光标放到一个<code>&lt;input&gt;</code>上，用<code>$(&#39;input:focus&#39;)</code>就可以选出；</li>\n</ul>\n<p>2.表单对象属性筛选选择器</p>\n<ul>\n<li>也是专门针对表单元素的选择器，可附加在其他选择器的后面。</li>\n<li>常用的表单对象属性筛选选择器：<br>   1)<code>$(&quot;:enabled&quot;)</code>：选取可用的表单元素，即匹配所有可以正常输入的<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>等，也就是不变暗的输入；<br>   2)<code>$(&quot;:disabled&quot;)</code>：选取不可用的表单元素，和<code>:enabled</code>正好相反，选择那些不能输入的。<br>   3)<code>$(&quot;:checked&quot;)</code>：选取当前勾上的<code>&lt;input&gt;</code>元素(单选框与复选框)，用这个选择器可以立刻获得用户选择的项目，如<code>$(&#39;input[type=radio]:checked&#39;)</code>；<br>   4)<code>$(&quot;:selected &quot;)</code>：选取被选中的<code>&lt;option&gt;</code>元素，适用于下拉列表元素</li>\n<li>注意：在某些浏览器中，选择器<code>:checked</code>可能会错误选取到<code>&lt;option&gt;</code>元素，所以保险起见换用选择器<code>input:checked</code>，确保只会选取<code>&lt;input&gt;</code>元素</li>\n</ul>\n<h3 id=\"五、特殊选择器this\"><a href=\"#五、特殊选择器this\" class=\"headerlink\" title=\"五、特殊选择器this\"></a>五、特殊选择器<code>this</code></h3><ul>\n<li><p>this:<br>1）this是JavaScript中的关键字，指的是当前的上下文对象，简单的说就是方法/属性的所有者<br>2）在JavaScript中this是动态的，也就是说这个上下文对象都是可以被动态改变的(可以通过call,apply等方法)<br>3）同样的在DOM中this就是指向了这个html元素对象，因为this就是DOM元素本身的一个引用<br>4）通过addEventListener绑定的事件回调中，this指向的是当前的dom对象，所以再次修改这样对象的样式，只需要通过this获取到引用即可：<code>this.style.color = &quot;red&quot;</code></p>\n</li>\n<li><p>由于上述操作仍不太方便，因为要涉及到样式的兼容。所以用jQuery处理就简单得多，也就是通过把<code>this</code>加工成<code>jQuery对象</code>。<br>方法：通过把<code>$()</code>方法传入<code>当前的元素对象的引用this</code>，就可把这个this加工成jQuery对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&apos;p&apos;).click(function()&#123; </div><div class=\"line\">   var $this= $(this) //把p元素转化成jQuery的对象</div><div class=\"line\">   $this.css(&apos;color&apos;,&apos;red&apos;) //再进行相关操作</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>注意区分：<br>1）<code>this</code>，表示当前的上下文对象是一个html对象，可以调用html对象所拥有的属性和方法。<br>2）<code>$(this)</code>，代表的上下文对象是一个jquery的上下文对象，可以调用jQuery的方法和属性值。</p>\n</li>\n</ul>\n<h3 id=\"六、查找和过滤\"><a href=\"#六、查找和过滤\" class=\"headerlink\" title=\"六、查找和过滤\"></a>六、查找和过滤</h3><p>通常情况下选择器就可以直接定位到我们想要的元素。但当我们拿到一个jQuery对象后，还可以以这个对象为基准进行查找和过滤。<br>1.查找<br>     1)<code>find()方法</code>：用于在某个节点的所有子节点中查找<br>     2)<code>parent()方法</code>：用于从当前节点开始向上查找<br>     3)<code>next()和prev()方法</code>：用于位于同一层级的节点<br>     4)实例：<br>     <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- HTML结构 --&gt;</div><div class=\"line\">&lt;ul class=&quot;lang&quot;&gt;</div><div class=\"line\">  &lt;li class=&quot;js dy&quot;&gt;JavaScript&lt;/li&gt;</div><div class=\"line\">  &lt;li class=&quot;dy&quot;&gt;Python&lt;/li&gt;</div><div class=\"line\">  &lt;li id=&quot;swift&quot;&gt;Swift&lt;/li&gt;</div><div class=\"line\">  &lt;li class=&quot;dy&quot;&gt;Scheme&lt;/li&gt;</div><div class=\"line\">  &lt;li name=&quot;haskell&quot;&gt;Haskell&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">/********find()********/</div><div class=\"line\">var ul = $(&apos;ul.lang&apos;); // 获得&lt;ul&gt;</div><div class=\"line\">var dy = ul.find(&apos;.dy&apos;); // 获得JavaScript, Python, Scheme</div><div class=\"line\">var swf = ul.find(&apos;#swift&apos;); // 获得Swift</div><div class=\"line\">var hsk = ul.find(&apos;[name=haskell]&apos;); // 获得Haskell</div><div class=\"line\">/******* parent()*******/</div><div class=\"line\">var swf = $(&apos;#swift&apos;); // 获得Swift</div><div class=\"line\">var parent = swf.parent(); // 获得Swift的上层节点&lt;ul&gt;</div><div class=\"line\">var a = swf.parent(&apos;div.red&apos;); // 从Swift的父节点开始向上查找，直到找到某个符合条件的节点并返回</div><div class=\"line\">/******** next()和prev()方法********/</div><div class=\"line\">var swift = $(&apos;#swift&apos;);</div><div class=\"line\">swift.next(); // Scheme</div><div class=\"line\">swift.next(&apos;[name=haskell]&apos;); // Haskell，因为Haskell是后续第一个符合选择器条件的节点</div><div class=\"line\">swift.prev(); // Python</div><div class=\"line\">swift.prev(&apos;.js&apos;); // JavaScript，因为JavaScript是往前第一个符合选择器条件的节点</div></pre></td></tr></table></figure></p>\n<p>2.过滤<br>     1)<code>filter()方法</code>：用于过滤掉不符合选择器条件的节点或者传入一个函数<br>     2)<code>map()方法</code>：用于把一个jQuery对象包含的若干DOM节点转化为其他对象<br>     3)<code>first()、last()和slice()方法</code>：用于jQuery对象包含不止一个DOM节点时返回一个新的jQuery对象，把不需要的DOM节点去掉<br>     4)实例：<br>     <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- HTML结构 --&gt;</div><div class=\"line\">&lt;ul class=&quot;lang&quot;&gt;</div><div class=\"line\">   &lt;li class=&quot;js dy&quot;&gt;JavaScript&lt;/li&gt;</div><div class=\"line\">   &lt;li class=&quot;dy&quot;&gt;Python&lt;/li&gt;</div><div class=\"line\">   &lt;li id=&quot;swift&quot;&gt;Swift&lt;/li&gt;</div><div class=\"line\">   &lt;li class=&quot;dy&quot;&gt;Scheme&lt;/li&gt;</div><div class=\"line\">   &lt;li name=&quot;haskell&quot;&gt;Haskell&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">/******** filter ()********/</div><div class=\"line\">var langs = $(&apos;ul.lang li&apos;); // 拿到JavaScript, Python, Swift, Scheme和Haskell</div><div class=\"line\">var a = langs.filter(&apos;.dy&apos;); // 拿到JavaScript, Python, Scheme</div><div class=\"line\">//传入一个函数</div><div class=\"line\">//注意函数内部的this被绑定为DOM对象而不是jQuery对象</div><div class=\"line\">var langs = $(&apos;ul.lang li&apos;); // 拿到JavaScript, Python, Swift, Scheme和Haskell</div><div class=\"line\">langs.filter(function ()&#123;</div><div class=\"line\">    return this.innerHTML.indexOf(&apos;S&apos;) === 0; // 返回S开头的节点</div><div class=\"line\">&#125;); // 拿到Swift, Scheme</div><div class=\"line\"></div><div class=\"line\">/******** map ()********/</div><div class=\"line\">  var langs = $(&apos;ul.lang li&apos;); // 拿到JavaScript, Python, Swift, Scheme和Haskell</div><div class=\"line\">var arr = langs.map(function () &#123;</div><div class=\"line\">     return this.innerHTML;</div><div class=\"line\">&#125;).get(); // 用get()拿到包含string的Array：[&apos;JavaScript&apos;, &apos;Python&apos;, &apos;Swift&apos;, &apos;Scheme&apos;, &apos;Haskell&apos;]</div><div class=\"line\">//用jQuery获取表单的JSON字符串，以key：value的格式输出</div><div class=\"line\">Var json = &#123;&#125;;</div><div class=\"line\">var keys = $(&apos;#表单的id input&apos;);</div><div class=\"line\">keys.map(function () &#123;</div><div class=\"line\">    json[this.name] = this.value;//一个个生成数组元素</div><div class=\"line\">&#125;);</div><div class=\"line\">json = JSON.stringify(json);</div><div class=\"line\">alert(json);</div><div class=\"line\"></div><div class=\"line\">/******** first()、last()和slice()********/</div><div class=\"line\">var langs = $(&apos;ul.lang li&apos;); // 拿到JavaScript, Python, Swift, Scheme和Haskell</div><div class=\"line\">var js = langs.first(); // JavaScript，相当于$(&apos;ul.lang li:first-child&apos;)</div><div class=\"line\">var haskell = langs.last(); // Haskell, 相当于$(&apos;ul.lang li:last-child&apos;)</div><div class=\"line\">var sub = langs.slice(2, 4); // Swift, Scheme, 参数和数组的slice()方法一致</div></pre></td></tr></table></figure></p>\n<h3 id=\"综合实例\"><a href=\"#综合实例\" class=\"headerlink\" title=\"综合实例\"></a><a href=\"http://www.imooc.com/code/8529\" target=\"_blank\" rel=\"external\">综合实例</a></h3>"}