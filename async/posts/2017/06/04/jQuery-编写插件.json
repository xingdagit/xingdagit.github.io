{"tags":[{"name":"jQuery","permalink":"http://yoursite.com/tags/jQuery/","url":"\\async\\tags\\jQuery.json","count":9}],"categories":[],"url":"\\async\\posts\\2017\\06\\04\\jQuery-编写插件.json","date":1496590660000,"path":{"year":2017,"month":6,"day":4,"name":"jQuery-编写插件"},"title":"jQuery-编写插件","permalink":"http://yoursite.com/2017/06/04/jQuery-编写插件/","content":"<h3 id=\"扩展jQuery——-编写jQuery插件\"><a href=\"#扩展jQuery——-编写jQuery插件\" class=\"headerlink\" title=\"扩展jQuery——-编写jQuery插件\"></a>扩展jQuery——-编写jQuery插件</h3><ul>\n<li>虽然使用jQuery对象可以操作一组DOM，而且支持链式操作，用起来很方便。但jQuery内置的方法永远不可能满足所有的需求。</li>\n<li>比如要高亮显示某些DOM元素，用jQuery可以这么实现：<code>$(&#39;span.hl&#39;).css(&#39;backgroundColor&#39;, &#39;#fffceb&#39;).css(&#39;color&#39;, &#39;#d85030&#39;);</code>。但当对多个元素设置时就要重复写，而且要增加样式时也十分麻烦(每条都要增加)。</li>\n<li>编写jQuery插件，我们就能将其统一起来，实现一个自定义方法<code>highlight()</code>，使调用以及后续修改更简单：<code>$(&#39;span.hl&#39;).highlight();</code></li>\n<li><p>给jQuery对象绑定一个新方法是通过扩展<code>$.fn对象</code>实现的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//函数内部的this在调用时被绑定为jQuery对象，所以函数内部代码可以正常调用所有jQuery对象的方法</div><div class=\"line\">$.fn.highlight = function () &#123;</div><div class=\"line\">  // this已绑定为当前jQuery对象:</div><div class=\"line\">  this.css(&apos;backgroundColor&apos;, &apos;#fffceb&apos;).css(&apos;color&apos;, &apos;#d85030&apos;);</div><div class=\"line\">  return this;</div><div class=\"line\">&#125;</div><div class=\"line\">//因为jQuery对象支持链式操作，return this的作用就是为了让自己写的扩展方法也能继续链式调用下去：</div><div class=\"line\">$(&apos;span.hl&apos;).highlight().slideDown();</div><div class=\"line\">//不然，用户调用的时候就要把上面的代码拆成两行了</div></pre></td></tr></table></figure>\n<p>也可以给自定义方法加个参数，让用户自己把参数用对象传进去：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.highlight = function (options) &#123;</div><div class=\"line\">  // 要考虑到各种情况:</div><div class=\"line\">  // options为undefined</div><div class=\"line\">  // options只有部分key</div><div class=\"line\">  var bgcolor = options &amp;&amp; options.backgroundColor || &apos;#fffceb&apos;;</div><div class=\"line\">  var color = options &amp;&amp; options.color || &apos;#d85030&apos;;</div><div class=\"line\">  this.css(&apos;backgroundColor&apos;, bgcolor).css(&apos;color&apos;, color);</div><div class=\"line\">  return this;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>另一种方法是使用jQuery提供的辅助方法：<br><code>$.extend(target, obj1, obj2, ...)</code>。<br>它把多个object对象的属性合并到第一个target对象中，遇到同名属性，总是使用靠后的对象的值，也就是越往后优先级越高：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 把默认值和用户传入的options合并到对象&#123;&#125;中并返回:</div><div class=\"line\">var opts = $.extend(&#123;&#125;, &#123;</div><div class=\"line\">  backgroundColor: &apos;#00a8e6&apos;,</div><div class=\"line\">  color: &apos;#ffffff&apos;</div><div class=\"line\">&#125;, options);</div></pre></td></tr></table></figure>\n</li>\n<li><p>但上述的方法仍有一个不足：设定的默认值不能允许用户修改，每次调用都需要传入自定义的设置。下面为<code>highlight</code>函数的最佳实现方法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.highlight = function (options) &#123;</div><div class=\"line\">  var opts = $.extend(&#123;&#125;, $.fn.highlight.defaults, options); // 合并默认值和用户设定值</div><div class=\"line\">  this.css(&apos;backgroundColor&apos;, opts.backgroundColor).css(&apos;color&apos;, opts.color);</div><div class=\"line\">  return this;</div><div class=\"line\">&#125;</div><div class=\"line\">// 设定默认值:</div><div class=\"line\">$.fn.highlight.defaults = &#123;</div><div class=\"line\">  color: &apos;#d85030&apos;,</div><div class=\"line\">  backgroundColor: &apos;#fff8de&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用上述最佳方法，就只需先一次性设定默认值，然后可以简单地调用<code>highlight()</code>了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.highlight.defaults.color = &apos;#fff&apos;;</div><div class=\"line\">$.fn.highlight.defaults.backgroundColor = &apos;#000&apos;;</div><div class=\"line\">$(&apos;#test-highlight p:first-child span&apos;).highlight();</div><div class=\"line\">$(&apos;#test-highlight p:last-child span&apos;).highlight(&#123;</div><div class=\"line\">  color: &apos;#dd1144&apos;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>编写一个jQuery插件的原则：<br>1、给<code>$.fn</code>绑定函数，实现插件的代码逻辑；<br>2、插件函数最后要<code>return this</code>;以支持链式调用；<br>3、插件函数要有默认值，绑定在<code>$.fn.&lt;pluginName&gt;.defaults</code>上；<br>4、用户在调用时可传入设定值以便覆盖默认值。</p>\n</li>\n<li><p>还可以针对特定元素的扩展：主要用到<code>filter()方法</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">//要给所有指向外链的超链接加上一个跳转按钮提示</div><div class=\"line\">$.fn.external = function () &#123;</div><div class=\"line\">   // return返回的each()返回结果，支持链式调用:</div><div class=\"line\">   return this.filter(&apos;a&apos;).each( function () &#123;</div><div class=\"line\">       // 注意: each()内部的回调函数的this绑定为DOM本身!</div><div class=\"line\">       var a = $(this);</div><div class=\"line\">       var url = a.attr(&apos;href&apos;);</div><div class=\"line\">       if (url &amp;&amp; (url.indexOf(&apos;http://&apos;)===0 || url.indexOf(&apos;https://&apos;)===0))</div><div class=\"line\">       &#123;</div><div class=\"line\">          a.attr(&apos;href&apos;, &apos;#0&apos;)</div><div class=\"line\">           .removeAttr(&apos;target&apos;)</div><div class=\"line\">           .append(&apos; &lt;i class=&quot;uk-icon-external-link&quot;&gt;&lt;/i&gt;&apos;)</div><div class=\"line\">           .click(function () &#123;</div><div class=\"line\">              if(confirm(&apos;你确定要前往&apos; + url + &apos;？&apos;))</div><div class=\"line\">              &#123;</div><div class=\"line\">                  window.open(url);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">//用户调用如下：</div><div class=\"line\">$(&apos;#main a&apos;).external();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n"}