{"tags":[{"name":"JS","permalink":"http://yoursite.com/tags/JS/","url":"\\async\\tags\\JS.json","count":15}],"categories":[],"url":"\\async\\posts\\2017\\06\\04\\jQuery-操作DOM.json","date":1496582501000,"path":{"year":2017,"month":6,"day":4,"name":"jQuery-操作DOM"},"title":"jQuery-操作DOM","permalink":"http://yoursite.com/2017/06/04/jQuery-操作DOM/","content":"<h3 id=\"jQuery操作DOM\"><a href=\"#jQuery操作DOM\" class=\"headerlink\" title=\"jQuery操作DOM\"></a>jQuery操作DOM</h3><ul>\n<li>用选择器拿到了jQuery对象之后做什么呢——–操作对应的DOM节点</li>\n<li>用jQuery对象操作DOM，可改善JavaScript操作DOM的许多不足，而且不需要考虑浏览器差异了，全部统一操作。</li>\n<li>一个jQuery对象可以包含(选择)0个或任意个DOM对象，它的方法实际上会作用在对应的每个DOM节点上。 </li>\n<li>jQuery对象有“批量操作”的特点。</li>\n<li>jQuery对象的所有方法都返回一个jQuery对象（可能是新的也可能是自身），因此可设置<code>var 变量名=$(‘….’);</code>，再利用该变量名来调用方法。</li>\n</ul>\n<ol>\n<li><p>修改class属性</p>\n<ul>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div = $(&apos;#test-div&apos;);</div><div class=\"line\">div.hasClass(&apos;highlight&apos;); // false， class是否包含highlight</div><div class=\"line\">div.addClass(&apos;highlight&apos;); // 添加highlight这个class</div><div class=\"line\">div.removeClass(&apos;highlight&apos;); // 删除highlight这个class</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>修改Text和HTML</p>\n<ul>\n<li>jQuery对象的<code>text()</code>和<code>html()</code>方法分别获取和设置节点的<code>文本</code>和<code>原始HTML文本</code></li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- HTML结构 --&gt;</div><div class=\"line\">&lt;ul id=&quot;test-ul&quot;&gt;</div><div class=\"line\">  &lt;li class=&quot;js&quot;&gt;JavaScript&lt;/li&gt;</div><div class=\"line\">  &lt;li name=&quot;book&quot;&gt;Java &amp;amp; JavaScript&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\">//分别获取文本和HTML：</div><div class=\"line\">$(&apos;#test-ul li[name=book]&apos;).text(); // &apos;Java &amp; JavaScript&apos;</div><div class=\"line\">$(&apos;#test-ul li[name=book]&apos;).html(); // &apos;Java &amp;amp; JavaScript&apos;</div><div class=\"line\">//分别设置文本和HTML：</div><div class=\"line\">$(&apos;#test-ul li[name=book]&apos;). text(&apos;JavaScript &amp; ECMAScript&apos;);</div><div class=\"line\">$(&apos;#test-ul li.js&apos;)..html(&apos;&lt;span style=&quot;color: red&quot;&gt;JavaScript&lt;/span&gt;&apos;);</div><div class=\"line\">//也可以作用在一组DOM节点上</div><div class=\"line\">$(&apos;#test-ul li&apos;).text(&apos;JS&apos;); //两个&lt;li&gt;节点的文本都变成了JS</div><div class=\"line\">// id不存在的情况：</div><div class=\"line\">$(&apos;#not-exist&apos;).text(&apos;Hello&apos;); // 代码不报错，没有节点被设置为&apos;Hello&apos;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>修改CSS</p>\n<ul>\n<li>利用jQuery对象“批量操作”的特点，可方便的修改CSS。</li>\n<li>语法：jQuery对象.<code>css(&#39;name&#39;, &#39;value&#39;)</code>;</li>\n<li><code>css()方法</code>将作用于DOM节点的<code>style属性</code>，具有最高优先级。</li>\n<li>实例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- HTML结构 --&gt;</div><div class=\"line\">&lt;ul id=&quot;test-css&quot;&gt;</div><div class=\"line\">   &lt;li class=&quot;lang dy&quot;&gt;&lt;span&gt;JavaScript&lt;/span&gt;&lt;/li&gt;</div><div class=\"line\">   &lt;li class=&quot;lang&quot;&gt;&lt;span&gt;Java&lt;/span&gt;&lt;/li&gt;</div><div class=\"line\">   &lt;li class=&quot;lang dy&quot;&gt;&lt;span&gt;Python&lt;/span&gt;&lt;/li&gt;</div><div class=\"line\">   &lt;li class=&quot;lang&quot;&gt;&lt;span&gt;Swift&lt;/span&gt;&lt;/li&gt;</div><div class=\"line\">   &lt;li class=&quot;lang dy&quot;&gt;&lt;span&gt;Scheme&lt;/span&gt;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\">//css作用于1,3,5节点</div><div class=\"line\">$(&apos;#test-css li.dy&gt;span&apos;).css(&apos;background-color&apos;, &apos;#ffd351&apos;).css(&apos;color&apos;, &apos;red&apos;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>显示和隐藏DOM</p>\n<ul>\n<li>利用css()方法来设置CSS的display属性为none就可隐藏一个DOM。但要再显示这个DOM就需要恢复原有的display属性，这就要先记下来原有的display属性到底是block还是inline还是别的值。</li>\n<li>利用jQuery提供的<code>show()</code>和<code>hide()</code>方法，就不用关心其原display属性。</li>\n<li>注意：隐藏DOM节点并未改变DOM树的结构，它只影响DOM节点的显示。这和删除DOM节点不同。</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = $(&apos;a[target=_blank]&apos;);</div><div class=\"line\">a.hide(); // 隐藏</div><div class=\"line\">a.show(); // 显示</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>获取DOM信息</p>\n<ul>\n<li>利用jQuery对象的若干方法，可直接获取DOM的高宽等信息，而无需针对不同浏览器编写特定代码。</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 浏览器可视窗口大小:</div><div class=\"line\">$(window).width(); // 800</div><div class=\"line\">$(window).height(); // 600</div><div class=\"line\">// HTML文档大小:</div><div class=\"line\">$(document).width(); // 800</div><div class=\"line\">$(document).height(); // 3500</div><div class=\"line\">// 某个div的大小:</div><div class=\"line\">var div = $(&apos;#test-div&apos;);</div><div class=\"line\">div.width(); // 600</div><div class=\"line\">div.height(); // 300</div><div class=\"line\">div.width(400); // 设置CSS属性 width: 400px，是否生效要看CSS是否有效</div><div class=\"line\">div.height(&apos;200px&apos;); // 设置CSS属性 height: 200px，是否生效要看CSS是否有效</div><div class=\"line\"></div><div class=\"line\">//attr()和removeAttr()方法-----用于操作DOM节点的属性：</div><div class=\"line\">// &lt;div id=&quot;test-div&quot; name=&quot;Test&quot; start=&quot;1&quot;&gt;...&lt;/div&gt;</div><div class=\"line\">var div = $(&apos;#test-div&apos;);</div><div class=\"line\">div.attr(&apos;data&apos;); // undefined, 属性不存在</div><div class=\"line\">div.attr(&apos;name&apos;); // &apos;Test&apos;</div><div class=\"line\">div.attr(&apos;name&apos;, &apos;Hello&apos;); // div的name属性变为&apos;Hello&apos;</div><div class=\"line\">div.removeAttr(&apos;name&apos;); // 删除name属性</div><div class=\"line\">div.attr(&apos;name&apos;); // undefined</div><div class=\"line\"></div><div class=\"line\">//prop()方法和attr()类似，只是对于一些在DOM节点中可没有值的属性(如checked, selected)，使用prop()返回值为真假(true/false)（更合理些）</div><div class=\"line\">var radio = $(&apos;#test-radio&apos;);</div><div class=\"line\">radio.attr(&apos;checked&apos;); // &apos;checked&apos;</div><div class=\"line\">radio.prop(&apos;checked&apos;); // true</div><div class=\"line\">//不过，用is()方法判断会更好：</div><div class=\"line\">radio.is(&apos;:checked&apos;); // true</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>操作表单</p>\n<ul>\n<li>对于表单元素，jQuery对象统一提供<code>val()</code>方法获取和设置对应的<code>value</code>属性。</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">/***************表单********************/</div><div class=\"line\"> &lt;input id=&quot;test-input&quot; name=&quot;email&quot; value=&quot;&quot;&gt;</div><div class=\"line\"> &lt;select id=&quot;test-select&quot; name=&quot;city&quot;&gt;</div><div class=\"line\">     &lt;option value=&quot;BJ&quot; selected&gt;Beijing&lt;/option&gt;</div><div class=\"line\">     &lt;option value=&quot;SH&quot;&gt;Shanghai&lt;/option&gt;</div><div class=\"line\">     &lt;option value=&quot;SZ&quot;&gt;Shenzhen&lt;/option&gt;</div><div class=\"line\"> &lt;/select&gt;</div><div class=\"line\"> &lt;textarea id=&quot;test-textarea&quot;&gt;Hello&lt;/textarea&gt;</div><div class=\"line\">/*****************************************/</div><div class=\"line\">var</div><div class=\"line\">   input = $(&apos;#test-input&apos;),</div><div class=\"line\">   select = $(&apos;#test-select&apos;),</div><div class=\"line\">   textarea = $(&apos;#test-textarea&apos;);</div><div class=\"line\"></div><div class=\"line\">input.val(); // &apos;test&apos;</div><div class=\"line\">input.val(&apos;abc@example.com&apos;); // 文本框的内容已变为abc@example.com</div><div class=\"line\"></div><div class=\"line\">select.val(); // &apos;BJ&apos;</div><div class=\"line\">select.val(&apos;SH&apos;); // 选择框已变为Shanghai</div><div class=\"line\"></div><div class=\"line\">textarea.val(); // &apos;Hello&apos;</div><div class=\"line\">textarea.val(&apos;Hi&apos;); // 文本区域已更新为&apos;Hi&apos;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>添加DOM节点</p>\n<ul>\n<li>添加新的DOM节点，除了通过jQuery的<code>html()</code>这种暴力方法外，还可以用<code>append()</code>和<code>prepend()</code>方法。</li>\n<li>他们接受<code>字符串、原始DOM对象、jQuery对象和函数对象</code>作为参数。</li>\n<li><code>append()</code>把DOM添加到最后，<code>prepend()</code>则把DOM添加到最前。</li>\n<li>注意：如果要添加的DOM节点已经存在于HTML文档中，它会首先从文档移除，然后再添加，也就是说，用<code>append()</code>和<code>prepend()</code>，可以<code>移动</code>一个DOM节点。</li>\n<li>对于同级节点还可以用<code>after()</code>或者<code>before()</code>方法把新节点插入到指定位置</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;test-div&quot;&gt;</div><div class=\"line\">  &lt;ul&gt;</div><div class=\"line\">     &lt;li&gt;&lt;span&gt;JavaScript&lt;/span&gt;&lt;/li&gt;</div><div class=\"line\">     &lt;li&gt;&lt;span&gt;Python&lt;/span&gt;&lt;/li&gt;</div><div class=\"line\">     &lt;li&gt;&lt;span&gt;Swift&lt;/span&gt;&lt;/li&gt;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\"> &lt;/div&gt;</div><div class=\"line\"> /*****************向列表新增一个语言*******************/ </div><div class=\"line\"> var ul = $(&apos;#test-div&gt;ul&apos;);  //先拿到`&lt;ul&gt;`节点 </div><div class=\"line\"></div><div class=\"line\"> //添加字符串(HTML片段):</div><div class=\"line\"> ul.append(&apos;&lt;li&gt;&lt;span&gt;Haskell&lt;/span&gt;&lt;/li&gt;&apos;); </div><div class=\"line\"></div><div class=\"line\"> // 添加DOM对象:</div><div class=\"line\"> var ps = document.createElement(&apos;li&apos;);//先创建</div><div class=\"line\"> ps.innerHTML = &apos;&lt;span&gt;Pascal&lt;/span&gt;&apos;;//赋值</div><div class=\"line\"> ul.append(ps);</div><div class=\"line\"></div><div class=\"line\"> // 添加jQuery对象:</div><div class=\"line\"> ul.append($(&apos;#scheme&apos;));</div><div class=\"line\"></div><div class=\"line\"> // 添加函数对象: </div><div class=\"line\"> //传入函数时，要求返回一个字符串、DOM对象或者jQuery对象。因为jQuery的append()可能作用于一组DOM节点，只有传入函数才能针对每个DOM生成不同的子节点。</div><div class=\"line\"> ul.append(function (index, html) &#123;</div><div class=\"line\">    return &apos;&lt;li&gt;&lt;span&gt;Language - &apos; + index + &apos;&lt;/span&gt;&lt;/li&gt;&apos;;</div><div class=\"line\"> &#125;);</div><div class=\"line\"> // 把新节点插入到指定位置，如插入到JavaScript和Python之间</div><div class=\"line\"> var js = $(&apos;#test-div&gt;ul&gt;li:first-child&apos;);  //先定位到JavaScript</div><div class=\"line\"> js.after(&apos;&lt;li&gt;&lt;span&gt;Lua&lt;/span&gt;&lt;/li&gt;&apos;);  //然后用after()方法</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>删除DOM节点</p>\n<ul>\n<li>语法：<code>jQuery对象. remove()</code>。</li>\n<li>如果jQuery对象包含若干DOM节点，实际上可以一次删除多个DOM节点</li>\n<li>实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var li = $(&apos;#test-div&gt;ul&gt;li&apos;);</div><div class=\"line\">li.remove(); // 所有&lt;li&gt;全被删除</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n"}