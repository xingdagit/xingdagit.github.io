{"tags":[{"name":"jQuery","permalink":"http://yoursite.com/tags/jQuery/","url":"\\async\\tags\\jQuery.json","count":8}],"categories":[],"url":"\\async\\posts\\2017\\06\\04\\jQuery-事件.json","date":1496584935000,"path":{"year":2017,"month":6,"day":4,"name":"jQuery-事件"},"title":"jQuery-事件","permalink":"http://yoursite.com/2017/06/04/jQuery-事件/","content":"<h3 id=\"jQuery事件\"><a href=\"#jQuery事件\" class=\"headerlink\" title=\"jQuery事件\"></a>jQuery事件</h3><ul>\n<li>因为JavaScript在浏览器中以<code>单线程模式</code>运行，页面加载后，一旦页面上所有的JavaScript代码被执行完后，就只能依赖触发<code>事件</code>来执行JavaScript代码。</li>\n<li>浏览器在接收到用户的鼠标或键盘输入后，会自动在对应的DOM节点上触发相应的事件。如果该节点已经绑定了对应的JavaScript处理函数，该函数就会自动调用。</li>\n<li>由于不同的浏览器绑定事件的代码都不太一样，所以用<code>jQuery</code>来写代码，就可以屏蔽不同浏览器的差异，而我们总是编写相同的代码。</li>\n<li>jQuery能够绑定的事件主要包括：<code>鼠标事件</code>、<code>键盘事件</code>及<code>其他一些事件</code>。</li>\n<li>例子：用jQuery绑定一个click事件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = $(&apos;#test-link&apos;);  // 获取超链接的jQuery对象</div><div class=\"line\">/*on方法用来绑定一个事件，需要传入事件名称和对应的处理函数作为参数*/</div><div class=\"line\">a.on(&apos;click&apos;, function () &#123;</div><div class=\"line\">   alert(&apos;Hello!&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">/*另一种更简化的写法是直接调用click()方法（更常用）*/</div><div class=\"line\">a.click(function () &#123;</div><div class=\"line\">   alert(&apos;Hello!&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>鼠标事件<br><code>click</code>: 鼠标单击时触发；<br><code>dblclick</code>：鼠标双击时触发；<br><code>mouseenter</code>：鼠标进入时触发；<br><code>mouseleave</code>：鼠标移出时触发；<br><code>mousemove</code>：鼠标在DOM内部移动时触发；<br><code>hover</code>：鼠标进入和退出时触发两个函数，相当于<code>mouseenter</code>加上<code>mouseleave</code>。</p>\n</li>\n<li><p>键盘事件<br>键盘事件仅作用在当前焦点的DOM上，通常是<code>&lt;input&gt;</code>和<code>&lt;textarea&gt;</code>。<br><code>keydown</code>：键盘按下时触发；<br><code>keyup</code>：键盘松开时触发；<br><code>keypress</code>：按一次键后触发。</p>\n</li>\n<li><p>其他事件<br><code>focus</code>：当DOM获得焦点时触发；<br><code>blur</code>：当DOM失去焦点时触发；<br><code>change</code>：当<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>或<code>&lt;textarea&gt;</code>的内容改变时触发；<br><code>submit</code>：当<code>&lt;form&gt;</code>提交时触发；<br><code>ready</code>：当页面被载入并且DOM树完成初始化后触发且只触发一次，只作用于<code>document对象</code>。非常适合用来写其他的初始化代码。如给一个<code>&lt;form&gt;</code>表单绑定<code>submit</code>事件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">//初始化代码必须放到document对象的ready事件中，以保证相关代码会在DOM树初始化后再执行</div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\">        $(document).on(&apos;ready&apos;, function () &#123;</div><div class=\"line\">            $(&apos;#idForm).on(&apos;submit&apos;, function () &#123;</div><div class=\"line\">                alert(&apos;submit!&apos;);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">//其实也可以简化为以下方式（更常见）</div><div class=\"line\">$(function () &#123;</div><div class=\"line\">       //初始化代码...</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">//!!!!!以后若遇到$(function () &#123;...&#125;)的形式，牢记这是document对象的ready事件处理函数</div><div class=\"line\">//可以反复绑定事件处理函数，它们会依次执行</div><div class=\"line\">$(function () &#123;</div><div class=\"line\">    console.log(&apos;init A...&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">$(function () &#123;</div><div class=\"line\">    console.log(&apos;init B...&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">$(function () &#123;</div><div class=\"line\">    console.log(&apos;init C...&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p>事件参数</p>\n<ul>\n<li>有些事件如<code>mousemove</code>和<code>keypress</code>，需要获取<code>鼠标位置</code>和<code>按键的值</code>，否则监听这些事件就没什么意义了。</li>\n<li>其实所有事件都会传入<code>Event对象</code>作为参数，所以可以从<code>Event对象</code>上获取到更多的信息：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//当鼠标在div里面移动时会显示鼠标的横坐标和纵坐标</div><div class=\"line\">$(function () &#123;</div><div class=\"line\">  $(&apos;#testMouseMoveDiv&apos;).mousemove(function (e) &#123;</div><div class=\"line\">      $(&apos;#testMouseMoveSpan&apos;).text(&apos;pageX = &apos; + e.pageX + &apos;, pageY = &apos; + e.pageY);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>取消绑定</p>\n<ul>\n<li>一个已被绑定的事件可以解除绑定。</li>\n<li><p>若要移除已绑定的click事件的<code>一个处理函数</code>，可通过<code>off(&#39;click&#39;, function)</code>实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">function hello() &#123;</div><div class=\"line\">  alert(&apos;hello!&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\">a.click(hello); // 绑定事件</div><div class=\"line\">// 10秒钟后解除绑定:</div><div class=\"line\">setTimeout(function () &#123;</div><div class=\"line\">  a.off(&apos;click&apos;, hello);</div><div class=\"line\">&#125;, 10000);</div><div class=\"line\">/**************************/</div><div class=\"line\">//因为取消绑定事件需要传入“绑定的函数名”作参数，所以以“匿名方式”方式绑定的事件是不可以取消绑定的(两个匿名函数虽外表上一模一样，但它们是两个不同的函数对象)：</div><div class=\"line\">// 绑定事件:</div><div class=\"line\">a.click(function () &#123;</div><div class=\"line\">  alert(&apos;hello!&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">// 解除绑定（无效）:</div><div class=\"line\">a.off(&apos;click&apos;, function () &#123;</div><div class=\"line\">  alert(&apos;hello!&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>若要<code>一次性</code>移除已绑定的click事件的<code>所有处理函数</code>，可通过<code>off(&#39;click&#39;)</code>实现。</p>\n</li>\n<li>同理，若要<code>一次性</code>移除已绑定的所有类型的事件处理函数<code>，可通过</code>无参数调用off()`实现。</li>\n</ul>\n</li>\n<li><p>事件触发条件</p>\n<ul>\n<li>需要注意的问题：事件的触发总是由<code>用户操作</code>引发的，用<code>JavaScript代码</code>去产生的操作将不会触发事件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//为一个文本框绑定change事件：</div><div class=\"line\">$(&apos;#test-input&apos;).change(function () &#123;</div><div class=\"line\">  console.log(&apos;changed...&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">//当用户在文本框中输入时就会触发change事件，但用JavaScript代码去改动文本框的值，就不会触发change事件：</div><div class=\"line\">$(&apos;#test-input&apos;).val(&apos;change it!&apos;); // 无法触发change事件</div><div class=\"line\">//有时候希望用代码触发`change事件`，也可以通过直接调用`无参数的change()方法`来触发该事件：</div><div class=\"line\">input.change(); // 触发change事件</div><div class=\"line\">/*input.change()相当于input.trigger(&apos;change&apos;)，它是trigger()方法的简写*/</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>浏览器安全限制</p>\n<ul>\n<li><p>在浏览器中有些JavaScript代码只有在<code>用户触发下</code>才能执行，例如<code>window.open()</code>函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 无法弹出新窗口，将被浏览器屏蔽:</div><div class=\"line\">$(function () &#123;</div><div class=\"line\">  window.open(&apos;/&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>这些“敏感代码”只能由用户操作来触发，所以应该把相应操作放在一个函数中，然后在一些常用事件(如click事件)处理函数中才去调用这个函数。</p>\n</li>\n</ul>\n</li>\n</ul>\n"}