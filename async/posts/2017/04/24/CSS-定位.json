{"tags":[{"name":"CSS","permalink":"http://yoursite.com/tags/CSS/","url":"\\async\\tags\\CSS.json","count":3}],"categories":[],"url":"\\async\\posts\\2017\\04\\24\\CSS-定位.json","date":1493004145000,"path":{"year":2017,"month":4,"day":24,"name":"CSS-定位"},"title":"CSS-定位","permalink":"http://yoursite.com/2017/04/24/CSS-定位/","content":"<h2 id=\"1-一切皆为框\"><a href=\"#1-一切皆为框\" class=\"headerlink\" title=\"1. 一切皆为框\"></a>1. 一切皆为框</h2><ul>\n<li><p>分类</p>\n<ol>\n<li>块级元素 —- “块框”<br>从上到下一个接一个地排列，框之间的垂直距离是由框的垂直外边距计算出来</li>\n<li>行内元素 —- “行内框”<br>在一行中水平布置。只有通过水平内边距、边框和外边距可调整它们的间距。垂直内边距、边框和外边距不影响行内框的高度(除非改为<code>display: block</code>)</li>\n<li>一段/每行文本 —- “无名块框”<br>不与专门定义的元素相关联；<br>也具有块级元素特点</li>\n<li>一行形成的水平框 —-行框（LineBox）<br>行框的高度总是足以容纳它包含的所有行内框。不过设置行高可以增加这个框的高度</li>\n</ol>\n</li>\n<li><p>无法直接对 <strong>无名块</strong> 或 <strong>行框</strong> 应用样式，因为没有可以应用样式的地方</p>\n</li>\n<li><p>可使用 <strong>display 属性</strong> 改变生成的框的类型</p>\n<ol>\n<li>block：可以让行内元素表现得像块级元素一样</li>\n<li>inline：可以让块级元素表现得像行内元素一样</li>\n<li>none：让生成的元素没有框,导致该框及其所有内容不再显示，不占用文档中的空间。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"2-CSS-定位机制\"><a href=\"#2-CSS-定位机制\" class=\"headerlink\" title=\"2. CSS 定位机制\"></a>2. CSS 定位机制</h2><ol>\n<li><p>标准文档流(普通流)</p>\n<ul>\n<li>流式布局</li>\n<li>除非专门指定，否则所有框都在普通流中定位。即普通流中的元素的位置由元素在(X)HTML中的位置决定</li>\n<li>相对定位元素仍处于标准文档流中，浮动元素与绝对定位元素则会脱离标准文档流</li>\n<li>从上到下，从左到右，输出文档内容</li>\n<li>由块级元素和行级元素组成(两者都具有盒子模型)</li>\n<li>盒子模型<ul>\n<li>3D层次<br>border(顶层)<br>content + padding<br>background-image<br>background-color<br>margin</li>\n<li>不设置高度，盒子模型随内容自适应高度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>浮动</p>\n<ul>\n<li>浮动布局</li>\n<li>可实现横向多列布局</li>\n<li>float属性</li>\n<li>浮动框可向 左/右 移动，直至它的外边缘碰到 包含框/另一浮动框 的边框为止</li>\n<li>设置浮动若没设置宽度，元素宽度随内容变化而变化</li>\n<li>浮动让元素脱离标准文档流<ul>\n<li>使元素处于标准文档流之上，不处于同一层</li>\n<li>导致元素会覆盖在它底下的处于标准文档流的元素</li>\n<li>假设A和B都处于标准文档流(同一层)，且A在B上面<ol>\n<li>A浮动了(脱离本层)，B往上移动并占据A的位置，而且可能被A遮住了(藏在A的底下)</li>\n<li>B浮动了(脱离本层)，B不会走到A后面跟A处于同一行</li>\n<li>A和B都浮动(脱离本层)，B就会走到A的后面跟A处于同一行</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>清除浮动<ul>\n<li>为让周围元素为浮动元素留出空间(阻止行框围绕浮动框)</li>\n<li>只影响元素本身(想谁动就搞谁)</li>\n<li>语法：<ol>\n<li><code>clear：none|left|right|both</code>  //用于紧邻后面的元素<br>各取值表示哪一边不能挨着浮动框；<br>若无紧邻后面元素，可自己新建一个空元素来进行清理(如<code>&lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;</code>)</li>\n<li><code>width:100% + overflow:hidden</code> //用于父包含块</li>\n</ol>\n</li>\n<li>实例：A和B都浮动 ——&gt;  要让B往下移(B动) ——&gt;  对B设置clear:left  ——&gt;  B往下移一行<br>例图：|A||B|<br>/<em>相当于不允许B左边存在浮动元素</em>/</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ol>\n<li>定位<ul>\n<li>可实现横向多列布局及较复杂的定位</li>\n<li>三种定位形式<ol>\n<li>静态定位(不算定位)</li>\n<li>相对定位</li>\n<li>绝对定位</li>\n</ol>\n</li>\n<li>position 属性</li>\n<li>四种属性值(position)<ol>\n<li>static —静态定位<ul>\n<li>元素框正常生成</li>\n<li>块级元素生成一个矩形框，作为文档流中的一部分</li>\n<li>行内元素则会创建一个/多个行框，并置于其父元素</li>\n</ul>\n</li>\n<li>relative —相对定位<ul>\n<li>元素框偏移某个距离(相对于自身位置左上角进行位移)</li>\n<li>其元素仍处于标准文档流中</li>\n<li>元素仍保持其未定位前的形状，原本占据的空间仍保留</li>\n<li>拥有z-index属性</li>\n<li>position:relative 与top、right、bottom、left 分别组合实现各方向的相对定位</li>\n</ul>\n</li>\n<li>absolute —绝对定位<ul>\n<li>元素框从文档流完全删除</li>\n<li>元素完全脱离了标准文档流</li>\n<li>元素在原文档流所占空间会消失，导致部分元素发生偏移(可能会出现元素的覆盖重叠)</li>\n<li>建立了以<strong>包含块</strong>为基准的定位(相对于其包含块定位)<br>包含块可能是：文档中另一元素(最近已定位父元素) | 最初包含块(浏览器)</li>\n<li>拥有z-index属性(可通过它来控制堆放次序)</li>\n<li>通过一定偏移实现<ol>\n<li>未设置偏移量<ul>\n<li>保持在元素初始位置(无论存不存在父元素)</li>\n<li>脱离了标准文档流</li>\n</ul>\n</li>\n<li>设置了偏移量<ul>\n<li>不存在已定位父元素：以<code>&lt;html&gt;(浏览器)</code>为偏移参照标准</li>\n<li>存在已定位父元素：以<code>最近已定位父元素</code>为偏移参照标准</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>元素定位后生成一个块级框，而不论它在原正常文档流中生成何种类型的框</li>\n<li>当元素设置了绝对定位 但 没设置宽度时，宽度随内容变化而变化</li>\n<li>position:relative 与 top、right、bottom、left 分别组合 实现各方向的相对定位</li>\n</ul>\n</li>\n<li>fixed —固定定位<ul>\n<li>元素框的表现类似于absolute，不过包含块为视窗本身</li>\n<li>绝对定位的一种</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>top、right、bottom、left 属性是通过设置 元素外边距边界与其包含块边界间的距离 来进行偏移   </li>\n</ul>\n</li>\n</ol>\n<h2 id=\"3-CSS-关于定位的属性\"><a href=\"#3-CSS-关于定位的属性\" class=\"headerlink\" title=\"3. CSS 关于定位的属性\"></a>3. CSS 关于定位的属性</h2><ol>\n<li>overflow 属性<ul>\n<li>当元素内容溢出其区域时所做处理</li>\n<li>属性值：<ol>\n<li>visible(默认)：不修剪，突出外面显示</li>\n<li>hidden：多处部分隐藏</li>\n<li>scroll：生成滚动条</li>\n<li>auto：如被修剪，则生成滚动条</li>\n<li>inherit：继承父元素的overflow属性值</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>clip 属性<ul>\n<li>剪裁绝对定位元素</li>\n<li>属性值：<ol>\n<li>shape：形状</li>\n<li>auto</li>\n<li>inherit</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>vertical-align 属性<ul>\n<li>设置元素垂直对齐方式</li>\n</ul>\n</li>\n<li>z-index 属性<ul>\n<li>设置元素的堆叠顺序</li>\n<li>拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面</li>\n<li>Z-index 仅能在定位元素上奏效</li>\n<li>属性值<ol>\n<li>auto(默认)：堆叠顺序与父元素相等</li>\n<li>数值：可正可负，正数比负数层次高</li>\n<li>inherit：规定应从父元素继承 z-index 属性的值</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"4-CSS-水平对齐\"><a href=\"#4-CSS-水平对齐\" class=\"headerlink\" title=\"4. CSS 水平对齐\"></a>4. CSS 水平对齐</h2><ul>\n<li>在 CSS 中，可以使用多种属性来水平对齐元素</li>\n<li><p>三种方式：</p>\n<ol>\n<li>使用 margin 属性来水平对齐<ul>\n<li>通过将左右外边距(margin-left/margin-right)或设置为 “auto” 或 <code>margin:auto;</code>，来对齐块元素</li>\n<li>规定的是均等地分配可用的外边距，结果就是<strong>居中</strong>的元素</li>\n<li>如果宽度是 100%，则对齐没有效果</li>\n</ul>\n</li>\n<li>使用 position 属性进行左和右对齐<ul>\n<li>即利用绝对定位(position:absolute;)</li>\n</ul>\n</li>\n<li>使用 float 属性来进行左和右对齐</li>\n</ol>\n</li>\n<li><p>跨浏览器兼容性问题</p>\n<ul>\n<li>使用 <strong>position</strong> 属性 和 <strong>float 属性</strong> 对齐元素时，对 <code>&lt;body&gt;</code>元素的外边距和内边距进行预定义(<code>body{margin:0;padding:0;}</code>)是一个好主意,这样可以避免在不同的浏览器中出现可见的差异。</li>\n<li>当使用 position 属性时，IE8以及更早的版本存在一个问题:若容器元素（如<code>&lt;divclass=&quot;container&quot;&gt;</code>）设置了指定的宽度，并且省略了 !DOCTYPE 声明，那么 IE8 以及更早的版本会在右侧增加 17px 的外边距（这似乎是为滚动条预留的空间）</li>\n<li>所以，请始终设置 !DOCTYPE 声明：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">body</div><div class=\"line\">&#123;</div><div class=\"line\">margin:0;</div><div class=\"line\">padding:0;</div><div class=\"line\">&#125;</div><div class=\"line\">....</div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n"}